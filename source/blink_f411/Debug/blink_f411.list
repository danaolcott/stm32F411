
blink_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecfc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800ee94  0800ee94  0001ee94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800eea8  0800eea8  0001eea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800eeac  0800eeac  0001eeac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  0800eeb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000018  0800eec8  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000003c  0800eec8  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011611  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000369e  00000000  00000000  00031659  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000488  00000000  00000000  00034cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006b93  00000000  00000000  00035180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00006f38  00000000  00000000  0003bd13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  00042c4b  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000062f8  00000000  00000000  00042cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00048fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000024  00000000  00000000  00048fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00049004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ee78 	.word	0x0800ee78

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	0800ee78 	.word	0x0800ee78

080001d8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <NVIC_PriorityGroupConfig+0x24>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001ec:	60d3      	str	r3, [r2, #12]
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000208:	2300      	movs	r3, #0
 800020a:	73fb      	strb	r3, [r7, #15]
 800020c:	2300      	movs	r3, #0
 800020e:	73bb      	strb	r3, [r7, #14]
 8000210:	230f      	movs	r3, #15
 8000212:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	78db      	ldrb	r3, [r3, #3]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d039      	beq.n	8000290 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800021c:	4b27      	ldr	r3, [pc, #156]	; (80002bc <NVIC_Init+0xbc>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	43db      	mvns	r3, r3
 8000222:	0a1b      	lsrs	r3, r3, #8
 8000224:	b2db      	uxtb	r3, r3
 8000226:	f003 0307 	and.w	r3, r3, #7
 800022a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	f1c3 0304 	rsb	r3, r3, #4
 8000232:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000234:	7b7a      	ldrb	r2, [r7, #13]
 8000236:	7bfb      	ldrb	r3, [r7, #15]
 8000238:	fa42 f303 	asr.w	r3, r2, r3
 800023c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	461a      	mov	r2, r3
 8000244:	7bbb      	ldrb	r3, [r7, #14]
 8000246:	fa02 f303 	lsl.w	r3, r2, r3
 800024a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	789a      	ldrb	r2, [r3, #2]
 8000250:	7b7b      	ldrb	r3, [r7, #13]
 8000252:	4013      	ands	r3, r2
 8000254:	b2da      	uxtb	r2, r3
 8000256:	7bfb      	ldrb	r3, [r7, #15]
 8000258:	4313      	orrs	r3, r2
 800025a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	011b      	lsls	r3, r3, #4
 8000260:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000262:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <NVIC_Init+0xc0>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4413      	add	r3, r2
 800026a:	7bfa      	ldrb	r2, [r7, #15]
 800026c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <NVIC_Init+0xc0>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	095b      	lsrs	r3, r3, #5
 8000278:	b2db      	uxtb	r3, r3
 800027a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	f003 031f 	and.w	r3, r3, #31
 8000284:	2101      	movs	r1, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800028a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800028e:	e00f      	b.n	80002b0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000290:	490b      	ldr	r1, [pc, #44]	; (80002c0 <NVIC_Init+0xc0>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	095b      	lsrs	r3, r3, #5
 8000298:	b2db      	uxtb	r3, r3
 800029a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	f003 031f 	and.w	r3, r3, #31
 80002a4:	2201      	movs	r2, #1
 80002a6:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002a8:	f100 0320 	add.w	r3, r0, #32
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00
 80002c0:	e000e100 	.word	0xe000e100

080002c4 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80002ce:	4907      	ldr	r1, [pc, #28]	; (80002ec <NVIC_SetVectorTable+0x28>)
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80002d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	4313      	orrs	r3, r2
 80002de:	608b      	str	r3, [r1, #8]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	e000ed00 	.word	0xe000ed00

080002f0 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	460a      	mov	r2, r1
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	4613      	mov	r3, r2
 80002fe:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d006      	beq.n	8000314 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 8000306:	490a      	ldr	r1, [pc, #40]	; (8000330 <NVIC_SystemLPConfig+0x40>)
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <NVIC_SystemLPConfig+0x40>)
 800030a:	691a      	ldr	r2, [r3, #16]
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4313      	orrs	r3, r2
 8000310:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
 8000312:	e006      	b.n	8000322 <NVIC_SystemLPConfig+0x32>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000314:	4906      	ldr	r1, [pc, #24]	; (8000330 <NVIC_SystemLPConfig+0x40>)
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <NVIC_SystemLPConfig+0x40>)
 8000318:	691a      	ldr	r2, [r3, #16]
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	43db      	mvns	r3, r3
 800031e:	4013      	ands	r3, r2
 8000320:	610b      	str	r3, [r1, #16]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b04      	cmp	r3, #4
 8000340:	d106      	bne.n	8000350 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000342:	4a09      	ldr	r2, [pc, #36]	; (8000368 <SysTick_CLKSourceConfig+0x34>)
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <SysTick_CLKSourceConfig+0x34>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 800034e:	e005      	b.n	800035c <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000350:	4a05      	ldr	r2, [pc, #20]	; (8000368 <SysTick_CLKSourceConfig+0x34>)
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <SysTick_CLKSourceConfig+0x34>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f023 0304 	bic.w	r3, r3, #4
 800035a:	6013      	str	r3, [r2, #0]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	e000e010 	.word	0xe000e010

0800036c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000370:	2101      	movs	r1, #1
 8000372:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000376:	f009 f913 	bl	80095a0 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800037a:	2100      	movs	r1, #0
 800037c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000380:	f009 f90e 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}

08000388 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003aa:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	791b      	ldrb	r3, [r3, #4]
 80003b0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80003b6:	4313      	orrs	r3, r2
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	4313      	orrs	r3, r2
 80003bc:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80003ca:	68fa      	ldr	r2, [r7, #12]
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <ADC_Init+0xa8>)
 80003ce:	4013      	ands	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80003da:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80003e0:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	795b      	ldrb	r3, [r3, #5]
 80003e6:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80003e8:	4313      	orrs	r3, r2
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	4313      	orrs	r3, r2
 80003ee:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	68fa      	ldr	r2, [r7, #12]
 80003f4:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000402:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	7d1b      	ldrb	r3, [r3, #20]
 8000408:	3b01      	subs	r3, #1
 800040a:	b2da      	uxtb	r2, r3
 800040c:	7afb      	ldrb	r3, [r7, #11]
 800040e:	4313      	orrs	r3, r2
 8000410:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	051b      	lsls	r3, r3, #20
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	4313      	orrs	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	c0fff7fd 	.word	0xc0fff7fd

08000434 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2200      	movs	r2, #0
 8000446:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2200      	movs	r2, #0
 800044c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2201      	movs	r2, #1
 8000464:	751a      	strb	r2, [r3, #20]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000472:	b480      	push	{r7}
 8000474:	b085      	sub	sp, #20
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <ADC_CommonInit+0x4a>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <ADC_CommonInit+0x4e>)
 8000488:	4013      	ands	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000494:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800049a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80004a0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <ADC_CommonInit+0x4a>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6053      	str	r3, [r2, #4]
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40012300 	.word	0x40012300
 80004c0:	fffc30e0 	.word	0xfffc30e0

080004c4 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d006      	beq.n	8000510 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	f043 0201 	orr.w	r2, r3, #1
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800050e:	e005      	b.n	800051c <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	f023 0201 	bic.w	r2, r3, #1
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	609a      	str	r2, [r3, #8]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000542:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000546:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	4313      	orrs	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	605a      	str	r2, [r3, #4]
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	460b      	mov	r3, r1
 800056c:	807b      	strh	r3, [r7, #2]
 800056e:	4613      	mov	r3, r2
 8000570:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8000572:	887a      	ldrh	r2, [r7, #2]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8000578:	883a      	ldrh	r2, [r7, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 800058a:	b480      	push	{r7}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f023 031f 	bic.w	r3, r3, #31
 80005a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	605a      	str	r2, [r3, #4]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4603      	mov	r3, r0
 80005ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <ADC_TempSensorVrefintCmd+0x36>)
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <ADC_TempSensorVrefintCmd+0x36>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005dc:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 80005de:	e005      	b.n	80005ec <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <ADC_TempSensorVrefintCmd+0x36>)
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <ADC_TempSensorVrefintCmd+0x36>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80005ea:	6053      	str	r3, [r2, #4]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40012300 	.word	0x40012300

080005fc <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d006      	beq.n	800061a <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <ADC_VBATCmd+0x38>)
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <ADC_VBATCmd+0x38>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000616:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
  }
}
 8000618:	e005      	b.n	8000626 <ADC_VBATCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 800061a:	4a06      	ldr	r2, [pc, #24]	; (8000634 <ADC_VBATCmd+0x38>)
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <ADC_VBATCmd+0x38>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000624:	6053      	str	r3, [r2, #4]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40012300 	.word	0x40012300

08000638 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	4608      	mov	r0, r1
 8000642:	4611      	mov	r1, r2
 8000644:	461a      	mov	r2, r3
 8000646:	4603      	mov	r3, r0
 8000648:	70fb      	strb	r3, [r7, #3]
 800064a:	460b      	mov	r3, r1
 800064c:	70bb      	strb	r3, [r7, #2]
 800064e:	4613      	mov	r3, r2
 8000650:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	2b09      	cmp	r3, #9
 800065e:	d923      	bls.n	80006a8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	f1a3 020a 	sub.w	r2, r3, #10
 800066c:	4613      	mov	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4413      	add	r3, r2
 8000672:	2207      	movs	r2, #7
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	43db      	mvns	r3, r3
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000684:	7879      	ldrb	r1, [r7, #1]
 8000686:	78fb      	ldrb	r3, [r7, #3]
 8000688:	f1a3 020a 	sub.w	r2, r3, #10
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	4313      	orrs	r3, r2
 800069e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	e01e      	b.n	80006e6 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80006ae:	78fa      	ldrb	r2, [r7, #3]
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	2207      	movs	r2, #7
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	43db      	mvns	r3, r3
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80006c8:	7879      	ldrb	r1, [r7, #1]
 80006ca:	78fa      	ldrb	r2, [r7, #3]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	4313      	orrs	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80006e6:	78bb      	ldrb	r3, [r7, #2]
 80006e8:	2b06      	cmp	r3, #6
 80006ea:	d821      	bhi.n	8000730 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80006f2:	78bb      	ldrb	r3, [r7, #2]
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	221f      	movs	r2, #31
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	43db      	mvns	r3, r3
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	4013      	ands	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800070e:	78f9      	ldrb	r1, [r7, #3]
 8000710:	78bb      	ldrb	r3, [r7, #2]
 8000712:	1e5a      	subs	r2, r3, #1
 8000714:	4613      	mov	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4313      	orrs	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800072e:	e047      	b.n	80007c0 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000730:	78bb      	ldrb	r3, [r7, #2]
 8000732:	2b0c      	cmp	r3, #12
 8000734:	d821      	bhi.n	800077a <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800073c:	78bb      	ldrb	r3, [r7, #2]
 800073e:	1fda      	subs	r2, r3, #7
 8000740:	4613      	mov	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	221f      	movs	r2, #31
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	43db      	mvns	r3, r3
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	4013      	ands	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000758:	78f9      	ldrb	r1, [r7, #3]
 800075a:	78bb      	ldrb	r3, [r7, #2]
 800075c:	1fda      	subs	r2, r3, #7
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4313      	orrs	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000778:	e022      	b.n	80007c0 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000780:	78bb      	ldrb	r3, [r7, #2]
 8000782:	f1a3 020d 	sub.w	r2, r3, #13
 8000786:	4613      	mov	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	221f      	movs	r2, #31
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	43db      	mvns	r3, r3
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	4013      	ands	r3, r2
 800079c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800079e:	78f9      	ldrb	r1, [r7, #3]
 80007a0:	78bb      	ldrb	r3, [r7, #2]
 80007a2:	f1a3 020d 	sub.w	r2, r3, #13
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	fa01 f303 	lsl.w	r3, r1, r3
 80007b0:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	609a      	str	r2, [r3, #8]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8000804:	2301      	movs	r3, #1
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	e001      	b.n	800080e <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d006      	beq.n	800083c <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
  }
}
 800083a:	e005      	b.n	8000848 <ADC_EOCOnEachRegularChannelCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	609a      	str	r2, [r3, #8]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d006      	beq.n	8000874 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	f043 0202 	orr.w	r2, r3, #2
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 8000872:	e005      	b.n	8000880 <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	f023 0202 	bic.w	r2, r3, #2
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	609a      	str	r2, [r3, #8]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008ac:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	035b      	lsls	r3, r3, #13
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	605a      	str	r2, [r3, #4]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d006      	beq.n	80008f0 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 80008ee:	e005      	b.n	80008fc <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	b29b      	uxth	r3, r3
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8000926:	4b03      	ldr	r3, [pc, #12]	; (8000934 <ADC_GetMultiModeConversionValue+0x12>)
 8000928:	681b      	ldr	r3, [r3, #0]
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	40012308 	.word	0x40012308

08000938 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d006      	beq.n	8000958 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000956:	e005      	b.n	8000964 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	609a      	str	r2, [r3, #8]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d006      	beq.n	8000990 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 800098e:	e005      	b.n	800099c <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	609a      	str	r2, [r3, #8]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d006      	beq.n	80009c6 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c2:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
  }
}
 80009c4:	e005      	b.n	80009d2 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80009c6:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009d0:	6053      	str	r3, [r2, #4]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40012300 	.word	0x40012300

080009e4 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	4608      	mov	r0, r1
 80009ee:	4611      	mov	r1, r2
 80009f0:	461a      	mov	r2, r3
 80009f2:	4603      	mov	r3, r0
 80009f4:	70fb      	strb	r3, [r7, #3]
 80009f6:	460b      	mov	r3, r1
 80009f8:	70bb      	strb	r3, [r7, #2]
 80009fa:	4613      	mov	r3, r2
 80009fc:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	2b09      	cmp	r3, #9
 8000a0e:	d923      	bls.n	8000a58 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	f1a3 020a 	sub.w	r2, r3, #10
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	2207      	movs	r2, #7
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	4013      	ands	r3, r2
 8000a32:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8000a34:	7879      	ldrb	r1, [r7, #1]
 8000a36:	78fb      	ldrb	r3, [r7, #3]
 8000a38:	f1a3 020a 	sub.w	r2, r3, #10
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	e01e      	b.n	8000a96 <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000a5e:	78fa      	ldrb	r2, [r7, #3]
 8000a60:	4613      	mov	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	2207      	movs	r2, #7
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	4013      	ands	r3, r2
 8000a76:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000a78:	7879      	ldrb	r1, [r7, #1]
 8000a7a:	78fa      	ldrb	r2, [r7, #3]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a9a:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	0d1b      	lsrs	r3, r3, #20
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	78ba      	ldrb	r2, [r7, #2]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	221f      	movs	r2, #31
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	4013      	ands	r3, r2
 8000acc:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000ace:	78fa      	ldrb	r2, [r7, #3]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	78b9      	ldrb	r1, [r7, #2]
 8000ad6:	1acb      	subs	r3, r1, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	3302      	adds	r3, #2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000afa:	bf00      	nop
 8000afc:	371c      	adds	r7, #28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000b26:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	051b      	lsls	r3, r3, #20
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	70fb      	strb	r3, [r7, #3]
 8000b56:	4613      	mov	r3, r2
 8000b58:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8000b62:	78fa      	ldrb	r2, [r7, #3]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	883b      	ldrh	r3, [r7, #0]
 8000b70:	6013      	str	r3, [r2, #0]
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b085      	sub	sp, #20
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000b98:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	609a      	str	r2, [r3, #8]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000bce:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	609a      	str	r2, [r3, #8]
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b085      	sub	sp, #20
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e001      	b.n	8000c2c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
  }
}
 8000c58:	e005      	b.n	8000c66 <ADC_AutoInjectedConvCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	605a      	str	r2, [r3, #4]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d006      	beq.n	8000c92 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
  }
}
 8000c90:	e005      	b.n	8000c9e <ADC_InjectedDiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	605a      	str	r2, [r3, #4]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8000cbe:	78fa      	ldrb	r2, [r7, #3]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3328      	adds	r3, #40	; 0x28
 8000cc6:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	b29b      	uxth	r3, r3
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	807b      	strh	r3, [r7, #2]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8000cfe:	787b      	ldrb	r3, [r7, #1]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 8000d10:	e006      	b.n	8000d20 <ADC_ITConfig+0x46>
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	605a      	str	r2, [r3, #4]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e001      	b.n	8000d52 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8000d98:	887b      	ldrh	r3, [r7, #2]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4619      	mov	r1, r3
 8000daa:	2301      	movs	r3, #1
 8000dac:	408b      	lsls	r3, r1
 8000dae:	4013      	ands	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <ADC_GetITStatus+0x4a>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	75fb      	strb	r3, [r7, #23]
 8000dc8:	e001      	b.n	8000dce <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	371c      	adds	r7, #28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	0a1b      	lsrs	r3, r3, #8
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	43da      	mvns	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]
}                    
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <CAN_DeInit+0x44>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d10a      	bne.n	8000e2e <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000e1e:	f008 fb9f 	bl	8009560 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8000e22:	2100      	movs	r1, #0
 8000e24:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000e28:	f008 fb9a 	bl	8009560 <RCC_APB1PeriphResetCmd>
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
 8000e2c:	e009      	b.n	8000e42 <CAN_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8000e2e:	2101      	movs	r1, #1
 8000e30:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e34:	f008 fb94 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e3e:	f008 fb8f 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40006400 	.word	0x40006400

08000e50 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f023 0202 	bic.w	r2, r3, #2
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f043 0201 	orr.w	r2, r3, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000e7a:	e002      	b.n	8000e82 <CAN_Init+0x32>
  {
    wait_ack++;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d004      	beq.n	8000e98 <CAN_Init+0x48>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d1f1      	bne.n	8000e7c <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d002      	beq.n	8000eaa <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e09c      	b.n	8000fe4 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	799b      	ldrb	r3, [r3, #6]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d106      	bne.n	8000ec0 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e005      	b.n	8000ecc <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	79db      	ldrb	r3, [r3, #7]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d106      	bne.n	8000ee2 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e005      	b.n	8000eee <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	7a1b      	ldrb	r3, [r3, #8]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d106      	bne.n	8000f04 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f043 0220 	orr.w	r2, r3, #32
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e005      	b.n	8000f10 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 0220 	bic.w	r2, r3, #32
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	7a5b      	ldrb	r3, [r3, #9]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d106      	bne.n	8000f26 <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f043 0210 	orr.w	r2, r3, #16
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e005      	b.n	8000f32 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 0210 	bic.w	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	7a9b      	ldrb	r3, [r3, #10]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d106      	bne.n	8000f48 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f043 0208 	orr.w	r2, r3, #8
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e005      	b.n	8000f54 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f023 0208 	bic.w	r2, r3, #8
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	7adb      	ldrb	r3, [r3, #11]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d106      	bne.n	8000f6a <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f043 0204 	orr.w	r2, r3, #4
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e005      	b.n	8000f76 <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f023 0204 	bic.w	r2, r3, #4
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	78db      	ldrb	r3, [r3, #3]
 8000f80:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000f82:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000f8a:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	795b      	ldrb	r3, [r3, #5]
 8000f90:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000f92:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000f9a:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f023 0201 	bic.w	r2, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000fb0:	e002      	b.n	8000fb8 <CAN_Init+0x168>
   {
     wait_ack++;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d104      	bne.n	8000fce <CAN_Init+0x17e>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d1f1      	bne.n	8000fb2 <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d102      	bne.n	8000fe0 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e001      	b.n	8000fe4 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7a9b      	ldrb	r3, [r3, #10]
 8001002:	461a      	mov	r2, r3
 8001004:	2301      	movs	r3, #1
 8001006:	4093      	lsls	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <CAN_FilterInit+0x172>)
 800100c:	4b55      	ldr	r3, [pc, #340]	; (8001164 <CAN_FilterInit+0x172>)
 800100e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 800101a:	4952      	ldr	r1, [pc, #328]	; (8001164 <CAN_FilterInit+0x172>)
 800101c:	4b51      	ldr	r3, [pc, #324]	; (8001164 <CAN_FilterInit+0x172>)
 800101e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	4013      	ands	r3, r2
 8001028:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7b1b      	ldrb	r3, [r3, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d125      	bne.n	8001080 <CAN_FilterInit+0x8e>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8001034:	494b      	ldr	r1, [pc, #300]	; (8001164 <CAN_FilterInit+0x172>)
 8001036:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <CAN_FilterInit+0x172>)
 8001038:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	4013      	ands	r3, r2
 8001042:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8001046:	4947      	ldr	r1, [pc, #284]	; (8001164 <CAN_FilterInit+0x172>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7a9b      	ldrb	r3, [r3, #10]
 800104c:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	88db      	ldrh	r3, [r3, #6]
 8001052:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	8852      	ldrh	r2, [r2, #2]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8001058:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800105a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800105e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001062:	4940      	ldr	r1, [pc, #256]	; (8001164 <CAN_FilterInit+0x172>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7a9b      	ldrb	r3, [r3, #10]
 8001068:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	889b      	ldrh	r3, [r3, #4]
 800106e:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	8812      	ldrh	r2, [r2, #0]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8001074:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001076:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7b1b      	ldrb	r3, [r3, #12]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d124      	bne.n	80010d2 <CAN_FilterInit+0xe0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8001088:	4936      	ldr	r1, [pc, #216]	; (8001164 <CAN_FilterInit+0x172>)
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <CAN_FilterInit+0x172>)
 800108c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8001098:	4932      	ldr	r1, [pc, #200]	; (8001164 <CAN_FilterInit+0x172>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7a9b      	ldrb	r3, [r3, #10]
 800109e:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	8852      	ldrh	r2, [r2, #2]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80010aa:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80010ac:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80010b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80010b4:	492b      	ldr	r1, [pc, #172]	; (8001164 <CAN_FilterInit+0x172>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7a9b      	ldrb	r3, [r3, #10]
 80010ba:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	889b      	ldrh	r3, [r3, #4]
 80010c0:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	88d2      	ldrh	r2, [r2, #6]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80010c6:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80010c8:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	440b      	add	r3, r1
 80010d0:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7adb      	ldrb	r3, [r3, #11]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <CAN_FilterInit+0xfc>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 80010da:	4922      	ldr	r1, [pc, #136]	; (8001164 <CAN_FilterInit+0x172>)
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <CAN_FilterInit+0x172>)
 80010de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	4013      	ands	r3, r2
 80010e8:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 80010ec:	e007      	b.n	80010fe <CAN_FilterInit+0x10c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 80010ee:	491d      	ldr	r1, [pc, #116]	; (8001164 <CAN_FilterInit+0x172>)
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <CAN_FilterInit+0x172>)
 80010f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	891b      	ldrh	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <CAN_FilterInit+0x126>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8001106:	4917      	ldr	r1, [pc, #92]	; (8001164 <CAN_FilterInit+0x172>)
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <CAN_FilterInit+0x172>)
 800110a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	4013      	ands	r3, r2
 8001114:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	891b      	ldrh	r3, [r3, #8]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d107      	bne.n	8001130 <CAN_FilterInit+0x13e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8001120:	4910      	ldr	r1, [pc, #64]	; (8001164 <CAN_FilterInit+0x172>)
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <CAN_FilterInit+0x172>)
 8001124:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7b5b      	ldrb	r3, [r3, #13]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d107      	bne.n	8001148 <CAN_FilterInit+0x156>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8001138:	490a      	ldr	r1, [pc, #40]	; (8001164 <CAN_FilterInit+0x172>)
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <CAN_FilterInit+0x172>)
 800113c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <CAN_FilterInit+0x172>)
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <CAN_FilterInit+0x172>)
 800114c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40006400 	.word	0x40006400

08001168 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2202      	movs	r2, #2
 80011aa:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	801a      	strh	r2, [r3, #0]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <CAN_SlaveStartBank+0x5e>)
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <CAN_SlaveStartBank+0x5e>)
 80011cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 80011d8:	4a10      	ldr	r2, [pc, #64]	; (800121c <CAN_SlaveStartBank+0x5e>)
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <CAN_SlaveStartBank+0x5e>)
 80011dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80011e4:	f023 030e 	bic.w	r3, r3, #14
 80011e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 80011ec:	490b      	ldr	r1, [pc, #44]	; (800121c <CAN_SlaveStartBank+0x5e>)
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <CAN_SlaveStartBank+0x5e>)
 80011f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	4313      	orrs	r3, r2
 80011fa:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <CAN_SlaveStartBank+0x5e>)
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <CAN_SlaveStartBank+0x5e>)
 8001202:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40006400 	.word	0x40006400

08001220 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
 800123e:	e005      	b.n	800124c <CAN_DBGFreeze+0x2c>
    CANx->MCR &= ~MCR_DBF;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d01e      	beq.n	80012a8 <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800127c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800128c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800129c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
 80012a6:	e01d      	b.n	80012e4 <CAN_TTComModeCmd+0x8c>
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80012ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80012ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80012da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800130a:	d102      	bne.n	8001312 <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e015      	b.n	800133e <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800131a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800131e:	d102      	bne.n	8001326 <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e00b      	b.n	800133e <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001332:	d102      	bne.n	800133a <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e001      	b.n	800133e <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 800133a:	2304      	movs	r3, #4
 800133c:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	2b04      	cmp	r3, #4
 8001342:	f000 809c 	beq.w	800147e <CAN_Transmit+0x18e>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	3218      	adds	r2, #24
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	440a      	add	r2, r1
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	f002 0201 	and.w	r2, r2, #1
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	3318      	adds	r3, #24
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	440b      	add	r3, r1
 8001360:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	7a1b      	ldrb	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d113      	bne.n	8001392 <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	3218      	adds	r2, #24
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	440a      	add	r2, r1
 8001376:	6811      	ldr	r1, [r2, #0]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	0552      	lsls	r2, r2, #21
                                                  TxMessage->RTR);
 800137e:	6838      	ldr	r0, [r7, #0]
 8001380:	7a40      	ldrb	r0, [r0, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8001382:	4302      	orrs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	3318      	adds	r3, #24
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	440b      	add	r3, r1
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e015      	b.n	80013be <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	3218      	adds	r2, #24
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	440a      	add	r2, r1
 800139e:	6811      	ldr	r1, [r2, #0]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	6852      	ldr	r2, [r2, #4]
 80013a4:	00d2      	lsls	r2, r2, #3
                                                  TxMessage->IDE | \
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	7a00      	ldrb	r0, [r0, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80013aa:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	7a40      	ldrb	r0, [r0, #9]
                                                  TxMessage->IDE | \
 80013b0:	4302      	orrs	r2, r0
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80013b2:	430a      	orrs	r2, r1
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	3318      	adds	r3, #24
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	440b      	add	r3, r1
 80013bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	7a9b      	ldrb	r3, [r3, #10]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	3218      	adds	r2, #24
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	440a      	add	r2, r1
 80013d8:	3204      	adds	r2, #4
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	f022 020f 	bic.w	r2, r2, #15
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	3318      	adds	r3, #24
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	440b      	add	r3, r1
 80013e8:	3304      	adds	r3, #4
 80013ea:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	3218      	adds	r2, #24
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	440a      	add	r2, r1
 80013f8:	3204      	adds	r2, #4
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	6839      	ldr	r1, [r7, #0]
 80013fe:	7a89      	ldrb	r1, [r1, #10]
 8001400:	430a      	orrs	r2, r1
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	3318      	adds	r3, #24
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	440b      	add	r3, r1
 800140a:	3304      	adds	r3, #4
 800140c:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	7b92      	ldrb	r2, [r2, #14]
 8001414:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	7b52      	ldrb	r2, [r2, #13]
 800141a:	0412      	lsls	r2, r2, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800141c:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	7b12      	ldrb	r2, [r2, #12]
 8001422:	0212      	lsls	r2, r2, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8001424:	430a      	orrs	r2, r1
                                             ((uint32_t)TxMessage->Data[0]));
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	7ac9      	ldrb	r1, [r1, #11]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 800142a:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	440b      	add	r3, r1
 8001432:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001436:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	7c92      	ldrb	r2, [r2, #18]
 800143e:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	7c52      	ldrb	r2, [r2, #17]
 8001444:	0412      	lsls	r2, r2, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001446:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	7c12      	ldrb	r2, [r2, #16]
 800144c:	0212      	lsls	r2, r2, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800144e:	430a      	orrs	r2, r1
                                             ((uint32_t)TxMessage->Data[4]));
 8001450:	6839      	ldr	r1, [r7, #0]
 8001452:	7bc9      	ldrb	r1, [r1, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8001454:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	440b      	add	r3, r1
 800145c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001460:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	3218      	adds	r2, #24
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	440a      	add	r2, r1
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	3318      	adds	r3, #24
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	440b      	add	r3, r1
 800147c:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d009      	beq.n	80014b6 <CAN_TransmitStatus+0x2a>
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d00d      	beq.n	80014c2 <CAN_TransmitStatus+0x36>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d111      	bne.n	80014ce <CAN_TransmitStatus+0x42>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <CAN_TransmitStatus+0xbc>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
      break;
 80014b4:	e00e      	b.n	80014d4 <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <CAN_TransmitStatus+0xc0>)
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
      break;
 80014c0:	e008      	b.n	80014d4 <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <CAN_TransmitStatus+0xc4>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
      break;
 80014cc:	e002      	b.n	80014d4 <CAN_TransmitStatus+0x48>
    default:
      state = CAN_TxStatus_Failed;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
      break;
 80014d2:	bf00      	nop
  }
  switch (state)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <CAN_TransmitStatus+0xc8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d01b      	beq.n	8001514 <CAN_TransmitStatus+0x88>
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <CAN_TransmitStatus+0xc8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d808      	bhi.n	80014f4 <CAN_TransmitStatus+0x68>
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <CAN_TransmitStatus+0xcc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d012      	beq.n	800150e <CAN_TransmitStatus+0x82>
 80014e8:	4a17      	ldr	r2, [pc, #92]	; (8001548 <CAN_TransmitStatus+0xbc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d018      	beq.n	8001520 <CAN_TransmitStatus+0x94>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00a      	beq.n	8001508 <CAN_TransmitStatus+0x7c>
 80014f2:	e01e      	b.n	8001532 <CAN_TransmitStatus+0xa6>
 80014f4:	4a19      	ldr	r2, [pc, #100]	; (800155c <CAN_TransmitStatus+0xd0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00f      	beq.n	800151a <CAN_TransmitStatus+0x8e>
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <CAN_TransmitStatus+0xc4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d015      	beq.n	800152c <CAN_TransmitStatus+0xa0>
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <CAN_TransmitStatus+0xc0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00f      	beq.n	8001526 <CAN_TransmitStatus+0x9a>
 8001506:	e014      	b.n	8001532 <CAN_TransmitStatus+0xa6>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8001508:	2302      	movs	r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
      break;
 800150c:	e014      	b.n	8001538 <CAN_TransmitStatus+0xac>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
      break;
 8001512:	e011      	b.n	8001538 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
      break;
 8001518:	e00e      	b.n	8001538 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
      break;
 800151e:	e00b      	b.n	8001538 <CAN_TransmitStatus+0xac>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8001520:	2301      	movs	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
      break;
 8001524:	e008      	b.n	8001538 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 8001526:	2301      	movs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
      break;
 800152a:	e005      	b.n	8001538 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 800152c:	2301      	movs	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
      break;
 8001530:	e002      	b.n	8001538 <CAN_TransmitStatus+0xac>
    default: state = CAN_TxStatus_Failed;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
      break;
 8001536:	bf00      	nop
  }
  return (uint8_t) state;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	b2db      	uxtb	r3, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	04000003 	.word	0x04000003
 800154c:	08000300 	.word	0x08000300
 8001550:	10030000 	.word	0x10030000
 8001554:	08000100 	.word	0x08000100
 8001558:	04000001 	.word	0x04000001
 800155c:	10010000 	.word	0x10010000

08001560 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d00b      	beq.n	800158a <CAN_CancelTransmit+0x2a>
 8001572:	2b02      	cmp	r3, #2
 8001574:	d010      	beq.n	8001598 <CAN_CancelTransmit+0x38>
 8001576:	2b00      	cmp	r3, #0
 8001578:	d000      	beq.n	800157c <CAN_CancelTransmit+0x1c>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
 800157a:	e014      	b.n	80015a6 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]
      break;
 8001588:	e00d      	b.n	80015a6 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	609a      	str	r2, [r3, #8]
      break;
 8001596:	e006      	b.n	80015a6 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]
      break;
 80015a4:	bf00      	nop
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	460b      	mov	r3, r1
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	331b      	adds	r3, #27
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7a1b      	ldrb	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10b      	bne.n	80015f8 <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80015e0:	7afb      	ldrb	r3, [r7, #11]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	331b      	adds	r3, #27
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0d5b      	lsrs	r3, r3, #21
 80015ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e00a      	b.n	800160e <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	331b      	adds	r3, #27
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	4413      	add	r3, r2
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	331b      	adds	r3, #27
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	4413      	add	r3, r2
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	b2da      	uxtb	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	331b      	adds	r3, #27
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	4413      	add	r3, r2
 8001630:	3304      	adds	r3, #4
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	b2da      	uxtb	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	331b      	adds	r3, #27
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	3304      	adds	r3, #4
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b2da      	uxtb	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	4413      	add	r3, r2
 800165e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 800166a:	7afb      	ldrb	r3, [r7, #11]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	b2da      	uxtb	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	0c1b      	lsrs	r3, r3, #16
 8001690:	b2da      	uxtb	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0e1b      	lsrs	r3, r3, #24
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80016c0:	7afb      	ldrb	r3, [r7, #11]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	4413      	add	r3, r2
 80016c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80016d6:	7afb      	ldrb	r3, [r7, #11]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	4413      	add	r3, r2
 80016de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0c1b      	lsrs	r3, r3, #16
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	0e1b      	lsrs	r3, r3, #24
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001702:	7afb      	ldrb	r3, [r7, #11]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d106      	bne.n	8001716 <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f043 0220 	orr.w	r2, r3, #32
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8001714:	e005      	b.n	8001722 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	f043 0220 	orr.w	r2, r3, #32
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	611a      	str	r2, [r3, #16]
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d106      	bne.n	800174e <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f043 0220 	orr.w	r2, r3, #32
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 800174c:	e005      	b.n	800175a <CAN_FIFORelease+0x2c>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f043 0220 	orr.w	r2, r3, #32
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8001766:	b480      	push	{r7}
 8001768:	b085      	sub	sp, #20
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d106      	bne.n	800178a <CAN_MessagePending+0x24>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e00b      	b.n	80017a2 <CAN_MessagePending+0x3c>
  }
  else if (FIFONumber == CAN_FIFO1)
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d106      	bne.n	800179e <CAN_MessagePending+0x38>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e001      	b.n	80017a2 <CAN_MessagePending+0x3c>
  }
  else
  {
    message_pending = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 80017c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d120      	bne.n	800180e <CAN_OperatingModeRequest+0x5e>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 0303 	bic.w	r3, r3, #3
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80017dc:	e002      	b.n	80017e4 <CAN_OperatingModeRequest+0x34>
    {
      timeout--;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d002      	beq.n	80017f6 <CAN_OperatingModeRequest+0x46>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f3      	bne.n	80017de <CAN_OperatingModeRequest+0x2e>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d002      	beq.n	8001808 <CAN_OperatingModeRequest+0x58>
    {
      status = CAN_ModeStatus_Failed;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	e04a      	b.n	800189e <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e047      	b.n	800189e <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d11e      	bne.n	8001852 <CAN_OperatingModeRequest+0xa2>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 0203 	bic.w	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8001820:	e002      	b.n	8001828 <CAN_OperatingModeRequest+0x78>
    {
      timeout--;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3b01      	subs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <CAN_OperatingModeRequest+0x8a>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f3      	bne.n	8001822 <CAN_OperatingModeRequest+0x72>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <CAN_OperatingModeRequest+0x9c>
    {
      status = CAN_ModeStatus_Failed;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e028      	b.n	800189e <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e025      	b.n	800189e <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d120      	bne.n	800189a <CAN_OperatingModeRequest+0xea>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 0303 	bic.w	r3, r3, #3
 8001860:	f043 0202 	orr.w	r2, r3, #2
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8001868:	e002      	b.n	8001870 <CAN_OperatingModeRequest+0xc0>
    {
      timeout--;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3b01      	subs	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d002      	beq.n	8001882 <CAN_OperatingModeRequest+0xd2>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f3      	bne.n	800186a <CAN_OperatingModeRequest+0xba>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d002      	beq.n	8001894 <CAN_OperatingModeRequest+0xe4>
    {
      status = CAN_ModeStatus_Failed;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e004      	b.n	800189e <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
 8001898:	e001      	b.n	800189e <CAN_OperatingModeRequest+0xee>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 800189a:	2300      	movs	r3, #0
 800189c:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 0303 	bic.w	r3, r3, #3
 80018c0:	f043 0202 	orr.w	r2, r3, #2
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d101      	bne.n	80018d8 <CAN_Sleep+0x2c>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 80018ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f2:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 80018f4:	2300      	movs	r3, #0
 80018f6:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 0202 	bic.w	r2, r3, #2
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8001904:	e002      	b.n	800190c <CAN_WakeUp+0x26>
  {
   wait_slak--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3b01      	subs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b02      	cmp	r3, #2
 8001916:	d102      	bne.n	800191e <CAN_WakeUp+0x38>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f3      	bne.n	8001906 <CAN_WakeUp+0x20>
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b02      	cmp	r3, #2
 8001928:	d001      	beq.n	800192e <CAN_WakeUp+0x48>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 800192a:	2301      	movs	r3, #1
 800192c:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 800192e:	7afb      	ldrb	r3, [r7, #11]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001952:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	0e1b      	lsrs	r3, r3, #24
 8001974:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	0c1b      	lsrs	r3, r3, #16
 8001996:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	4613      	mov	r3, r2
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 80019c6:	e006      	b.n	80019d6 <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	401a      	ands	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	615a      	str	r2, [r3, #20]
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00d      	beq.n	8001a16 <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	4013      	ands	r3, r2
 8001a02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	e048      	b.n	8001aa2 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	e045      	b.n	8001aa2 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00d      	beq.n	8001a3c <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4013      	ands	r3, r2
 8001a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e035      	b.n	8001aa2 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e032      	b.n	8001aa2 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00d      	beq.n	8001a62 <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	e022      	b.n	8001aa2 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e01f      	b.n	8001aa2 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00d      	beq.n	8001a88 <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4013      	ands	r3, r2
 8001a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e00f      	b.n	8001aa2 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	e00c      	b.n	8001aa2 <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e001      	b.n	8001aa2 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <CAN_ClearFlag+0x70>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d103      	bne.n	8001ace <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
 8001acc:	e021      	b.n	8001b12 <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad4:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	60da      	str	r2, [r3, #12]
}
 8001ae6:	e014      	b.n	8001b12 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	611a      	str	r2, [r3, #16]
}
 8001af8:	e00b      	b.n	8001b12 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	609a      	str	r2, [r3, #8]
}
 8001b0a:	e002      	b.n	8001b12 <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	605a      	str	r2, [r3, #4]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	30f00070 	.word	0x30f00070

08001b24 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80b2 	beq.w	8001ca4 <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d062      	beq.n	8001c0c <CAN_GetITStatus+0xe8>
 8001b46:	2b40      	cmp	r3, #64	; 0x40
 8001b48:	d80f      	bhi.n	8001b6a <CAN_GetITStatus+0x46>
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d03a      	beq.n	8001bc4 <CAN_GetITStatus+0xa0>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d804      	bhi.n	8001b5c <CAN_GetITStatus+0x38>
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d024      	beq.n	8001ba0 <CAN_GetITStatus+0x7c>
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d02b      	beq.n	8001bb2 <CAN_GetITStatus+0x8e>
 8001b5a:	e09f      	b.n	8001c9c <CAN_GetITStatus+0x178>
 8001b5c:	2b10      	cmp	r3, #16
 8001b5e:	d043      	beq.n	8001be8 <CAN_GetITStatus+0xc4>
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d04a      	beq.n	8001bfa <CAN_GetITStatus+0xd6>
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d036      	beq.n	8001bd6 <CAN_GetITStatus+0xb2>
 8001b68:	e098      	b.n	8001c9c <CAN_GetITStatus+0x178>
 8001b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b6e:	f000 8083 	beq.w	8001c78 <CAN_GetITStatus+0x154>
 8001b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b76:	d809      	bhi.n	8001b8c <CAN_GetITStatus+0x68>
 8001b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b7c:	d06a      	beq.n	8001c54 <CAN_GetITStatus+0x130>
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	d070      	beq.n	8001c66 <CAN_GetITStatus+0x142>
 8001b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b88:	d05b      	beq.n	8001c42 <CAN_GetITStatus+0x11e>
 8001b8a:	e087      	b.n	8001c9c <CAN_GetITStatus+0x178>
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b90:	d045      	beq.n	8001c1e <CAN_GetITStatus+0xfa>
 8001b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b96:	d04b      	beq.n	8001c30 <CAN_GetITStatus+0x10c>
 8001b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b9c:	d075      	beq.n	8001c8a <CAN_GetITStatus+0x166>
 8001b9e:	e07d      	b.n	8001c9c <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4943      	ldr	r1, [pc, #268]	; (8001cb4 <CAN_GetITStatus+0x190>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f8f6 	bl	8001d98 <CheckITStatus>
 8001bac:	4603      	mov	r3, r0
 8001bae:	73fb      	strb	r3, [r7, #15]
        break;
 8001bb0:	e07a      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2103      	movs	r1, #3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f8ed 	bl	8001d98 <CheckITStatus>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
        break;
 8001bc2:	e071      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2108      	movs	r1, #8
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f8e4 	bl	8001d98 <CheckITStatus>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	73fb      	strb	r3, [r7, #15]
        break;
 8001bd4:	e068      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2110      	movs	r1, #16
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f8db 	bl	8001d98 <CheckITStatus>
 8001be2:	4603      	mov	r3, r0
 8001be4:	73fb      	strb	r3, [r7, #15]
        break;
 8001be6:	e05f      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2103      	movs	r1, #3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f8d2 	bl	8001d98 <CheckITStatus>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
        break;
 8001bf8:	e056      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2108      	movs	r1, #8
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f8c9 	bl	8001d98 <CheckITStatus>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
        break;
 8001c0a:	e04d      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2110      	movs	r1, #16
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f8c0 	bl	8001d98 <CheckITStatus>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	73fb      	strb	r3, [r7, #15]
        break;
 8001c1c:	e044      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2108      	movs	r1, #8
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f8b7 	bl	8001d98 <CheckITStatus>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	73fb      	strb	r3, [r7, #15]
        break;
 8001c2e:	e03b      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2110      	movs	r1, #16
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f8ae 	bl	8001d98 <CheckITStatus>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
        break;
 8001c40:	e032      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2101      	movs	r1, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f8a5 	bl	8001d98 <CheckITStatus>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	73fb      	strb	r3, [r7, #15]
        break;
 8001c52:	e029      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f89c 	bl	8001d98 <CheckITStatus>
 8001c60:	4603      	mov	r3, r0
 8001c62:	73fb      	strb	r3, [r7, #15]
        break;
 8001c64:	e020      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f893 	bl	8001d98 <CheckITStatus>
 8001c72:	4603      	mov	r3, r0
 8001c74:	73fb      	strb	r3, [r7, #15]
        break;
 8001c76:	e017      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2170      	movs	r1, #112	; 0x70
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f88a 	bl	8001d98 <CheckITStatus>
 8001c84:	4603      	mov	r3, r0
 8001c86:	73fb      	strb	r3, [r7, #15]
        break;
 8001c88:	e00e      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f881 	bl	8001d98 <CheckITStatus>
 8001c96:	4603      	mov	r3, r0
 8001c98:	73fb      	strb	r3, [r7, #15]
        break;
 8001c9a:	e005      	b.n	8001ca8 <CAN_GetITStatus+0x184>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
        break;
 8001ca0:	bf00      	nop
 8001ca2:	e001      	b.n	8001ca8 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	00010101 	.word	0x00010101

08001cb8 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc8:	d043      	beq.n	8001d52 <CAN_ClearITPendingBit+0x9a>
 8001cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cce:	d80d      	bhi.n	8001cec <CAN_ClearITPendingBit+0x34>
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d02a      	beq.n	8001d2a <CAN_ClearITPendingBit+0x72>
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d804      	bhi.n	8001ce2 <CAN_ClearITPendingBit+0x2a>
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d01e      	beq.n	8001d1a <CAN_ClearITPendingBit+0x62>
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d020      	beq.n	8001d22 <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8001ce0:	e051      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d025      	beq.n	8001d32 <CAN_ClearITPendingBit+0x7a>
 8001ce6:	2b40      	cmp	r3, #64	; 0x40
 8001ce8:	d027      	beq.n	8001d3a <CAN_ClearITPendingBit+0x82>
       break;
 8001cea:	e04c      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8001cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf0:	d03b      	beq.n	8001d6a <CAN_ClearITPendingBit+0xb2>
 8001cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf6:	d806      	bhi.n	8001d06 <CAN_ClearITPendingBit+0x4e>
 8001cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cfc:	d02d      	beq.n	8001d5a <CAN_ClearITPendingBit+0xa2>
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d02:	d02e      	beq.n	8001d62 <CAN_ClearITPendingBit+0xaa>
       break;
 8001d04:	e03f      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8001d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0a:	d01a      	beq.n	8001d42 <CAN_ClearITPendingBit+0x8a>
 8001d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d10:	d01b      	beq.n	8001d4a <CAN_ClearITPendingBit+0x92>
 8001d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d16:	d02f      	beq.n	8001d78 <CAN_ClearITPendingBit+0xc0>
       break;
 8001d18:	e035      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <CAN_ClearITPendingBit+0xdc>)
 8001d1e:	609a      	str	r2, [r3, #8]
      break;
 8001d20:	e031      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->RF0R = CAN_RF0R_FULL0; 
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2208      	movs	r2, #8
 8001d26:	60da      	str	r2, [r3, #12]
      break;
 8001d28:	e02d      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	60da      	str	r2, [r3, #12]
      break;
 8001d30:	e029      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->RF1R = CAN_RF1R_FULL1;  
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2208      	movs	r2, #8
 8001d36:	611a      	str	r2, [r3, #16]
      break;
 8001d38:	e025      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	611a      	str	r2, [r3, #16]
      break;
 8001d40:	e021      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_WKUI;  
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2208      	movs	r2, #8
 8001d46:	605a      	str	r2, [r3, #4]
      break;
 8001d48:	e01d      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_SLAKI;   
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	605a      	str	r2, [r3, #4]
      break;
 8001d50:	e019      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2204      	movs	r2, #4
 8001d56:	605a      	str	r2, [r3, #4]
      break;
 8001d58:	e015      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI; 
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	605a      	str	r2, [r3, #4]
      break;
 8001d60:	e011      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI; 
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2204      	movs	r2, #4
 8001d66:	605a      	str	r2, [r3, #4]
       break;
 8001d68:	e00d      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->ESR = RESET; 
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2204      	movs	r2, #4
 8001d74:	605a      	str	r2, [r3, #4]
      break;
 8001d76:	e006      	b.n	8001d86 <CAN_ClearITPendingBit+0xce>
      CANx->ESR = RESET; 
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2204      	movs	r2, #4
 8001d82:	605a      	str	r2, [r3, #4]
       break;
 8001d84:	bf00      	nop
   }
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	00010101 	.word	0x00010101

08001d98 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e001      	b.n	8001dba <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <CRC_ResetDR+0x14>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	609a      	str	r2, [r3, #8]
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40023000 	.word	0x40023000

08001de0 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8001de8:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <CRC_CalcCRC+0x20>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
  
  return (CRC->DR);
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <CRC_CalcCRC+0x20>)
 8001df0:	681b      	ldr	r3, [r3, #0]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023000 	.word	0x40023000

08001e04 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e009      	b.n	8001e2c <CRC_CalcBlockCRC+0x28>
  {
    CRC->DR = pBuffer[index];
 8001e18:	490a      	ldr	r1, [pc, #40]	; (8001e44 <CRC_CalcBlockCRC+0x40>)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	600b      	str	r3, [r1, #0]
  for(index = 0; index < BufferLength; index++)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d3f1      	bcc.n	8001e18 <CRC_CalcBlockCRC+0x14>
  }
  return (CRC->DR);
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <CRC_CalcBlockCRC+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40023000 	.word	0x40023000

08001e48 <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <CRC_GetCRC+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023000 	.word	0x40023000

08001e60 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <CRC_SetIDRegister+0x1c>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	7113      	strb	r3, [r2, #4]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40023000 	.word	0x40023000

08001e80 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <CRC_GetIDRegister+0x14>)
 8001e86:	791b      	ldrb	r3, [r3, #4]
 8001e88:	b2db      	uxtb	r3, r3
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40023000 	.word	0x40023000

08001e98 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2010      	movs	r0, #16
 8001ea0:	f007 fb1e 	bl	80094e0 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2010      	movs	r0, #16
 8001ea8:	f007 fb1a 	bl	80094e0 <RCC_AHB2PeriphResetCmd>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8001eb8:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <CRYP_Init+0xa0>)
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <CRYP_Init+0xa0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ec2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001ec6:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8001ec8:	4921      	ldr	r1, [pc, #132]	; (8001f50 <CRYP_Init+0xa0>)
 8001eca:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <CRYP_Init+0xa0>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <CRYP_Init+0xa0>)
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <CRYP_Init+0xa0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ee0:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8001ee2:	491b      	ldr	r1, [pc, #108]	; (8001f50 <CRYP_Init+0xa0>)
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <CRYP_Init+0xa0>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d018      	beq.n	8001f2a <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d014      	beq.n	8001f2a <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d010      	beq.n	8001f2a <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8001f0c:	2b18      	cmp	r3, #24
 8001f0e:	d00c      	beq.n	8001f2a <CRYP_Init+0x7a>
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <CRYP_Init+0xa0>)
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <CRYP_Init+0xa0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f1a:	6013      	str	r3, [r2, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8001f1c:	490c      	ldr	r1, [pc, #48]	; (8001f50 <CRYP_Init+0xa0>)
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <CRYP_Init+0xa0>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <CRYP_Init+0xa0>)
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <CRYP_Init+0xa0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8001f36:	4906      	ldr	r1, [pc, #24]	; (8001f50 <CRYP_Init+0xa0>)
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <CRYP_Init+0xa0>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	50060000 	.word	0x50060000

08001f54 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	605a      	str	r2, [r3, #4]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8001f88:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <CRYP_KeyInit+0x54>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6213      	str	r3, [r2, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8001f90:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <CRYP_KeyInit+0x54>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	6253      	str	r3, [r2, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <CRYP_KeyInit+0x54>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	6293      	str	r3, [r2, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8001fa0:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <CRYP_KeyInit+0x54>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <CRYP_KeyInit+0x54>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8001fb0:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <CRYP_KeyInit+0x54>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	6353      	str	r3, [r2, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <CRYP_KeyInit+0x54>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	6393      	str	r3, [r2, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <CRYP_KeyInit+0x54>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	50060000 	.word	0x50060000

08001fd8 <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	61da      	str	r2, [r3, #28]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8002024:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <CRYP_IVInit+0x34>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6413      	str	r3, [r2, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 800202c:	4a08      	ldr	r2, [pc, #32]	; (8002050 <CRYP_IVInit+0x34>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	6453      	str	r3, [r2, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8002034:	4a06      	ldr	r2, [pc, #24]	; (8002050 <CRYP_IVInit+0x34>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	6493      	str	r3, [r2, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <CRYP_IVInit+0x34>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	50060000 	.word	0x50060000

08002054 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	60da      	str	r2, [r3, #12]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <CRYP_PhaseConfig>:
  *            @arg CRYP_Phase_Payload: Payload phase
  *            @arg CRYP_Phase_Final: Final phase 
  * @retval None
  */
void CRYP_PhaseConfig(uint32_t CRYP_Phase)
{ uint32_t tempcr = 0;
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_CRYP_PHASE(CRYP_Phase));

  /* Get the CR register */
  tempcr = CRYP->CR;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <CRYP_PhaseConfig+0x34>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
  
  /* Reset the phase configuration bits: GCMP_CCMPH */
  tempcr &= (uint32_t)(~CRYP_CR_GCM_CCMPH);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002098:	60fb      	str	r3, [r7, #12]
  /* Set the selected phase */
  tempcr |= (uint32_t)CRYP_Phase;
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Set the CR register */ 
  CRYP->CR = tempcr;    
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <CRYP_PhaseConfig+0x34>)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	50060000 	.word	0x50060000

080020b8 <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 80020bc:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <CRYP_FIFOFlush+0x1c>)
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <CRYP_FIFOFlush+0x1c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	50060000 	.word	0x50060000

080020d8 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <CRYP_Cmd+0x1e>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 80020e8:	4a09      	ldr	r2, [pc, #36]	; (8002110 <CRYP_Cmd+0x38>)
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <CRYP_Cmd+0x38>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f2:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
  }
}
 80020f4:	e005      	b.n	8002102 <CRYP_Cmd+0x2a>
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 80020f6:	4a06      	ldr	r2, [pc, #24]	; (8002110 <CRYP_Cmd+0x38>)
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <CRYP_Cmd+0x38>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002100:	6013      	str	r3, [r2, #0]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	50060000 	.word	0x50060000

08002114 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <CRYP_DataIn+0x1c>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6093      	str	r3, [r2, #8]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	50060000 	.word	0x50060000

08002134 <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <CRYP_DataOut+0x14>)
 800213a:	68db      	ldr	r3, [r3, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	50060000 	.word	0x50060000

0800214c <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 800215e:	2300      	movs	r3, #0
 8002160:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8002162:	4a5c      	ldr	r2, [pc, #368]	; (80022d4 <CRYP_SaveContext+0x188>)
 8002164:	4b5b      	ldr	r3, [pc, #364]	; (80022d4 <CRYP_SaveContext+0x188>)
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6113      	str	r3, [r2, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 800216e:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <CRYP_SaveContext+0x188>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <CRYP_SaveContext+0x34>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 800217a:	2311      	movs	r3, #17
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e001      	b.n	8002184 <CRYP_SaveContext+0x38>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8002180:	2315      	movs	r3, #21
 8002182:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <CRYP_SaveContext+0x188>)
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	4013      	ands	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
    timeout++;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3301      	adds	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800219a:	4293      	cmp	r3, r2
 800219c:	d002      	beq.n	80021a4 <CRYP_SaveContext+0x58>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d1ef      	bne.n	8002184 <CRYP_SaveContext+0x38>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 80021a4:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <CRYP_SaveContext+0x188>)
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d002      	beq.n	80021b6 <CRYP_SaveContext+0x6a>
  {
    status = ERROR;
 80021b0:	2300      	movs	r3, #0
 80021b2:	74fb      	strb	r3, [r7, #19]
 80021b4:	e087      	b.n	80022c6 <CRYP_SaveContext+0x17a>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 80021b6:	4a47      	ldr	r2, [pc, #284]	; (80022d4 <CRYP_SaveContext+0x188>)
 80021b8:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <CRYP_SaveContext+0x188>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f023 0302 	bic.w	r3, r3, #2
 80021c0:	6113      	str	r3, [r2, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 80021c2:	4a44      	ldr	r2, [pc, #272]	; (80022d4 <CRYP_SaveContext+0x188>)
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <CRYP_SaveContext+0x188>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021cc:	6013      	str	r3, [r2, #0]

    /* Save the current configuration (bit 19, bit[17:16] and bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_CurrentConfig  = CRYP->CR & (CRYP_CR_GCM_CCMPH |
 80021ce:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <CRYP_SaveContext+0x188>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <CRYP_SaveContext+0x18c>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
                                                      CRYP_CR_DATATYPE |
                                                      CRYP_CR_ALGOMODE |
                                                      CRYP_CR_ALGODIR);

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <CRYP_SaveContext+0x188>)
 80021dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 80021e2:	4b3c      	ldr	r3, [pc, #240]	; (80022d4 <CRYP_SaveContext+0x188>)
 80021e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <CRYP_SaveContext+0x188>)
 80021ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 80021f2:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <CRYP_SaveContext+0x188>)
 80021f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	631a      	str	r2, [r3, #48]	; 0x30

    /* Save the content of context swap registers */
    CRYP_ContextSave->CRYP_CSGCMCCMR[0] = CRYP->CSGCMCCM0R;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <CRYP_SaveContext+0x188>)
 800223c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	635a      	str	r2, [r3, #52]	; 0x34
    CRYP_ContextSave->CRYP_CSGCMCCMR[1] = CRYP->CSGCMCCM1R;
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <CRYP_SaveContext+0x188>)
 8002244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
    CRYP_ContextSave->CRYP_CSGCMCCMR[2] = CRYP->CSGCMCCM2R;
 800224a:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <CRYP_SaveContext+0x188>)
 800224c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	63da      	str	r2, [r3, #60]	; 0x3c
    CRYP_ContextSave->CRYP_CSGCMCCMR[3] = CRYP->CSGCMCCM3R;
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <CRYP_SaveContext+0x188>)
 8002254:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
    CRYP_ContextSave->CRYP_CSGCMCCMR[4] = CRYP->CSGCMCCM4R;
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <CRYP_SaveContext+0x188>)
 800225c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    CRYP_ContextSave->CRYP_CSGCMCCMR[5] = CRYP->CSGCMCCM5R;
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <CRYP_SaveContext+0x188>)
 8002264:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	649a      	str	r2, [r3, #72]	; 0x48
    CRYP_ContextSave->CRYP_CSGCMCCMR[6] = CRYP->CSGCMCCM6R;
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <CRYP_SaveContext+0x188>)
 800226c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	64da      	str	r2, [r3, #76]	; 0x4c
    CRYP_ContextSave->CRYP_CSGCMCCMR[7] = CRYP->CSGCMCCM7R;
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <CRYP_SaveContext+0x188>)
 8002274:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	651a      	str	r2, [r3, #80]	; 0x50
    
    CRYP_ContextSave->CRYP_CSGCMR[0] = CRYP->CSGCM0R;
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <CRYP_SaveContext+0x188>)
 800227c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
    CRYP_ContextSave->CRYP_CSGCMR[1] = CRYP->CSGCM1R;
 8002282:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <CRYP_SaveContext+0x188>)
 8002284:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	659a      	str	r2, [r3, #88]	; 0x58
    CRYP_ContextSave->CRYP_CSGCMR[2] = CRYP->CSGCM2R;
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <CRYP_SaveContext+0x188>)
 800228c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	65da      	str	r2, [r3, #92]	; 0x5c
    CRYP_ContextSave->CRYP_CSGCMR[3] = CRYP->CSGCM3R;
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <CRYP_SaveContext+0x188>)
 8002294:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	661a      	str	r2, [r3, #96]	; 0x60
    CRYP_ContextSave->CRYP_CSGCMR[4] = CRYP->CSGCM4R;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <CRYP_SaveContext+0x188>)
 800229c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	665a      	str	r2, [r3, #100]	; 0x64
    CRYP_ContextSave->CRYP_CSGCMR[5] = CRYP->CSGCM5R;
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <CRYP_SaveContext+0x188>)
 80022a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	669a      	str	r2, [r3, #104]	; 0x68
    CRYP_ContextSave->CRYP_CSGCMR[6] = CRYP->CSGCM6R;
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <CRYP_SaveContext+0x188>)
 80022b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	66da      	str	r2, [r3, #108]	; 0x6c
    CRYP_ContextSave->CRYP_CSGCMR[7] = CRYP->CSGCM7R;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <CRYP_SaveContext+0x188>)
 80022ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	671a      	str	r2, [r3, #112]	; 0x70
    
   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 80022c2:	2301      	movs	r3, #1
 80022c4:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	50060000 	.word	0x50060000
 80022d8:	000b03fc 	.word	0x000b03fc

080022dc <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_CurrentConfig;
 80022e4:	4a41      	ldr	r2, [pc, #260]	; (80023ec <CRYP_RestoreContext+0x110>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6013      	str	r3, [r2, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 80022ec:	4a3f      	ldr	r2, [pc, #252]	; (80023ec <CRYP_RestoreContext+0x110>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	6213      	str	r3, [r2, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 80022f4:	4a3d      	ldr	r2, [pc, #244]	; (80023ec <CRYP_RestoreContext+0x110>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	6253      	str	r3, [r2, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 80022fc:	4a3b      	ldr	r2, [pc, #236]	; (80023ec <CRYP_RestoreContext+0x110>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	6293      	str	r3, [r2, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8002304:	4a39      	ldr	r2, [pc, #228]	; (80023ec <CRYP_RestoreContext+0x110>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	62d3      	str	r3, [r2, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 800230c:	4a37      	ldr	r2, [pc, #220]	; (80023ec <CRYP_RestoreContext+0x110>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	6313      	str	r3, [r2, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 8002314:	4a35      	ldr	r2, [pc, #212]	; (80023ec <CRYP_RestoreContext+0x110>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	6353      	str	r3, [r2, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 800231c:	4a33      	ldr	r2, [pc, #204]	; (80023ec <CRYP_RestoreContext+0x110>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	6393      	str	r3, [r2, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 8002324:	4a31      	ldr	r2, [pc, #196]	; (80023ec <CRYP_RestoreContext+0x110>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 800232c:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <CRYP_RestoreContext+0x110>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 8002334:	4a2d      	ldr	r2, [pc, #180]	; (80023ec <CRYP_RestoreContext+0x110>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	6453      	str	r3, [r2, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 800233c:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <CRYP_RestoreContext+0x110>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	6493      	str	r3, [r2, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 8002344:	4a29      	ldr	r2, [pc, #164]	; (80023ec <CRYP_RestoreContext+0x110>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Restore the content of context swap registers */
  CRYP->CSGCMCCM0R = CRYP_ContextRestore->CRYP_CSGCMCCMR[0];
 800234c:	4a27      	ldr	r2, [pc, #156]	; (80023ec <CRYP_RestoreContext+0x110>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	6513      	str	r3, [r2, #80]	; 0x50
  CRYP->CSGCMCCM1R = CRYP_ContextRestore->CRYP_CSGCMCCMR[1];
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <CRYP_RestoreContext+0x110>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	6553      	str	r3, [r2, #84]	; 0x54
  CRYP->CSGCMCCM2R = CRYP_ContextRestore->CRYP_CSGCMCCMR[2];
 800235c:	4a23      	ldr	r2, [pc, #140]	; (80023ec <CRYP_RestoreContext+0x110>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	6593      	str	r3, [r2, #88]	; 0x58
  CRYP->CSGCMCCM3R = CRYP_ContextRestore->CRYP_CSGCMCCMR[3];
 8002364:	4a21      	ldr	r2, [pc, #132]	; (80023ec <CRYP_RestoreContext+0x110>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	65d3      	str	r3, [r2, #92]	; 0x5c
  CRYP->CSGCMCCM4R = CRYP_ContextRestore->CRYP_CSGCMCCMR[4];
 800236c:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <CRYP_RestoreContext+0x110>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	6613      	str	r3, [r2, #96]	; 0x60
  CRYP->CSGCMCCM5R = CRYP_ContextRestore->CRYP_CSGCMCCMR[5];
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <CRYP_RestoreContext+0x110>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237a:	6653      	str	r3, [r2, #100]	; 0x64
  CRYP->CSGCMCCM6R = CRYP_ContextRestore->CRYP_CSGCMCCMR[6];
 800237c:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <CRYP_RestoreContext+0x110>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	6693      	str	r3, [r2, #104]	; 0x68
  CRYP->CSGCMCCM7R = CRYP_ContextRestore->CRYP_CSGCMCCMR[7];
 8002384:	4a19      	ldr	r2, [pc, #100]	; (80023ec <CRYP_RestoreContext+0x110>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238a:	66d3      	str	r3, [r2, #108]	; 0x6c
  
  CRYP->CSGCM0R = CRYP_ContextRestore->CRYP_CSGCMR[0];
 800238c:	4a17      	ldr	r2, [pc, #92]	; (80023ec <CRYP_RestoreContext+0x110>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
  CRYP->CSGCM1R = CRYP_ContextRestore->CRYP_CSGCMR[1];
 8002394:	4a15      	ldr	r2, [pc, #84]	; (80023ec <CRYP_RestoreContext+0x110>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	6753      	str	r3, [r2, #116]	; 0x74
  CRYP->CSGCM2R = CRYP_ContextRestore->CRYP_CSGCMR[2];
 800239c:	4a13      	ldr	r2, [pc, #76]	; (80023ec <CRYP_RestoreContext+0x110>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	6793      	str	r3, [r2, #120]	; 0x78
  CRYP->CSGCM3R = CRYP_ContextRestore->CRYP_CSGCMR[3];
 80023a4:	4a11      	ldr	r2, [pc, #68]	; (80023ec <CRYP_RestoreContext+0x110>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	67d3      	str	r3, [r2, #124]	; 0x7c
  CRYP->CSGCM4R = CRYP_ContextRestore->CRYP_CSGCMR[4];
 80023ac:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <CRYP_RestoreContext+0x110>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  CRYP->CSGCM5R = CRYP_ContextRestore->CRYP_CSGCMR[5];
 80023b6:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <CRYP_RestoreContext+0x110>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  CRYP->CSGCM6R = CRYP_ContextRestore->CRYP_CSGCMR[6];
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <CRYP_RestoreContext+0x110>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  CRYP->CSGCM7R = CRYP_ContextRestore->CRYP_CSGCMR[7];
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <CRYP_RestoreContext+0x110>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80023d4:	4a05      	ldr	r2, [pc, #20]	; (80023ec <CRYP_RestoreContext+0x110>)
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <CRYP_RestoreContext+0x110>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	50060000 	.word	0x50060000

080023f0 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	460a      	mov	r2, r1
 80023fa:	71fb      	strb	r3, [r7, #7]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002400:	79bb      	ldrb	r3, [r7, #6]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <CRYP_DMACmd+0x24>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8002406:	490a      	ldr	r1, [pc, #40]	; (8002430 <CRYP_DMACmd+0x40>)
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <CRYP_DMACmd+0x40>)
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	4313      	orrs	r3, r2
 8002410:	610b      	str	r3, [r1, #16]
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
  }
}
 8002412:	e007      	b.n	8002424 <CRYP_DMACmd+0x34>
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 8002414:	4906      	ldr	r1, [pc, #24]	; (8002430 <CRYP_DMACmd+0x40>)
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <CRYP_DMACmd+0x40>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	79fa      	ldrb	r2, [r7, #7]
 800241c:	43d2      	mvns	r2, r2
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	4013      	ands	r3, r2
 8002422:	610b      	str	r3, [r1, #16]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	50060000 	.word	0x50060000

08002434 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	460a      	mov	r2, r1
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	4613      	mov	r3, r2
 8002442:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002444:	79bb      	ldrb	r3, [r7, #6]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <CRYP_ITConfig+0x24>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 800244a:	490a      	ldr	r1, [pc, #40]	; (8002474 <CRYP_ITConfig+0x40>)
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <CRYP_ITConfig+0x40>)
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	4313      	orrs	r3, r2
 8002454:	614b      	str	r3, [r1, #20]
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
  }
}
 8002456:	e007      	b.n	8002468 <CRYP_ITConfig+0x34>
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 8002458:	4906      	ldr	r1, [pc, #24]	; (8002474 <CRYP_ITConfig+0x40>)
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <CRYP_ITConfig+0x40>)
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	43d2      	mvns	r2, r2
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	4013      	ands	r3, r2
 8002466:	614b      	str	r3, [r1, #20]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	50060000 	.word	0x50060000

08002478 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <CRYP_GetITStatus+0x34>)
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <CRYP_GetITStatus+0x20>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	e001      	b.n	800249c <CRYP_GetITStatus+0x24>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	50060000 	.word	0x50060000

080024b0 <CRYP_GetCmdStatus>:
  * @brief  Returns whether CRYP peripheral is enabled or disabled.
  * @param  none.
  * @retval Current state of the CRYP peripheral (ENABLE or DISABLE).
  */
FunctionalState CRYP_GetCmdStatus(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
  FunctionalState state = DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	71fb      	strb	r3, [r7, #7]

  if ((CRYP->CR & CRYP_CR_CRYPEN) != 0)
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <CRYP_GetCmdStatus+0x30>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <CRYP_GetCmdStatus+0x1c>
  {
    /* CRYPEN bit is set */
    state = ENABLE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	71fb      	strb	r3, [r7, #7]
 80024ca:	e001      	b.n	80024d0 <CRYP_GetCmdStatus+0x20>
  }
  else
  {
    /* CRYPEN bit is reset */
    state = DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	71fb      	strb	r3, [r7, #7]
  }
  return state;
 80024d0:	79fb      	ldrb	r3, [r7, #7]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	50060000 	.word	0x50060000

080024e4 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <CRYP_GetFlagStatus+0x24>
  {
    tempreg = CRYP->RISR;
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <CRYP_GetFlagStatus+0x4c>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	e002      	b.n	800250e <CRYP_GetFlagStatus+0x2a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <CRYP_GetFlagStatus+0x4c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 800250e:	79fa      	ldrb	r2, [r7, #7]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <CRYP_GetFlagStatus+0x3a>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e001      	b.n	8002522 <CRYP_GetFlagStatus+0x3e>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	50060000 	.word	0x50060000

08002534 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b0ab      	sub	sp, #172	; 0xac
 8002538:	af00      	add	r7, sp, #0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	4613      	mov	r3, r2
 8002544:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 8002562:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t i = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002570:	f107 0318 	add.w	r3, r7, #24
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fd2f 	bl	8001fd8 <CRYP_KeyStructInit>

  switch(Keysize)
 800257a:	89bb      	ldrh	r3, [r7, #12]
 800257c:	2bc0      	cmp	r3, #192	; 0xc0
 800257e:	d03b      	beq.n	80025f8 <CRYP_AES_ECB+0xc4>
 8002580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002584:	d07f      	beq.n	8002686 <CRYP_AES_ECB+0x152>
 8002586:	2b80      	cmp	r3, #128	; 0x80
 8002588:	d000      	beq.n	800258c <CRYP_AES_ECB+0x58>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 800258a:	e0db      	b.n	8002744 <CRYP_AES_ECB+0x210>
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 800258c:	2300      	movs	r3, #0
 800258e:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002590:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  \return               Reversed value
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 800259a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259e:	ba1b      	rev	r3, r3
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80025a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025a6:	3304      	adds	r3, #4
 80025a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80025ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ba:	ba1b      	rev	r3, r3
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80025be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025c2:	3304      	adds	r3, #4
 80025c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80025c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025d6:	ba1b      	rev	r3, r3
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80025da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025de:	3304      	adds	r3, #4
 80025e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80025e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80025ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f2:	ba1b      	rev	r3, r3
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80025f6:	e0a5      	b.n	8002744 <CRYP_AES_ECB+0x210>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80025f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025fc:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80025fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	66bb      	str	r3, [r7, #104]	; 0x68
 8002606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002608:	ba1b      	rev	r3, r3
 800260a:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 800260c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002610:	3304      	adds	r3, #4
 8002612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800261e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002620:	ba1b      	rev	r3, r3
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8002624:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002628:	3304      	adds	r3, #4
 800262a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800262e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	673b      	str	r3, [r7, #112]	; 0x70
 8002636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002638:	ba1b      	rev	r3, r3
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800263c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002640:	3304      	adds	r3, #4
 8002642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002646:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	677b      	str	r3, [r7, #116]	; 0x74
 800264e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002650:	ba1b      	rev	r3, r3
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8002654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002658:	3304      	adds	r3, #4
 800265a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800265e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	67bb      	str	r3, [r7, #120]	; 0x78
 8002666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002668:	ba1b      	rev	r3, r3
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800266c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002670:	3304      	adds	r3, #4
 8002672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002676:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800267e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002680:	ba1b      	rev	r3, r3
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002684:	e05e      	b.n	8002744 <CRYP_AES_ECB+0x210>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8002686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800268a:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 800268c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	64bb      	str	r3, [r7, #72]	; 0x48
 8002694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002696:	ba1b      	rev	r3, r3
 8002698:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 800269a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800269e:	3304      	adds	r3, #4
 80026a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80026a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ae:	ba1b      	rev	r3, r3
 80026b0:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 80026b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026b6:	3304      	adds	r3, #4
 80026b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80026bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	653b      	str	r3, [r7, #80]	; 0x50
 80026c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c6:	ba1b      	rev	r3, r3
 80026c8:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 80026ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ce:	3304      	adds	r3, #4
 80026d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80026d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	657b      	str	r3, [r7, #84]	; 0x54
 80026dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026de:	ba1b      	rev	r3, r3
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80026e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026e6:	3304      	adds	r3, #4
 80026e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80026ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80026f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f6:	ba1b      	rev	r3, r3
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80026fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026fe:	3304      	adds	r3, #4
 8002700:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002704:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800270c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270e:	ba1b      	rev	r3, r3
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8002712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002716:	3304      	adds	r3, #4
 8002718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800271c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	663b      	str	r3, [r7, #96]	; 0x60
 8002724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002726:	ba1b      	rev	r3, r3
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800272a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800272e:	3304      	adds	r3, #4
 8002730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002734:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	667b      	str	r3, [r7, #100]	; 0x64
 800273c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800273e:	ba1b      	rev	r3, r3
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002742:	bf00      	nop
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d130      	bne.n	80027ac <CRYP_AES_ECB+0x278>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800274a:	f7ff fcb5 	bl	80020b8 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800274e:	2304      	movs	r3, #4
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8002752:	2338      	movs	r3, #56	; 0x38
 8002754:	63fb      	str	r3, [r7, #60]	; 0x3c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8002756:	2300      	movs	r3, #0
 8002758:	643b      	str	r3, [r7, #64]	; 0x40
    CRYP_Init(&AES_CRYP_InitStructure);
 800275a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fba6 	bl	8001eb0 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002764:	f107 0318 	add.w	r3, r7, #24
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fc09 	bl	8001f80 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800276e:	2001      	movs	r0, #1
 8002770:	f7ff fcb2 	bl	80020d8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002774:	2010      	movs	r0, #16
 8002776:	f7ff feb5 	bl	80024e4 <CRYP_GetFlagStatus>
 800277a:	4603      	mov	r3, r0
 800277c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	3301      	adds	r3, #1
 8002784:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d003      	beq.n	8002796 <CRYP_AES_ECB+0x262>
 800278e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ee      	bne.n	8002774 <CRYP_AES_ECB+0x240>

    if (busystatus != RESET)
 8002796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <CRYP_AES_ECB+0x272>
   {
       status = ERROR;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80027a4:	e009      	b.n	80027ba <CRYP_AES_ECB+0x286>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80027a6:	2304      	movs	r3, #4
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80027aa:	e006      	b.n	80027ba <CRYP_AES_ECB+0x286>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80027ac:	f107 0318 	add.w	r3, r7, #24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fbe5 	bl	8001f80 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80027b6:	2300      	movs	r3, #0
 80027b8:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 80027ba:	2320      	movs	r3, #32
 80027bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 80027c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fb72 	bl	8001eb0 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80027cc:	f7ff fc74 	bl	80020b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80027d0:	2001      	movs	r0, #1
 80027d2:	f7ff fc81 	bl	80020d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80027d6:	f7ff fe6b 	bl	80024b0 <CRYP_GetCmdStatus>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <CRYP_AES_ECB+0x2b0>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80027e0:	2300      	movs	r3, #0
 80027e2:	e08b      	b.n	80028fc <CRYP_AES_ECB+0x3c8>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027ea:	e077      	b.n	80028dc <CRYP_AES_ECB+0x3a8>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80027ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fc8e 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 80027f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027fc:	3304      	adds	r3, #4
 80027fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fc83 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 800280e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002812:	3304      	adds	r3, #4
 8002814:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002818:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fc78 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8002824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002828:	3304      	adds	r3, #4
 800282a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800282e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fc6d 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 800283a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800283e:	3304      	adds	r3, #4
 8002840:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002848:	2010      	movs	r0, #16
 800284a:	f7ff fe4b 	bl	80024e4 <CRYP_GetFlagStatus>
 800284e:	4603      	mov	r3, r0
 8002850:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3301      	adds	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002860:	d003      	beq.n	800286a <CRYP_AES_ECB+0x336>
 8002862:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1ee      	bne.n	8002848 <CRYP_AES_ECB+0x314>

    if (busystatus != RESET)
 800286a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <CRYP_AES_ECB+0x346>
   {
       status = ERROR;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002878:	e02b      	b.n	80028d2 <CRYP_AES_ECB+0x39e>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800287a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800287e:	f7ff fc59 	bl	8002134 <CRYP_DataOut>
 8002882:	4603      	mov	r3, r0
 8002884:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800288a:	3304      	adds	r3, #4
 800288c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002890:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8002894:	f7ff fc4e 	bl	8002134 <CRYP_DataOut>
 8002898:	4603      	mov	r3, r0
 800289a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800289c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028a0:	3304      	adds	r3, #4
 80028a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80028a6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80028aa:	f7ff fc43 	bl	8002134 <CRYP_DataOut>
 80028ae:	4603      	mov	r3, r0
 80028b0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80028b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028b6:	3304      	adds	r3, #4
 80028b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 80028bc:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80028c0:	f7ff fc38 	bl	8002134 <CRYP_DataOut>
 80028c4:	4603      	mov	r3, r0
 80028c6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80028c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028cc:	3304      	adds	r3, #4
 80028ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80028d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028d6:	3310      	adds	r3, #16
 80028d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80028e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d204      	bcs.n	80028f2 <CRYP_AES_ECB+0x3be>
 80028e8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f af7d 	bne.w	80027ec <CRYP_AES_ECB+0x2b8>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7ff fbf0 	bl	80020d8 <CRYP_Cmd>

  return status; 
 80028f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	37ac      	adds	r7, #172	; 0xac
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}

08002904 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b0b3      	sub	sp, #204	; 0xcc
 8002908:	af00      	add	r7, sp, #0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	461a      	mov	r2, r3
 8002910:	4603      	mov	r3, r0
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	4613      	mov	r3, r2
 8002916:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ErrorStatus status = SUCCESS;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t keyaddr    = (uint32_t)Key;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t inputaddr  = (uint32_t)Input;
 800292e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002932:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t outputaddr = (uint32_t)Output;
 8002936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t ivaddr = (uint32_t)InitVectors;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t i = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 800294a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fb42 	bl	8001fd8 <CRYP_KeyStructInit>

  switch(Keysize)
 8002954:	89bb      	ldrh	r3, [r7, #12]
 8002956:	2bc0      	cmp	r3, #192	; 0xc0
 8002958:	d03c      	beq.n	80029d4 <CRYP_AES_CBC+0xd0>
 800295a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295e:	f000 808c 	beq.w	8002a7a <CRYP_AES_CBC+0x176>
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d000      	beq.n	8002968 <CRYP_AES_CBC+0x64>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8002966:	e0e9      	b.n	8002b3c <CRYP_AES_CBC+0x238>
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8002968:	2300      	movs	r3, #0
 800296a:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800296c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002976:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800297a:	ba1b      	rev	r3, r3
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800297e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002982:	3304      	adds	r3, #4
 8002984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002996:	ba1b      	rev	r3, r3
 8002998:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800299a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800299e:	3304      	adds	r3, #4
 80029a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80029a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80029ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029b2:	ba1b      	rev	r3, r3
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80029b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029ba:	3304      	adds	r3, #4
 80029bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80029c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029ce:	ba1b      	rev	r3, r3
 80029d0:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80029d2:	e0b3      	b.n	8002b3c <CRYP_AES_CBC+0x238>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80029d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029d8:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80029da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e8:	ba1b      	rev	r3, r3
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80029ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029f0:	3304      	adds	r3, #4
 80029f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80029f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a04:	ba1b      	rev	r3, r3
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002a08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a20:	ba1b      	rev	r3, r3
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a28:	3304      	adds	r3, #4
 8002a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002a2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a3c:	ba1b      	rev	r3, r3
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002a40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a44:	3304      	adds	r3, #4
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002a4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a58:	ba1b      	rev	r3, r3
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002a5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a60:	3304      	adds	r3, #4
 8002a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002a66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a74:	ba1b      	rev	r3, r3
 8002a76:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002a78:	e060      	b.n	8002b3c <CRYP_AES_CBC+0x238>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8002a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a7e:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8002a80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	667b      	str	r3, [r7, #100]	; 0x64
 8002a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a8a:	ba1b      	rev	r3, r3
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8002a8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a92:	3304      	adds	r3, #4
 8002a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8002a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa2:	ba1b      	rev	r3, r3
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8002aa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002aaa:	3304      	adds	r3, #4
 8002aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8002ab0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aba:	ba1b      	rev	r3, r3
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8002abe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	673b      	str	r3, [r7, #112]	; 0x70
 8002ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad2:	ba1b      	rev	r3, r3
 8002ad4:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002ad6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ada:	3304      	adds	r3, #4
 8002adc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002ae0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	677b      	str	r3, [r7, #116]	; 0x74
 8002ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aea:	ba1b      	rev	r3, r3
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002aee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002af2:	3304      	adds	r3, #4
 8002af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002af8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b02:	ba1b      	rev	r3, r3
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002b06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b1a:	ba1b      	rev	r3, r3
 8002b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002b1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b22:	3304      	adds	r3, #4
 8002b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002b28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b36:	ba1b      	rev	r3, r3
 8002b38:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002b3a:	bf00      	nop
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8002b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	657b      	str	r3, [r7, #84]	; 0x54
 8002b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b46:	ba1b      	rev	r3, r3
 8002b48:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8002b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b4e:	3304      	adds	r3, #4
 8002b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8002b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b5e:	ba1b      	rev	r3, r3
 8002b60:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 8002b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b66:	3304      	adds	r3, #4
 8002b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8002b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b76:	ba1b      	rev	r3, r3
 8002b78:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 8002b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b7e:	3304      	adds	r3, #4
 8002b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8002b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b8e:	ba1b      	rev	r3, r3
 8002b90:	623b      	str	r3, [r7, #32]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d130      	bne.n	8002bfa <CRYP_AES_CBC+0x2f6>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8002b98:	f7ff fa8e 	bl	80020b8 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8002ba0:	2338      	movs	r3, #56	; 0x38
 8002ba2:	64bb      	str	r3, [r7, #72]	; 0x48
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	64fb      	str	r3, [r7, #76]	; 0x4c

    CRYP_Init(&AES_CRYP_InitStructure);
 8002ba8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff f97f 	bl	8001eb0 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff f9e2 	bl	8001f80 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7ff fa8b 	bl	80020d8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002bc2:	2010      	movs	r0, #16
 8002bc4:	f7ff fc8e 	bl	80024e4 <CRYP_GetFlagStatus>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d003      	beq.n	8002be4 <CRYP_AES_CBC+0x2e0>
 8002bdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ee      	bne.n	8002bc2 <CRYP_AES_CBC+0x2be>

    if (busystatus != RESET)
 8002be4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <CRYP_AES_CBC+0x2f0>
   {
       status = ERROR;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8002bf2:	e009      	b.n	8002c08 <CRYP_AES_CBC+0x304>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf8:	e006      	b.n	8002c08 <CRYP_AES_CBC+0x304>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f9be 	bl	8001f80 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8002c04:	2300      	movs	r3, #0
 8002c06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8002c08:	2328      	movs	r3, #40	; 0x28
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 8002c10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f94b 	bl	8001eb0 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f9fc 	bl	800201c <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8002c24:	f7ff fa48 	bl	80020b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f7ff fa55 	bl	80020d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8002c2e:	f7ff fc3f 	bl	80024b0 <CRYP_GetCmdStatus>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <CRYP_AES_CBC+0x338>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e08b      	b.n	8002d54 <CRYP_AES_CBC+0x450>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c42:	e077      	b.n	8002d34 <CRYP_AES_CBC+0x430>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fa62 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8002c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c54:	3304      	adds	r3, #4
 8002c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fa57 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8002c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fa4c 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8002c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c80:	3304      	adds	r3, #4
 8002c82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002c86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fa41 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8002c92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c96:	3304      	adds	r3, #4
 8002c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    /* Wait until the complete message has been processed */
    counter = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002ca0:	2010      	movs	r0, #16
 8002ca2:	f7ff fc1f 	bl	80024e4 <CRYP_GetFlagStatus>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb8:	d003      	beq.n	8002cc2 <CRYP_AES_CBC+0x3be>
 8002cba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ee      	bne.n	8002ca0 <CRYP_AES_CBC+0x39c>

    if (busystatus != RESET)
 8002cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <CRYP_AES_CBC+0x3ce>
   {
       status = ERROR;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8002cd0:	e02b      	b.n	8002d2a <CRYP_AES_CBC+0x426>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002cd2:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8002cd6:	f7ff fa2d 	bl	8002134 <CRYP_DataOut>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002ce8:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8002cec:	f7ff fa22 	bl	8002134 <CRYP_DataOut>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002cf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002cfe:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8002d02:	f7ff fa17 	bl	8002134 <CRYP_DataOut>
 8002d06:	4603      	mov	r3, r0
 8002d08:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002d0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d0e:	3304      	adds	r3, #4
 8002d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002d14:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8002d18:	f7ff fa0c 	bl	8002134 <CRYP_DataOut>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002d20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d24:	3304      	adds	r3, #4
 8002d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8002d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d2e:	3310      	adds	r3, #16
 8002d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d204      	bcs.n	8002d4a <CRYP_AES_CBC+0x446>
 8002d40:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f47f af7d 	bne.w	8002c44 <CRYP_AES_CBC+0x340>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7ff f9c4 	bl	80020d8 <CRYP_Cmd>

  return status;
 8002d50:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	37cc      	adds	r7, #204	; 0xcc
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}

08002d5c <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b0b3      	sub	sp, #204	; 0xcc
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	461a      	mov	r2, r3
 8002d68:	4603      	mov	r3, r0
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ErrorStatus status = SUCCESS;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t keyaddr    = (uint32_t)Key;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t inputaddr  = (uint32_t)Input;
 8002d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t outputaddr = (uint32_t)Output;
 8002d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t i = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f916 	bl	8001fd8 <CRYP_KeyStructInit>

  switch(Keysize)
 8002dac:	89bb      	ldrh	r3, [r7, #12]
 8002dae:	2bc0      	cmp	r3, #192	; 0xc0
 8002db0:	d03c      	beq.n	8002e2c <CRYP_AES_CTR+0xd0>
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db6:	f000 808c 	beq.w	8002ed2 <CRYP_AES_CTR+0x176>
 8002dba:	2b80      	cmp	r3, #128	; 0x80
 8002dbc:	d000      	beq.n	8002dc0 <CRYP_AES_CTR+0x64>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8002dbe:	e0e9      	b.n	8002f94 <CRYP_AES_CTR+0x238>
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002dc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dd2:	ba1b      	rev	r3, r3
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002dd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002dda:	3304      	adds	r3, #4
 8002ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002de0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dee:	ba1b      	rev	r3, r3
 8002df0:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002df2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002df6:	3304      	adds	r3, #4
 8002df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002dfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e0a:	ba1b      	rev	r3, r3
 8002e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002e0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e12:	3304      	adds	r3, #4
 8002e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e26:	ba1b      	rev	r3, r3
 8002e28:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002e2a:	e0b3      	b.n	8002f94 <CRYP_AES_CTR+0x238>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8002e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e30:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8002e32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e40:	ba1b      	rev	r3, r3
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8002e44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e48:	3304      	adds	r3, #4
 8002e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002e4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e5c:	ba1b      	rev	r3, r3
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002e60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e64:	3304      	adds	r3, #4
 8002e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002e6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e78:	ba1b      	rev	r3, r3
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002e7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e80:	3304      	adds	r3, #4
 8002e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002e86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e94:	ba1b      	rev	r3, r3
 8002e96:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002ea2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002eb0:	ba1b      	rev	r3, r3
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002eb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002eb8:	3304      	adds	r3, #4
 8002eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002ebe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ecc:	ba1b      	rev	r3, r3
 8002ece:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002ed0:	e060      	b.n	8002f94 <CRYP_AES_CTR+0x238>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8002ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed6:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8002ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	667b      	str	r3, [r7, #100]	; 0x64
 8002ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ee2:	ba1b      	rev	r3, r3
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8002ee6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002eea:	3304      	adds	r3, #4
 8002eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8002ef0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002efa:	ba1b      	rev	r3, r3
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8002efe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f02:	3304      	adds	r3, #4
 8002f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8002f08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f12:	ba1b      	rev	r3, r3
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8002f16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	673b      	str	r3, [r7, #112]	; 0x70
 8002f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f2a:	ba1b      	rev	r3, r3
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002f2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f32:	3304      	adds	r3, #4
 8002f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002f38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	677b      	str	r3, [r7, #116]	; 0x74
 8002f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f42:	ba1b      	rev	r3, r3
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002f46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5a:	ba1b      	rev	r3, r3
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002f5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f62:	3304      	adds	r3, #4
 8002f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f72:	ba1b      	rev	r3, r3
 8002f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002f76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002f80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f8e:	ba1b      	rev	r3, r3
 8002f90:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002f92:	bf00      	nop
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8002f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9e:	ba1b      	rev	r3, r3
 8002fa0:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8002fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8002fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb6:	ba1b      	rev	r3, r3
 8002fb8:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 8002fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8002fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fce:	ba1b      	rev	r3, r3
 8002fd0:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 8002fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8002fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fe6:	ba1b      	rev	r3, r3
 8002fe8:	623b      	str	r3, [r7, #32]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe ffc6 	bl	8001f80 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <CRYP_AES_CTR+0x2a4>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffe:	e001      	b.n	8003004 <CRYP_AES_CTR+0x2a8>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8003000:	2300      	movs	r3, #0
 8003002:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8003004:	2330      	movs	r3, #48	; 0x30
 8003006:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 800300c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe ff4d 	bl	8001eb0 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fffe 	bl	800201c <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8003020:	f7ff f84a 	bl	80020b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8003024:	2001      	movs	r0, #1
 8003026:	f7ff f857 	bl	80020d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800302a:	f7ff fa41 	bl	80024b0 <CRYP_GetCmdStatus>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <CRYP_AES_CTR+0x2dc>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8003034:	2300      	movs	r3, #0
 8003036:	e08b      	b.n	8003150 <CRYP_AES_CTR+0x3f4>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800303e:	e077      	b.n	8003130 <CRYP_AES_CTR+0x3d4>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff f864 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 800304c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003050:	3304      	adds	r3, #4
 8003052:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f859 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8003062:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003066:	3304      	adds	r3, #4
 8003068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800306c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f84e 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8003078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800307c:	3304      	adds	r3, #4
 800307e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003082:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f843 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 800308e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003092:	3304      	adds	r3, #4
 8003094:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    /* Wait until the complete message has been processed */
    counter = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800309c:	2010      	movs	r0, #16
 800309e:	f7ff fa21 	bl	80024e4 <CRYP_GetFlagStatus>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	3301      	adds	r3, #1
 80030ac:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d003      	beq.n	80030be <CRYP_AES_CTR+0x362>
 80030b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1ee      	bne.n	800309c <CRYP_AES_CTR+0x340>

    if (busystatus != RESET)
 80030be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <CRYP_AES_CTR+0x372>
   {
       status = ERROR;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80030cc:	e02b      	b.n	8003126 <CRYP_AES_CTR+0x3ca>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80030ce:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80030d2:	f7ff f82f 	bl	8002134 <CRYP_DataOut>
 80030d6:	4603      	mov	r3, r0
 80030d8:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80030da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030de:	3304      	adds	r3, #4
 80030e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80030e4:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80030e8:	f7ff f824 	bl	8002134 <CRYP_DataOut>
 80030ec:	4603      	mov	r3, r0
 80030ee:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80030f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030f4:	3304      	adds	r3, #4
 80030f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80030fa:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80030fe:	f7ff f819 	bl	8002134 <CRYP_DataOut>
 8003102:	4603      	mov	r3, r0
 8003104:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003106:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800310a:	3304      	adds	r3, #4
 800310c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003110:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8003114:	f7ff f80e 	bl	8002134 <CRYP_DataOut>
 8003118:	4603      	mov	r3, r0
 800311a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800311c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003120:	3304      	adds	r3, #4
 8003122:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8003126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800312a:	3310      	adds	r3, #16
 800312c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003130:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003138:	429a      	cmp	r2, r3
 800313a:	d204      	bcs.n	8003146 <CRYP_AES_CTR+0x3ea>
 800313c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8003140:	2b00      	cmp	r3, #0
 8003142:	f47f af7d 	bne.w	8003040 <CRYP_AES_CTR+0x2e4>
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8003146:	2000      	movs	r0, #0
 8003148:	f7fe ffc6 	bl	80020d8 <CRYP_Cmd>

  return status;
 800314c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 8003150:	4618      	mov	r0, r3
 8003152:	37cc      	adds	r7, #204	; 0xcc
 8003154:	46bd      	mov	sp, r7
 8003156:	bd90      	pop	{r4, r7, pc}

08003158 <CRYP_AES_GCM>:
ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength,
                         uint8_t *Output, uint8_t *AuthTAG)
{
 8003158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315c:	b0c5      	sub	sp, #276	; 0x114
 800315e:	af00      	add	r7, sp, #0
 8003160:	4604      	mov	r4, r0
 8003162:	f107 0010 	add.w	r0, r7, #16
 8003166:	6001      	str	r1, [r0, #0]
 8003168:	f107 010c 	add.w	r1, r7, #12
 800316c:	600a      	str	r2, [r1, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	4623      	mov	r3, r4
 8003172:	75fb      	strb	r3, [r7, #23]
 8003174:	4613      	mov	r3, r2
 8003176:	82bb      	strh	r3, [r7, #20]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t busystatus = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  ErrorStatus status = SUCCESS;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  uint32_t keyaddr    = (uint32_t)Key;
 8003188:	f107 030c 	add.w	r3, r7, #12
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint32_t inputaddr  = (uint32_t)Input;
 8003192:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003196:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t outputaddr = (uint32_t)Output;
 800319a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800319e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t ivaddr     = (uint32_t)InitVectors;
 80031a2:	f107 0310 	add.w	r3, r7, #16
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  uint32_t headeraddr = (uint32_t)Header;
 80031ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80031b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t tagaddr = (uint32_t)AuthTAG;
 80031b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint64_t headerlength = HLength * 8;/* header length in bits */
 80031bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	f04f 0400 	mov.w	r4, #0
 80031c6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
  uint64_t inputlength = ILength * 8;/* input length in bits */
 80031ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	f04f 0400 	mov.w	r4, #0
 80031d4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
  uint32_t loopcounter = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80031de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fef8 	bl	8001fd8 <CRYP_KeyStructInit>

  switch(Keysize)
 80031e8:	8abb      	ldrh	r3, [r7, #20]
 80031ea:	2bc0      	cmp	r3, #192	; 0xc0
 80031ec:	d03c      	beq.n	8003268 <CRYP_AES_GCM+0x110>
 80031ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f2:	f000 808c 	beq.w	800330e <CRYP_AES_GCM+0x1b6>
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d000      	beq.n	80031fc <CRYP_AES_GCM+0xa4>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 80031fa:	e0f7      	b.n	80033ec <CRYP_AES_GCM+0x294>
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80031fc:	2300      	movs	r3, #0
 80031fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800320a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800320e:	ba1b      	rev	r3, r3
 8003210:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	3304      	adds	r3, #4
 8003218:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800322a:	ba1b      	rev	r3, r3
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	3304      	adds	r3, #4
 8003234:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003242:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003246:	ba1b      	rev	r3, r3
 8003248:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324e:	3304      	adds	r3, #4
 8003250:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800325e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003262:	ba1b      	rev	r3, r3
 8003264:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8003266:	e0c1      	b.n	80033ec <CRYP_AES_GCM+0x294>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8003268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800326c:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800327c:	ba1b      	rev	r3, r3
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	3304      	adds	r3, #4
 8003286:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003298:	ba1b      	rev	r3, r3
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	3304      	adds	r3, #4
 80032a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032b4:	ba1b      	rev	r3, r3
 80032b6:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	3304      	adds	r3, #4
 80032be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032d0:	ba1b      	rev	r3, r3
 80032d2:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	3304      	adds	r3, #4
 80032da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032ec:	ba1b      	rev	r3, r3
 80032ee:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	3304      	adds	r3, #4
 80032f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003308:	ba1b      	rev	r3, r3
 800330a:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 800330c:	e06e      	b.n	80033ec <CRYP_AES_GCM+0x294>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800330e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003312:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800331e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003322:	ba1b      	rev	r3, r3
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332a:	3304      	adds	r3, #4
 800332c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800333a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800333e:	ba1b      	rev	r3, r3
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003346:	3304      	adds	r3, #4
 8003348:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003356:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800335a:	ba1b      	rev	r3, r3
 800335c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003362:	3304      	adds	r3, #4
 8003364:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003372:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003376:	ba1b      	rev	r3, r3
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	3304      	adds	r3, #4
 8003380:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800338e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003392:	ba1b      	rev	r3, r3
 8003394:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339a:	3304      	adds	r3, #4
 800339c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80033aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033ae:	ba1b      	rev	r3, r3
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b6:	3304      	adds	r3, #4
 80033b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033ca:	ba1b      	rev	r3, r3
 80033cc:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	3304      	adds	r3, #4
 80033d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033e6:	ba1b      	rev	r3, r3
 80033e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 80033ea:	bf00      	nop
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80033ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033fa:	ba1b      	rev	r3, r3
 80033fc:	623b      	str	r3, [r7, #32]
  ivaddr+=4;
 80033fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003402:	3304      	adds	r3, #4
 8003404:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8003408:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003412:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003416:	ba1b      	rev	r3, r3
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
  ivaddr+=4;
 800341a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800341e:	3304      	adds	r3, #4
 8003420:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8003424:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800342e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003432:	ba1b      	rev	r3, r3
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
  ivaddr+=4;
 8003436:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800343a:	3304      	adds	r3, #4
 800343c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8003440:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800344a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800344e:	ba1b      	rev	r3, r3
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	2b01      	cmp	r3, #1
 8003456:	f040 81a9 	bne.w	80037ac <CRYP_AES_GCM+0x654>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800345a:	f7fe fe2d 	bl	80020b8 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800345e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe fd8c 	bl	8001f80 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8003468:	f107 0320 	add.w	r3, r7, #32
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe fdd5 	bl	800201c <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8003472:	2300      	movs	r3, #0
 8003474:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 8003476:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800347a:	657b      	str	r3, [r7, #84]	; 0x54
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	65bb      	str	r3, [r7, #88]	; 0x58
    CRYP_Init(&AES_CRYP_InitStructure);
 8003480:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fd13 	bl	8001eb0 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 800348a:	2000      	movs	r0, #0
 800348c:	f7fe fdf8 	bl	8002080 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8003490:	2001      	movs	r0, #1
 8003492:	f7fe fe21 	bl	80020d8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8003496:	bf00      	nop
 8003498:	f7ff f80a 	bl	80024b0 <CRYP_GetCmdStatus>
 800349c:	4603      	mov	r3, r0
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d0fa      	beq.n	8003498 <CRYP_AES_GCM+0x340>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 80034a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d069      	beq.n	800357e <CRYP_AES_GCM+0x426>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 80034aa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80034ae:	f7fe fde7 	bl	8002080 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 80034b2:	2001      	movs	r0, #1
 80034b4:	f7fe fe10 	bl	80020d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 80034b8:	f7fe fffa 	bl	80024b0 <CRYP_GetCmdStatus>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <CRYP_AES_GCM+0x36e>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 80034c2:	2300      	movs	r3, #0
 80034c4:	e31d      	b.n	8003b02 <CRYP_AES_GCM+0x9aa>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 80034c6:	2300      	movs	r3, #0
 80034c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80034cc:	e037      	b.n	800353e <CRYP_AES_GCM+0x3e6>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 80034ce:	bf00      	nop
 80034d0:	2001      	movs	r0, #1
 80034d2:	f7ff f807 	bl	80024e4 <CRYP_GetFlagStatus>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f9      	beq.n	80034d0 <CRYP_AES_GCM+0x378>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80034dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fe16 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 80034e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80034ec:	3304      	adds	r3, #4
 80034ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80034f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe fe0b 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 80034fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003502:	3304      	adds	r3, #4
 8003504:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8003508:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fe00 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 8003514:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003518:	3304      	adds	r3, #4
 800351a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800351e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe fdf5 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 800352a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800352e:	3304      	adds	r3, #4
 8003530:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8003534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003538:	3310      	adds	r3, #16
 800353a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800353e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003542:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003546:	429a      	cmp	r2, r3
 8003548:	d3c1      	bcc.n	80034ce <CRYP_AES_GCM+0x376>
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800354e:	2010      	movs	r0, #16
 8003550:	f7fe ffc8 	bl	80024e4 <CRYP_GetFlagStatus>
 8003554:	4603      	mov	r3, r0
 8003556:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        counter++;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3301      	adds	r3, #1
 800355e:	61fb      	str	r3, [r7, #28]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003566:	d003      	beq.n	8003570 <CRYP_AES_GCM+0x418>
 8003568:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ee      	bne.n	800354e <CRYP_AES_GCM+0x3f6>

      if (busystatus != RESET)
 8003570:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <CRYP_AES_GCM+0x426>
      {
        status = ERROR;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 800357e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80a3 	beq.w	80036ce <CRYP_AES_GCM+0x576>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8003588:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800358c:	f7fe fd78 	bl	8002080 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8003590:	2001      	movs	r0, #1
 8003592:	f7fe fda1 	bl	80020d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8003596:	f7fe ff8b 	bl	80024b0 <CRYP_GetCmdStatus>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <CRYP_AES_GCM+0x44c>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 80035a0:	2300      	movs	r3, #0
 80035a2:	e2ae      	b.n	8003b02 <CRYP_AES_GCM+0x9aa>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80035aa:	e085      	b.n	80036b8 <CRYP_AES_GCM+0x560>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 80035ac:	bf00      	nop
 80035ae:	2001      	movs	r0, #1
 80035b0:	f7fe ff98 	bl	80024e4 <CRYP_GetFlagStatus>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f9      	beq.n	80035ae <CRYP_AES_GCM+0x456>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80035ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe fda7 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 80035c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035ca:	3304      	adds	r3, #4
 80035cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80035d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fd9c 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 80035dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035e0:	3304      	adds	r3, #4
 80035e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80035e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fd91 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 80035f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035f6:	3304      	adds	r3, #4
 80035f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80035fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fd86 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 8003608:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800360c:	3304      	adds	r3, #4
 800360e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003616:	2010      	movs	r0, #16
 8003618:	f7fe ff64 	bl	80024e4 <CRYP_GetFlagStatus>
 800361c:	4603      	mov	r3, r0
 800361e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          counter++;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d003      	beq.n	8003638 <CRYP_AES_GCM+0x4e0>
 8003630:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ee      	bne.n	8003616 <CRYP_AES_GCM+0x4be>

        if (busystatus != RESET)
 8003638:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <CRYP_AES_GCM+0x4f0>
        {
          status = ERROR;
 8003640:	2300      	movs	r3, #0
 8003642:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003646:	e032      	b.n	80036ae <CRYP_AES_GCM+0x556>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8003648:	bf00      	nop
 800364a:	2004      	movs	r0, #4
 800364c:	f7fe ff4a 	bl	80024e4 <CRYP_GetFlagStatus>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f9      	beq.n	800364a <CRYP_AES_GCM+0x4f2>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003656:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800365a:	f7fe fd6b 	bl	8002134 <CRYP_DataOut>
 800365e:	4603      	mov	r3, r0
 8003660:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8003662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003666:	3304      	adds	r3, #4
 8003668:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800366c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8003670:	f7fe fd60 	bl	8002134 <CRYP_DataOut>
 8003674:	4603      	mov	r3, r0
 8003676:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8003678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800367c:	3304      	adds	r3, #4
 800367e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003682:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8003686:	f7fe fd55 	bl	8002134 <CRYP_DataOut>
 800368a:	4603      	mov	r3, r0
 800368c:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800368e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003692:	3304      	adds	r3, #4
 8003694:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003698:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800369c:	f7fe fd4a 	bl	8002134 <CRYP_DataOut>
 80036a0:	4603      	mov	r3, r0
 80036a2:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80036a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036a8:	3304      	adds	r3, #4
 80036aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 80036ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b2:	3310      	adds	r3, #16
 80036b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036b8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80036bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d204      	bcs.n	80036ce <CRYP_AES_GCM+0x576>
 80036c4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f47f af6f 	bne.w	80035ac <CRYP_AES_GCM+0x454>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 80036ce:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80036d2:	f7fe fcd5 	bl	8002080 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f7fe fcfe 	bl	80020d8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 80036dc:	f7fe fee8 	bl	80024b0 <CRYP_GetCmdStatus>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <CRYP_AES_GCM+0x592>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 80036e6:	2300      	movs	r3, #0
 80036e8:	e20b      	b.n	8003b02 <CRYP_AES_GCM+0x9aa>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 80036ea:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80036ee:	0023      	movs	r3, r4
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	673b      	str	r3, [r7, #112]	; 0x70
 80036fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036fc:	ba1b      	rev	r3, r3
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fd08 	bl	8002114 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003708:	677b      	str	r3, [r7, #116]	; 0x74
 800370a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800370c:	ba1b      	rev	r3, r3
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fd00 	bl	8002114 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 8003714:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8003718:	46a2      	mov	sl, r4
 800371a:	f04f 0b00 	mov.w	fp, #0
 800371e:	4653      	mov	r3, sl
 8003720:	67bb      	str	r3, [r7, #120]	; 0x78
 8003722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003724:	ba1b      	rev	r3, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fcf4 	bl	8002114 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 800372c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003730:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003734:	ba1b      	rev	r3, r3
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe fcec 	bl	8002114 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 800373c:	bf00      	nop
 800373e:	2004      	movs	r0, #4
 8003740:	f7fe fed0 	bl	80024e4 <CRYP_GetFlagStatus>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f9      	beq.n	800373e <CRYP_AES_GCM+0x5e6>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 800374a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800374e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003752:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8003756:	f7fe fced 	bl	8002134 <CRYP_DataOut>
 800375a:	4603      	mov	r3, r0
 800375c:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800375e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003762:	3304      	adds	r3, #4
 8003764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003768:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800376c:	f7fe fce2 	bl	8002134 <CRYP_DataOut>
 8003770:	4603      	mov	r3, r0
 8003772:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003774:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003778:	3304      	adds	r3, #4
 800377a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800377e:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8003782:	f7fe fcd7 	bl	8002134 <CRYP_DataOut>
 8003786:	4603      	mov	r3, r0
 8003788:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800378a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800378e:	3304      	adds	r3, #4
 8003790:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003794:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8003798:	f7fe fccc 	bl	8002134 <CRYP_DataOut>
 800379c:	4603      	mov	r3, r0
 800379e:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 80037a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80037a4:	3304      	adds	r3, #4
 80037a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80037aa:	e1a5      	b.n	8003af8 <CRYP_AES_GCM+0x9a0>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80037ac:	f7fe fc84 	bl	80020b8 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80037b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fbe3 	bl	8001f80 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80037ba:	f107 0320 	add.w	r3, r7, #32
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fc2c 	bl	800201c <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80037c4:	2304      	movs	r3, #4
 80037c6:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 80037c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037cc:	657b      	str	r3, [r7, #84]	; 0x54
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	65bb      	str	r3, [r7, #88]	; 0x58
    CRYP_Init(&AES_CRYP_InitStructure);
 80037d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fb6a 	bl	8001eb0 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 80037dc:	2000      	movs	r0, #0
 80037de:	f7fe fc4f 	bl	8002080 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80037e2:	2001      	movs	r0, #1
 80037e4:	f7fe fc78 	bl	80020d8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE);
 80037e8:	bf00      	nop
 80037ea:	f7fe fe61 	bl	80024b0 <CRYP_GetCmdStatus>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d0fa      	beq.n	80037ea <CRYP_AES_GCM+0x692>
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 80037f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d069      	beq.n	80038d0 <CRYP_AES_GCM+0x778>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 80037fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003800:	f7fe fc3e 	bl	8002080 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8003804:	2001      	movs	r0, #1
 8003806:	f7fe fc67 	bl	80020d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 800380a:	f7fe fe51 	bl	80024b0 <CRYP_GetCmdStatus>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <CRYP_AES_GCM+0x6c0>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8003814:	2300      	movs	r3, #0
 8003816:	e174      	b.n	8003b02 <CRYP_AES_GCM+0x9aa>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8003818:	2300      	movs	r3, #0
 800381a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800381e:	e037      	b.n	8003890 <CRYP_AES_GCM+0x738>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 8003820:	bf00      	nop
 8003822:	2001      	movs	r0, #1
 8003824:	f7fe fe5e 	bl	80024e4 <CRYP_GetFlagStatus>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f9      	beq.n	8003822 <CRYP_AES_GCM+0x6ca>
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800382e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe fc6d 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 800383a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800383e:	3304      	adds	r3, #4
 8003840:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8003844:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fc62 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 8003850:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003854:	3304      	adds	r3, #4
 8003856:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800385a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fc57 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 8003866:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800386a:	3304      	adds	r3, #4
 800386c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8003870:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fc4c 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 800387c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003880:	3304      	adds	r3, #4
 8003882:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8003886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388a:	3310      	adds	r3, #16
 800388c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003890:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003894:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003898:	429a      	cmp	r2, r3
 800389a:	d3c1      	bcc.n	8003820 <CRYP_AES_GCM+0x6c8>
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80038a0:	2010      	movs	r0, #16
 80038a2:	f7fe fe1f 	bl	80024e4 <CRYP_GetFlagStatus>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        counter++;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	3301      	adds	r3, #1
 80038b0:	61fb      	str	r3, [r7, #28]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b8:	d003      	beq.n	80038c2 <CRYP_AES_GCM+0x76a>
 80038ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ee      	bne.n	80038a0 <CRYP_AES_GCM+0x748>

      if (busystatus != RESET)
 80038c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <CRYP_AES_GCM+0x778>
      {
        status = ERROR;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 80038d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80a3 	beq.w	8003a20 <CRYP_AES_GCM+0x8c8>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 80038da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80038de:	f7fe fbcf 	bl	8002080 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 80038e2:	2001      	movs	r0, #1
 80038e4:	f7fe fbf8 	bl	80020d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 80038e8:	f7fe fde2 	bl	80024b0 <CRYP_GetCmdStatus>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <CRYP_AES_GCM+0x79e>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 80038f2:	2300      	movs	r3, #0
 80038f4:	e105      	b.n	8003b02 <CRYP_AES_GCM+0x9aa>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038fc:	e085      	b.n	8003a0a <CRYP_AES_GCM+0x8b2>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 80038fe:	bf00      	nop
 8003900:	2001      	movs	r0, #1
 8003902:	f7fe fdef 	bl	80024e4 <CRYP_GetFlagStatus>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f9      	beq.n	8003900 <CRYP_AES_GCM+0x7a8>
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800390c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fbfe 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 8003918:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800391c:	3304      	adds	r3, #4
 800391e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003922:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fbf3 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 800392e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003932:	3304      	adds	r3, #4
 8003934:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003938:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fbe8 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 8003944:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003948:	3304      	adds	r3, #4
 800394a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800394e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe fbdd 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 800395a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800395e:	3304      	adds	r3, #4
 8003960:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003968:	2010      	movs	r0, #16
 800396a:	f7fe fdbb 	bl	80024e4 <CRYP_GetFlagStatus>
 800396e:	4603      	mov	r3, r0
 8003970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          counter++;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	3301      	adds	r3, #1
 8003978:	61fb      	str	r3, [r7, #28]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003980:	d003      	beq.n	800398a <CRYP_AES_GCM+0x832>
 8003982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ee      	bne.n	8003968 <CRYP_AES_GCM+0x810>

        if (busystatus != RESET)
 800398a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <CRYP_AES_GCM+0x842>
        {
          status = ERROR;
 8003992:	2300      	movs	r3, #0
 8003994:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003998:	e032      	b.n	8003a00 <CRYP_AES_GCM+0x8a8>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 800399a:	bf00      	nop
 800399c:	2004      	movs	r0, #4
 800399e:	f7fe fda1 	bl	80024e4 <CRYP_GetFlagStatus>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f9      	beq.n	800399c <CRYP_AES_GCM+0x844>
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80039a8:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80039ac:	f7fe fbc2 	bl	8002134 <CRYP_DataOut>
 80039b0:	4603      	mov	r3, r0
 80039b2:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80039b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039b8:	3304      	adds	r3, #4
 80039ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80039be:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80039c2:	f7fe fbb7 	bl	8002134 <CRYP_DataOut>
 80039c6:	4603      	mov	r3, r0
 80039c8:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80039ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ce:	3304      	adds	r3, #4
 80039d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80039d4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80039d8:	f7fe fbac 	bl	8002134 <CRYP_DataOut>
 80039dc:	4603      	mov	r3, r0
 80039de:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80039e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e4:	3304      	adds	r3, #4
 80039e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80039ea:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80039ee:	f7fe fba1 	bl	8002134 <CRYP_DataOut>
 80039f2:	4603      	mov	r3, r0
 80039f4:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80039f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039fa:	3304      	adds	r3, #4
 80039fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8003a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a04:	3310      	adds	r3, #16
 8003a06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a0a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003a0e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d204      	bcs.n	8003a20 <CRYP_AES_GCM+0x8c8>
 8003a16:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f47f af6f 	bne.w	80038fe <CRYP_AES_GCM+0x7a6>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8003a20:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003a24:	f7fe fb2c 	bl	8002080 <CRYP_PhaseConfig>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f7fe fb55 	bl	80020d8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8003a2e:	f7fe fd3f 	bl	80024b0 <CRYP_GetCmdStatus>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <CRYP_AES_GCM+0x8e4>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e062      	b.n	8003b02 <CRYP_AES_GCM+0x9aa>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 8003a3c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003a40:	46a0      	mov	r8, r4
 8003a42:	f04f 0900 	mov.w	r9, #0
 8003a46:	4643      	mov	r3, r8
 8003a48:	663b      	str	r3, [r7, #96]	; 0x60
 8003a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a4c:	ba1b      	rev	r3, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fb60 	bl	8002114 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 8003a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a58:	667b      	str	r3, [r7, #100]	; 0x64
 8003a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a5c:	ba1b      	rev	r3, r3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fb58 	bl	8002114 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 8003a64:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8003a68:	0025      	movs	r5, r4
 8003a6a:	2600      	movs	r6, #0
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a72:	ba1b      	rev	r3, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fb4d 	bl	8002114 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 8003a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	ba1b      	rev	r3, r3
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fb45 	bl	8002114 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 8003a8a:	bf00      	nop
 8003a8c:	2004      	movs	r0, #4
 8003a8e:	f7fe fd29 	bl	80024e4 <CRYP_GetFlagStatus>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f9      	beq.n	8003a8c <CRYP_AES_GCM+0x934>
    
    tagaddr = (uint32_t)AuthTAG;
 8003a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003aa0:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8003aa4:	f7fe fb46 	bl	8002134 <CRYP_DataOut>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003aac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003ab6:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8003aba:	f7fe fb3b 	bl	8002134 <CRYP_DataOut>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003ac2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003acc:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8003ad0:	f7fe fb30 	bl	8002134 <CRYP_DataOut>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003ad8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003adc:	3304      	adds	r3, #4
 8003ade:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003ae2:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8003ae6:	f7fe fb25 	bl	8002134 <CRYP_DataOut>
 8003aea:	4603      	mov	r3, r0
 8003aec:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003aee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003af2:	3304      	adds	r3, #4
 8003af4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8003af8:	2000      	movs	r0, #0
 8003afa:	f7fe faed 	bl	80020d8 <CRYP_Cmd>

  return status;
 8003afe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003b0e <CRYP_AES_CCM>:
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
                         uint8_t *Output,
                         uint8_t *AuthTAG, uint32_t TAGSize)
{
 8003b0e:	b590      	push	{r4, r7, lr}
 8003b10:	b0c5      	sub	sp, #276	; 0x114
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4604      	mov	r4, r0
 8003b16:	f107 0008 	add.w	r0, r7, #8
 8003b1a:	6001      	str	r1, [r0, #0]
 8003b1c:	1d39      	adds	r1, r7, #4
 8003b1e:	600a      	str	r2, [r1, #0]
 8003b20:	463a      	mov	r2, r7
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	f107 030f 	add.w	r3, r7, #15
 8003b28:	4622      	mov	r2, r4
 8003b2a:	701a      	strb	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t busystatus = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  ErrorStatus status = SUCCESS;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  uint32_t keyaddr    = (uint32_t)Key;
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint32_t inputaddr  = (uint32_t)Input;
 8003b44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003b48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t outputaddr = (uint32_t)Output;
 8003b4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003b50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t headeraddr = (uint32_t)Header;
 8003b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t tagaddr = (uint32_t)AuthTAG;
 8003b5c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003b60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  uint32_t headersize = HLength;
 8003b64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t loopcounter = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  uint32_t bufferidx = 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint8_t blockb0[16] = {0};/* Block B0 */
 8003b78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
  uint8_t ctr[16] = {0}; /* Counter */
 8003b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	60da      	str	r2, [r3, #12]
  uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
  uint32_t ctraddr = (uint32_t)ctr;
 8003ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t b0addr = (uint32_t)blockb0;
 8003baa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  
  /************************ Formatting the header block ***********************/
  if(headersize != 0)
 8003bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80b1 	beq.w	8003d1e <CRYP_AES_CCM+0x210>
  {
    /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
    if(headersize < 65280)
 8003bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc0:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8003bc4:	d21e      	bcs.n	8003c04 <CRYP_AES_CCM+0xf6>
    {
      HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003bd0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003bda:	0a12      	lsrs	r2, r2, #8
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003bea:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003bee:	4413      	add	r3, r2
 8003bf0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]
      headersize += 2;
 8003bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c02:	e042      	b.n	8003c8a <CRYP_AES_CCM+0x17c>
    }
    else
    {
      /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
      HBuffer[bufferidx++] = 0xFF;
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003c0e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003c12:	4413      	add	r3, r2
 8003c14:	22ff      	movs	r2, #255	; 0xff
 8003c16:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = 0xFE;
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003c22:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003c26:	4413      	add	r3, r2
 8003c28:	22fe      	movs	r2, #254	; 0xfe
 8003c2a:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0xff000000;
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003c36:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003c3a:	4413      	add	r3, r2
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x00ff0000;
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003c4a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003c4e:	4413      	add	r3, r2
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003c5e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003c62:	4413      	add	r3, r2
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x000000ff;
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003c72:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003c76:	4413      	add	r3, r2
 8003c78:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
      headersize += 6;
 8003c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c84:	3306      	adds	r3, #6
 8003c86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c90:	e013      	b.n	8003cba <CRYP_AES_CCM+0x1ac>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003c9c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8003ca6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003caa:	440a      	add	r2, r1
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	701a      	strb	r2, [r3, #0]
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8003cb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cba:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d3e5      	bcc.n	8003c92 <CRYP_AES_CCM+0x184>
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
 8003cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d021      	beq.n	8003d16 <CRYP_AES_CCM+0x208>
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 8003cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cda:	e00b      	b.n	8003cf4 <CRYP_AES_CCM+0x1e6>
      {
        HBuffer[loopcounter] = 0;
 8003cdc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003ce0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ce4:	4413      	add	r3, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 8003cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf8:	f023 030f 	bic.w	r3, r3, #15
 8003cfc:	f103 0210 	add.w	r2, r3, #16
 8003d00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d2e9      	bcs.n	8003cdc <CRYP_AES_CCM+0x1ce>
      }
      /* Set the header size to modulo 16 */
      headersize = ((headersize/16) + 1) * 16;
 8003d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0c:	f023 030f 	bic.w	r3, r3, #15
 8003d10:	3310      	adds	r3, #16
 8003d12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
    /* set the pointer headeraddr to HBuffer */
    headeraddr = (uint32_t)HBuffer;
 8003d16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  }
  /************************* Formatting the block B0 **************************/
  if(headersize != 0)
 8003d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <CRYP_AES_CCM+0x21e>
  {
    blockb0[0] = 0x40;
 8003d26:	2340      	movs	r3, #64	; 0x40
 8003d28:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
 8003d2c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003d30:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	3b02      	subs	r3, #2
 8003d38:	0fd9      	lsrs	r1, r3, #31
 8003d3a:	440b      	add	r3, r1
 8003d3c:	105b      	asrs	r3, r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d48:	b2d9      	uxtb	r1, r3
 8003d4a:	1d3b      	adds	r3, r7, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f1c3 030e 	rsb	r3, r3, #14
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d6e:	e013      	b.n	8003d98 <CRYP_AES_CCM+0x28a>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
 8003d70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d74:	3301      	adds	r3, #1
 8003d76:	f107 0208 	add.w	r2, r7, #8
 8003d7a:	6811      	ldr	r1, [r2, #0]
 8003d7c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003d80:	440a      	add	r2, r1
 8003d82:	7812      	ldrb	r2, [r2, #0]
 8003d84:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003d88:	440b      	add	r3, r1
 8003d8a:	f803 2cdc 	strb.w	r2, [r3, #-220]
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 8003d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d92:	3301      	adds	r3, #1
 8003d94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d3e5      	bcc.n	8003d70 <CRYP_AES_CCM+0x262>
  }
  for ( ; loopcounter < 13; loopcounter++)
 8003da4:	e00d      	b.n	8003dc2 <CRYP_AES_CCM+0x2b4>
  {
    blockb0[loopcounter+1] = 0;
 8003da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003daa:	3301      	adds	r3, #1
 8003dac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003db0:	4413      	add	r3, r2
 8003db2:	2200      	movs	r2, #0
 8003db4:	f803 2cdc 	strb.w	r2, [r3, #-220]
  for ( ; loopcounter < 13; loopcounter++)
 8003db8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d9ed      	bls.n	8003da6 <CRYP_AES_CCM+0x298>
  }
  
  blockb0[14] = ((ILength >> 8) & 0xFF);
 8003dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  blockb0[15] = (ILength & 0xFF);
 8003dd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
     Bits 7 and 6 are reserved and shall be set to 0
     Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
 8003de0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 8003dee:	2301      	movs	r3, #1
 8003df0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003df4:	e011      	b.n	8003e1a <CRYP_AES_CCM+0x30c>
  {
    ctr[loopcounter] = blockb0[loopcounter];
 8003df6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dfe:	4413      	add	r3, r2
 8003e00:	7819      	ldrb	r1, [r3, #0]
 8003e02:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e0a:	4413      	add	r3, r2
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	701a      	strb	r2, [r3, #0]
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 8003e10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e14:	3301      	adds	r3, #1
 8003e16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d8e6      	bhi.n	8003df6 <CRYP_AES_CCM+0x2e8>
  }
  /* Set the LSB to 1 */
  ctr[15] |= 0x01;
 8003e28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  
  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8003e36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe f8cc 	bl	8001fd8 <CRYP_KeyStructInit>
  
  switch(Keysize)
 8003e40:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 8003e44:	2bc0      	cmp	r3, #192	; 0xc0
 8003e46:	d03d      	beq.n	8003ec4 <CRYP_AES_CCM+0x3b6>
 8003e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4c:	f000 808e 	beq.w	8003f6c <CRYP_AES_CCM+0x45e>
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d000      	beq.n	8003e56 <CRYP_AES_CCM+0x348>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8003e54:	e0fa      	b.n	800404c <CRYP_AES_CCM+0x53e>
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003e5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e6a:	ba1b      	rev	r3, r3
 8003e6c:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 8003e6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e72:	3304      	adds	r3, #4
 8003e74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003e78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e86:	ba1b      	rev	r3, r3
 8003e88:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 8003e8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e8e:	3304      	adds	r3, #4
 8003e90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003e94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ea2:	ba1b      	rev	r3, r3
 8003ea4:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 8003ea6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003eaa:	3304      	adds	r3, #4
 8003eac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003eb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ebe:	ba1b      	rev	r3, r3
 8003ec0:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 8003ec2:	e0c3      	b.n	800404c <CRYP_AES_CCM+0x53e>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8003ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003ecc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ed6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003eda:	ba1b      	rev	r3, r3
 8003edc:	663b      	str	r3, [r7, #96]	; 0x60
    keyaddr+=4;
 8003ede:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003ee8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ef6:	ba1b      	rev	r3, r3
 8003ef8:	667b      	str	r3, [r7, #100]	; 0x64
    keyaddr+=4;
 8003efa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003efe:	3304      	adds	r3, #4
 8003f00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003f04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f12:	ba1b      	rev	r3, r3
 8003f14:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 8003f16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003f20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f2e:	ba1b      	rev	r3, r3
 8003f30:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 8003f32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f36:	3304      	adds	r3, #4
 8003f38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003f3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f4a:	ba1b      	rev	r3, r3
 8003f4c:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 8003f4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f52:	3304      	adds	r3, #4
 8003f54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003f58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f66:	ba1b      	rev	r3, r3
 8003f68:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 8003f6a:	e06f      	b.n	800404c <CRYP_AES_CCM+0x53e>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8003f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8003f74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f82:	ba1b      	rev	r3, r3
 8003f84:	65bb      	str	r3, [r7, #88]	; 0x58
    keyaddr+=4;
 8003f86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8003f90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f9e:	ba1b      	rev	r3, r3
 8003fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
    keyaddr+=4;
 8003fa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003fac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fba:	ba1b      	rev	r3, r3
 8003fbc:	663b      	str	r3, [r7, #96]	; 0x60
    keyaddr+=4;
 8003fbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003fc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003fd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fd6:	ba1b      	rev	r3, r3
 8003fd8:	667b      	str	r3, [r7, #100]	; 0x64
    keyaddr+=4;
 8003fda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fde:	3304      	adds	r3, #4
 8003fe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003fe4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ff2:	ba1b      	rev	r3, r3
 8003ff4:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 8003ff6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004000:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800400a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800400e:	ba1b      	rev	r3, r3
 8004010:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 8004012:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004016:	3304      	adds	r3, #4
 8004018:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800401c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004026:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800402a:	ba1b      	rev	r3, r3
 800402c:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 800402e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004032:	3304      	adds	r3, #4
 8004034:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004038:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004042:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004046:	ba1b      	rev	r3, r3
 8004048:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 800404a:	bf00      	nop
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
 800404c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004056:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800405a:	ba1b      	rev	r3, r3
 800405c:	64bb      	str	r3, [r7, #72]	; 0x48
  ctraddr+=4;
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004062:	3304      	adds	r3, #4
 8004064:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
 8004068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004076:	ba1b      	rev	r3, r3
 8004078:	64fb      	str	r3, [r7, #76]	; 0x4c
  ctraddr+=4;
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	3304      	adds	r3, #4
 8004080:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
 8004084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800408e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004092:	ba1b      	rev	r3, r3
 8004094:	653b      	str	r3, [r7, #80]	; 0x50
  ctraddr+=4;
 8004096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409a:	3304      	adds	r3, #4
 800409c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
 80040a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040ae:	ba1b      	rev	r3, r3
 80040b0:	657b      	str	r3, [r7, #84]	; 0x54
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 80040b2:	f107 030f 	add.w	r3, r7, #15
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	f040 81b9 	bne.w	8004430 <CRYP_AES_CCM+0x922>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80040be:	f7fd fffb 	bl	80020b8 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80040c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd ff5a 	bl	8001f80 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80040cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fd ffa3 	bl	800201c <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80040d6:	2300      	movs	r3, #0
 80040d8:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 80040da:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 80040de:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 80040e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fd fee0 	bl	8001eb0 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 80040f0:	2000      	movs	r0, #0
 80040f2:	f7fd ffc5 	bl	8002080 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 80040f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80040fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe f805 	bl	8002114 <CRYP_DataIn>
    b0addr+=4;
 800410a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410e:	3304      	adds	r3, #4
 8004110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8004114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd fffa 	bl	8002114 <CRYP_DataIn>
    b0addr+=4;
 8004120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004124:	3304      	adds	r3, #4
 8004126:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800412a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fd ffef 	bl	8002114 <CRYP_DataIn>
    b0addr+=4;
 8004136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800413a:	3304      	adds	r3, #4
 800413c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fd ffe4 	bl	8002114 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800414c:	2001      	movs	r0, #1
 800414e:	f7fd ffc3 	bl	80020d8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE);
 8004152:	bf00      	nop
 8004154:	f7fe f9ac 	bl	80024b0 <CRYP_GetCmdStatus>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d0fa      	beq.n	8004154 <CRYP_AES_CCM+0x646>
    
    /***************************** header phase *******************************/
    if(headersize != 0)
 800415e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004162:	2b00      	cmp	r3, #0
 8004164:	d069      	beq.n	800423a <CRYP_AES_CCM+0x72c>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8004166:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800416a:	f7fd ff89 	bl	8002080 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 800416e:	2001      	movs	r0, #1
 8004170:	f7fd ffb2 	bl	80020d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8004174:	f7fe f99c 	bl	80024b0 <CRYP_GetCmdStatus>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <CRYP_AES_CCM+0x674>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 800417e:	2300      	movs	r3, #0
 8004180:	e32f      	b.n	80047e2 <CRYP_AES_CCM+0xcd4>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004188:	e037      	b.n	80041fa <CRYP_AES_CCM+0x6ec>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 800418a:	bf00      	nop
 800418c:	2001      	movs	r0, #1
 800418e:	f7fe f9a9 	bl	80024e4 <CRYP_GetFlagStatus>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f9      	beq.n	800418c <CRYP_AES_CCM+0x67e>
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8004198:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fd ffb8 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 80041a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80041a8:	3304      	adds	r3, #4
 80041aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80041ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fd ffad 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 80041ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80041be:	3304      	adds	r3, #4
 80041c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80041c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fd ffa2 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 80041d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80041d4:	3304      	adds	r3, #4
 80041d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80041da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fd ff97 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 80041e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80041ea:	3304      	adds	r3, #4
 80041ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 80041f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041f4:	3310      	adds	r3, #16
 80041f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80041fa:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80041fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004202:	429a      	cmp	r2, r3
 8004204:	d3c1      	bcc.n	800418a <CRYP_AES_CCM+0x67c>
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	647b      	str	r3, [r7, #68]	; 0x44
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800420a:	2010      	movs	r0, #16
 800420c:	f7fe f96a 	bl	80024e4 <CRYP_GetFlagStatus>
 8004210:	4603      	mov	r3, r0
 8004212:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        counter++;
 8004216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004218:	3301      	adds	r3, #1
 800421a:	647b      	str	r3, [r7, #68]	; 0x44
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800421c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800421e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004222:	d003      	beq.n	800422c <CRYP_AES_CCM+0x71e>
 8004224:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ee      	bne.n	800420a <CRYP_AES_CCM+0x6fc>

      if (busystatus != RESET)
 800422c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <CRYP_AES_CCM+0x72c>
      {
        status = ERROR;
 8004234:	2300      	movs	r3, #0
 8004236:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 800423a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80a3 	beq.w	800438a <CRYP_AES_CCM+0x87c>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8004244:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004248:	f7fd ff1a 	bl	8002080 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 800424c:	2001      	movs	r0, #1
 800424e:	f7fd ff43 	bl	80020d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8004252:	f7fe f92d 	bl	80024b0 <CRYP_GetCmdStatus>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <CRYP_AES_CCM+0x752>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 800425c:	2300      	movs	r3, #0
 800425e:	e2c0      	b.n	80047e2 <CRYP_AES_CCM+0xcd4>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004266:	e085      	b.n	8004374 <CRYP_AES_CCM+0x866>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 8004268:	bf00      	nop
 800426a:	2001      	movs	r0, #1
 800426c:	f7fe f93a 	bl	80024e4 <CRYP_GetFlagStatus>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f9      	beq.n	800426a <CRYP_AES_CCM+0x75c>
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004276:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f7fd ff49 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 8004282:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004286:	3304      	adds	r3, #4
 8004288:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800428c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fd ff3e 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 8004298:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800429c:	3304      	adds	r3, #4
 800429e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80042a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fd ff33 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 80042ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042b2:	3304      	adds	r3, #4
 80042b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80042b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd ff28 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 80042c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042c8:	3304      	adds	r3, #4
 80042ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	647b      	str	r3, [r7, #68]	; 0x44
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80042d2:	2010      	movs	r0, #16
 80042d4:	f7fe f906 	bl	80024e4 <CRYP_GetFlagStatus>
 80042d8:	4603      	mov	r3, r0
 80042da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          counter++;
 80042de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e0:	3301      	adds	r3, #1
 80042e2:	647b      	str	r3, [r7, #68]	; 0x44
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80042e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ea:	d003      	beq.n	80042f4 <CRYP_AES_CCM+0x7e6>
 80042ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ee      	bne.n	80042d2 <CRYP_AES_CCM+0x7c4>

        if (busystatus != RESET)
 80042f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <CRYP_AES_CCM+0x7f6>
        {
          status = ERROR;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004302:	e032      	b.n	800436a <CRYP_AES_CCM+0x85c>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 8004304:	bf00      	nop
 8004306:	2004      	movs	r0, #4
 8004308:	f7fe f8ec 	bl	80024e4 <CRYP_GetFlagStatus>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f9      	beq.n	8004306 <CRYP_AES_CCM+0x7f8>
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004312:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8004316:	f7fd ff0d 	bl	8002134 <CRYP_DataOut>
 800431a:	4603      	mov	r3, r0
 800431c:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800431e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004322:	3304      	adds	r3, #4
 8004324:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004328:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800432c:	f7fd ff02 	bl	8002134 <CRYP_DataOut>
 8004330:	4603      	mov	r3, r0
 8004332:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8004334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004338:	3304      	adds	r3, #4
 800433a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800433e:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8004342:	f7fd fef7 	bl	8002134 <CRYP_DataOut>
 8004346:	4603      	mov	r3, r0
 8004348:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800434a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800434e:	3304      	adds	r3, #4
 8004350:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004354:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8004358:	f7fd feec 	bl	8002134 <CRYP_DataOut>
 800435c:	4603      	mov	r3, r0
 800435e:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004364:	3304      	adds	r3, #4
 8004366:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 800436a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800436e:	3310      	adds	r3, #16
 8004370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004374:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8004378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800437c:	429a      	cmp	r2, r3
 800437e:	d204      	bcs.n	800438a <CRYP_AES_CCM+0x87c>
 8004380:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004384:	2b00      	cmp	r3, #0
 8004386:	f47f af6f 	bne.w	8004268 <CRYP_AES_CCM+0x75a>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 800438a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800438e:	f7fd fe77 	bl	8002080 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8004392:	2001      	movs	r0, #1
 8004394:	f7fd fea0 	bl	80020d8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8004398:	f7fe f88a 	bl	80024b0 <CRYP_GetCmdStatus>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <CRYP_AES_CCM+0x898>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 80043a2:	2300      	movs	r3, #0
 80043a4:	e21d      	b.n	80047e2 <CRYP_AES_CCM+0xcd4>
    }
    
    ctraddr = (uint32_t)ctr;
 80043a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd fead 	bl	8002114 <CRYP_DataIn>
    ctraddr+=4;
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043be:	3304      	adds	r3, #4
 80043c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 80043c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fd fea2 	bl	8002114 <CRYP_DataIn>
    ctraddr+=4;
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d4:	3304      	adds	r3, #4
 80043d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fd fe97 	bl	8002114 <CRYP_DataIn>
    ctraddr+=4;
 80043e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ea:	3304      	adds	r3, #4
 80043ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 80043f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd fe8a 	bl	8002114 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 8004400:	bf00      	nop
 8004402:	2004      	movs	r0, #4
 8004404:	f7fe f86e 	bl	80024e4 <CRYP_GetFlagStatus>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f9      	beq.n	8004402 <CRYP_AES_CCM+0x8f4>
    
    /* Read the Auth TAG in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 800440e:	f7fd fe91 	bl	8002134 <CRYP_DataOut>
 8004412:	4603      	mov	r3, r0
 8004414:	617b      	str	r3, [r7, #20]
    temptag[1] = CRYP_DataOut();
 8004416:	f7fd fe8d 	bl	8002134 <CRYP_DataOut>
 800441a:	4603      	mov	r3, r0
 800441c:	61bb      	str	r3, [r7, #24]
    temptag[2] = CRYP_DataOut();
 800441e:	f7fd fe89 	bl	8002134 <CRYP_DataOut>
 8004422:	4603      	mov	r3, r0
 8004424:	61fb      	str	r3, [r7, #28]
    temptag[3] = CRYP_DataOut();
 8004426:	f7fd fe85 	bl	8002134 <CRYP_DataOut>
 800442a:	4603      	mov	r3, r0
 800442c:	623b      	str	r3, [r7, #32]
 800442e:	e1b7      	b.n	80047a0 <CRYP_AES_CCM+0xc92>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8004430:	f7fd fe42 	bl	80020b8 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8004434:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004438:	4618      	mov	r0, r3
 800443a:	f7fd fda1 	bl	8001f80 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800443e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd fdea 	bl	800201c <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004448:	2304      	movs	r3, #4
 800444a:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 800444c:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 8004450:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 8004458:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800445c:	4618      	mov	r0, r3
 800445e:	f7fd fd27 	bl	8001eb0 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8004462:	2000      	movs	r0, #0
 8004464:	f7fd fe0c 	bl	8002080 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 8004468:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800446c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8004470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd fe4c 	bl	8002114 <CRYP_DataIn>
    b0addr+=4;
 800447c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004480:	3304      	adds	r3, #4
 8004482:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8004486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7fd fe41 	bl	8002114 <CRYP_DataIn>
    b0addr+=4;
 8004492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004496:	3304      	adds	r3, #4
 8004498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800449c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fd fe36 	bl	8002114 <CRYP_DataIn>
    b0addr+=4;
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ac:	3304      	adds	r3, #4
 80044ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80044b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fd fe2b 	bl	8002114 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80044be:	2001      	movs	r0, #1
 80044c0:	f7fd fe0a 	bl	80020d8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE);
 80044c4:	bf00      	nop
 80044c6:	f7fd fff3 	bl	80024b0 <CRYP_GetCmdStatus>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d0fa      	beq.n	80044c6 <CRYP_AES_CCM+0x9b8>
    
    /***************************** header phase *******************************/
    if(headersize != 0)
 80044d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d069      	beq.n	80045ac <CRYP_AES_CCM+0xa9e>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 80044d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80044dc:	f7fd fdd0 	bl	8002080 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 80044e0:	2001      	movs	r0, #1
 80044e2:	f7fd fdf9 	bl	80020d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 80044e6:	f7fd ffe3 	bl	80024b0 <CRYP_GetCmdStatus>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <CRYP_AES_CCM+0x9e6>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 80044f0:	2300      	movs	r3, #0
 80044f2:	e176      	b.n	80047e2 <CRYP_AES_CCM+0xcd4>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80044fa:	e037      	b.n	800456c <CRYP_AES_CCM+0xa5e>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 80044fc:	bf00      	nop
 80044fe:	2001      	movs	r0, #1
 8004500:	f7fd fff0 	bl	80024e4 <CRYP_GetFlagStatus>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f9      	beq.n	80044fe <CRYP_AES_CCM+0x9f0>
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800450a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fd fdff 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 8004516:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800451a:	3304      	adds	r3, #4
 800451c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8004520:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd fdf4 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 800452c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004530:	3304      	adds	r3, #4
 8004532:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8004536:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7fd fde9 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 8004542:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004546:	3304      	adds	r3, #4
 8004548:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800454c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd fdde 	bl	8002114 <CRYP_DataIn>
        headeraddr+=4;
 8004558:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800455c:	3304      	adds	r3, #4
 800455e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8004562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004566:	3310      	adds	r3, #16
 8004568:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800456c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8004570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004574:	429a      	cmp	r2, r3
 8004576:	d3c1      	bcc.n	80044fc <CRYP_AES_CCM+0x9ee>
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	647b      	str	r3, [r7, #68]	; 0x44
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800457c:	2010      	movs	r0, #16
 800457e:	f7fd ffb1 	bl	80024e4 <CRYP_GetFlagStatus>
 8004582:	4603      	mov	r3, r0
 8004584:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        counter++;
 8004588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458a:	3301      	adds	r3, #1
 800458c:	647b      	str	r3, [r7, #68]	; 0x44
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800458e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004594:	d003      	beq.n	800459e <CRYP_AES_CCM+0xa90>
 8004596:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1ee      	bne.n	800457c <CRYP_AES_CCM+0xa6e>

      if (busystatus != RESET)
 800459e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <CRYP_AES_CCM+0xa9e>
      {
        status = ERROR;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 80045ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80a3 	beq.w	80046fc <CRYP_AES_CCM+0xbee>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 80045b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80045ba:	f7fd fd61 	bl	8002080 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 80045be:	2001      	movs	r0, #1
 80045c0:	f7fd fd8a 	bl	80020d8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 80045c4:	f7fd ff74 	bl	80024b0 <CRYP_GetCmdStatus>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <CRYP_AES_CCM+0xac4>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 80045ce:	2300      	movs	r3, #0
 80045d0:	e107      	b.n	80047e2 <CRYP_AES_CCM+0xcd4>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 80045d2:	2300      	movs	r3, #0
 80045d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045d8:	e085      	b.n	80046e6 <CRYP_AES_CCM+0xbd8>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 80045da:	bf00      	nop
 80045dc:	2001      	movs	r0, #1
 80045de:	f7fd ff81 	bl	80024e4 <CRYP_GetFlagStatus>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f9      	beq.n	80045dc <CRYP_AES_CCM+0xace>
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80045e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fd fd90 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 80045f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045f8:	3304      	adds	r3, #4
 80045fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80045fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fd fd85 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 800460a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800460e:	3304      	adds	r3, #4
 8004610:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004614:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fd7a 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 8004620:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004624:	3304      	adds	r3, #4
 8004626:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800462a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7fd fd6f 	bl	8002114 <CRYP_DataIn>
        inputaddr+=4;
 8004636:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800463a:	3304      	adds	r3, #4
 800463c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	647b      	str	r3, [r7, #68]	; 0x44
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004644:	2010      	movs	r0, #16
 8004646:	f7fd ff4d 	bl	80024e4 <CRYP_GetFlagStatus>
 800464a:	4603      	mov	r3, r0
 800464c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          counter++;
 8004650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004652:	3301      	adds	r3, #1
 8004654:	647b      	str	r3, [r7, #68]	; 0x44
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8004656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d003      	beq.n	8004666 <CRYP_AES_CCM+0xb58>
 800465e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1ee      	bne.n	8004644 <CRYP_AES_CCM+0xb36>

        if (busystatus != RESET)
 8004666:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <CRYP_AES_CCM+0xb68>
        {
          status = ERROR;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004674:	e032      	b.n	80046dc <CRYP_AES_CCM+0xbce>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 8004676:	bf00      	nop
 8004678:	2004      	movs	r0, #4
 800467a:	f7fd ff33 	bl	80024e4 <CRYP_GetFlagStatus>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f9      	beq.n	8004678 <CRYP_AES_CCM+0xb6a>
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004684:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8004688:	f7fd fd54 	bl	8002134 <CRYP_DataOut>
 800468c:	4603      	mov	r3, r0
 800468e:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004694:	3304      	adds	r3, #4
 8004696:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800469a:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800469e:	f7fd fd49 	bl	8002134 <CRYP_DataOut>
 80046a2:	4603      	mov	r3, r0
 80046a4:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80046a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046aa:	3304      	adds	r3, #4
 80046ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80046b0:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80046b4:	f7fd fd3e 	bl	8002134 <CRYP_DataOut>
 80046b8:	4603      	mov	r3, r0
 80046ba:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80046bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c0:	3304      	adds	r3, #4
 80046c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80046c6:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80046ca:	f7fd fd33 	bl	8002134 <CRYP_DataOut>
 80046ce:	4603      	mov	r3, r0
 80046d0:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80046d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046d6:	3304      	adds	r3, #4
 80046d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 80046dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046e0:	3310      	adds	r3, #16
 80046e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80046e6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80046ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d204      	bcs.n	80046fc <CRYP_AES_CCM+0xbee>
 80046f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f47f af6f 	bne.w	80045da <CRYP_AES_CCM+0xacc>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 80046fc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8004700:	f7fd fcbe 	bl	8002080 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8004704:	2001      	movs	r0, #1
 8004706:	f7fd fce7 	bl	80020d8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 800470a:	f7fd fed1 	bl	80024b0 <CRYP_GetCmdStatus>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <CRYP_AES_CCM+0xc0a>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8004714:	2300      	movs	r3, #0
 8004716:	e064      	b.n	80047e2 <CRYP_AES_CCM+0xcd4>
    }
    
    ctraddr = (uint32_t)ctr;
 8004718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800471c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8004720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd fcf4 	bl	8002114 <CRYP_DataIn>
    ctraddr+=4;
 800472c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004730:	3304      	adds	r3, #4
 8004732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7fd fce9 	bl	8002114 <CRYP_DataIn>
    ctraddr+=4;
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004746:	3304      	adds	r3, #4
 8004748:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 800474c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fd fcde 	bl	8002114 <CRYP_DataIn>
    ctraddr+=4;
 8004758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475c:	3304      	adds	r3, #4
 800475e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 8004762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476c:	4618      	mov	r0, r3
 800476e:	f7fd fcd1 	bl	8002114 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 8004772:	bf00      	nop
 8004774:	2004      	movs	r0, #4
 8004776:	f7fd feb5 	bl	80024e4 <CRYP_GetFlagStatus>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f9      	beq.n	8004774 <CRYP_AES_CCM+0xc66>
    
    /* Read the Authentaication TAG (MAC) in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 8004780:	f7fd fcd8 	bl	8002134 <CRYP_DataOut>
 8004784:	4603      	mov	r3, r0
 8004786:	617b      	str	r3, [r7, #20]
    temptag[1] = CRYP_DataOut();
 8004788:	f7fd fcd4 	bl	8002134 <CRYP_DataOut>
 800478c:	4603      	mov	r3, r0
 800478e:	61bb      	str	r3, [r7, #24]
    temptag[2] = CRYP_DataOut();
 8004790:	f7fd fcd0 	bl	8002134 <CRYP_DataOut>
 8004794:	4603      	mov	r3, r0
 8004796:	61fb      	str	r3, [r7, #28]
    temptag[3] = CRYP_DataOut();
 8004798:	f7fd fccc 	bl	8002134 <CRYP_DataOut>
 800479c:	4603      	mov	r3, r0
 800479e:	623b      	str	r3, [r7, #32]
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80047a6:	e011      	b.n	80047cc <CRYP_AES_CCM+0xcbe>
  {
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
 80047a8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80047ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80047b0:	4413      	add	r3, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	f107 0214 	add.w	r2, r7, #20
 80047b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047bc:	4413      	add	r3, r2
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	700b      	strb	r3, [r1, #0]
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 80047c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047c6:	3301      	adds	r3, #1
 80047c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80047cc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80047d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3e7      	bcc.n	80047a8 <CRYP_AES_CCM+0xc9a>
  }
  
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80047d8:	2000      	movs	r0, #0
 80047da:	f7fd fc7d 	bl	80020d8 <CRYP_Cmd>

  return status;
 80047de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd90      	pop	{r4, r7, pc}

080047ec <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b09b      	sub	sp, #108	; 0x6c
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	4603      	mov	r3, r0
 80047fa:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8004812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004814:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800481a:	f107 0318 	add.w	r3, r7, #24
 800481e:	4618      	mov	r0, r3
 8004820:	f7fd fbda 	bl	8001fd8 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d102      	bne.n	8004830 <CRYP_DES_ECB+0x44>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800482a:	2300      	movs	r3, #0
 800482c:	63bb      	str	r3, [r7, #56]	; 0x38
 800482e:	e001      	b.n	8004834 <CRYP_DES_ECB+0x48>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8004830:	2304      	movs	r3, #4
 8004832:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 8004834:	2310      	movs	r3, #16
 8004836:	63fb      	str	r3, [r7, #60]	; 0x3c
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&DES_CRYP_InitStructure);
 800483c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004840:	4618      	mov	r0, r3
 8004842:	f7fd fb35 	bl	8001eb0 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
 800484c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484e:	ba1b      	rev	r3, r3
 8004850:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8004852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004854:	3304      	adds	r3, #4
 8004856:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004860:	ba1b      	rev	r3, r3
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8004864:	f107 0318 	add.w	r3, r7, #24
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd fb89 	bl	8001f80 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800486e:	f7fd fc23 	bl	80020b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004872:	2001      	movs	r0, #1
 8004874:	f7fd fc30 	bl	80020d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8004878:	f7fd fe1a 	bl	80024b0 <CRYP_GetCmdStatus>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <CRYP_DES_ECB+0x9a>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8004882:	2300      	movs	r3, #0
 8004884:	e04a      	b.n	800491c <CRYP_DES_ECB+0x130>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004886:	2300      	movs	r3, #0
 8004888:	65bb      	str	r3, [r7, #88]	; 0x58
 800488a:	e03a      	b.n	8004902 <CRYP_DES_ECB+0x116>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800488c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7fd fc3f 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8004896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004898:	3304      	adds	r3, #4
 800489a:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800489c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fd fc37 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 80048a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a8:	3304      	adds	r3, #4
 80048aa:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80048b0:	2010      	movs	r0, #16
 80048b2:	f7fd fe17 	bl	80024e4 <CRYP_GetFlagStatus>
 80048b6:	4603      	mov	r3, r0
 80048b8:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	3301      	adds	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c6:	d002      	beq.n	80048ce <CRYP_DES_ECB+0xe2>
 80048c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <CRYP_DES_ECB+0xc4>

    if (busystatus != RESET)
 80048ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <CRYP_DES_ECB+0xf0>
   {
       status = ERROR;
 80048d4:	2300      	movs	r3, #0
 80048d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80048da:	e00f      	b.n	80048fc <CRYP_DES_ECB+0x110>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80048dc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80048de:	f7fd fc29 	bl	8002134 <CRYP_DataOut>
 80048e2:	4603      	mov	r3, r0
 80048e4:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80048e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e8:	3304      	adds	r3, #4
 80048ea:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80048ec:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80048ee:	f7fd fc21 	bl	8002134 <CRYP_DataOut>
 80048f2:	4603      	mov	r3, r0
 80048f4:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80048f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f8:	3304      	adds	r3, #4
 80048fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80048fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048fe:	3308      	adds	r3, #8
 8004900:	65bb      	str	r3, [r7, #88]	; 0x58
 8004902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d203      	bcs.n	8004912 <CRYP_DES_ECB+0x126>
 800490a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1bc      	bne.n	800488c <CRYP_DES_ECB+0xa0>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004912:	2000      	movs	r0, #0
 8004914:	f7fd fbe0 	bl	80020d8 <CRYP_Cmd>

  return status; 
 8004918:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800491c:	4618      	mov	r0, r3
 800491e:	376c      	adds	r7, #108	; 0x6c
 8004920:	46bd      	mov	sp, r7
 8004922:	bd90      	pop	{r4, r7, pc}

08004924 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b0a1      	sub	sp, #132	; 0x84
 8004928:	af00      	add	r7, sp, #0
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t keyaddr    = (uint32_t)Key;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t inputaddr  = (uint32_t)Input;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t outputaddr = (uint32_t)Output;
 800494a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800494e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t i = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	673b      	str	r3, [r7, #112]	; 0x70

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8004958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800495c:	4618      	mov	r0, r3
 800495e:	f7fd fb3b 	bl	8001fd8 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d102      	bne.n	800496e <CRYP_DES_CBC+0x4a>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8004968:	2300      	movs	r3, #0
 800496a:	647b      	str	r3, [r7, #68]	; 0x44
 800496c:	e001      	b.n	8004972 <CRYP_DES_CBC+0x4e>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 800496e:	2304      	movs	r3, #4
 8004970:	647b      	str	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 8004972:	2318      	movs	r3, #24
 8004974:	64bb      	str	r3, [r7, #72]	; 0x48
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&DES_CRYP_InitStructure);
 800497a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800497e:	4618      	mov	r0, r3
 8004980:	f7fd fa96 	bl	8001eb0 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	657b      	str	r3, [r7, #84]	; 0x54
 800498a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800498c:	ba1b      	rev	r3, r3
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8004990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004992:	3304      	adds	r3, #4
 8004994:	66bb      	str	r3, [r7, #104]	; 0x68
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	65bb      	str	r3, [r7, #88]	; 0x58
 800499c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800499e:	ba1b      	rev	r3, r3
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80049a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fd faea 	bl	8001f80 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80049ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b4:	ba1b      	rev	r3, r3
 80049b6:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80049b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ba:	3304      	adds	r3, #4
 80049bc:	667b      	str	r3, [r7, #100]	; 0x64
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80049be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	663b      	str	r3, [r7, #96]	; 0x60
 80049c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c6:	ba1b      	rev	r3, r3
 80049c8:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 80049ca:	f107 0314 	add.w	r3, r7, #20
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fd fb24 	bl	800201c <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80049d4:	f7fd fb70 	bl	80020b8 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80049d8:	2001      	movs	r0, #1
 80049da:	f7fd fb7d 	bl	80020d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80049de:	f7fd fd67 	bl	80024b0 <CRYP_GetCmdStatus>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <CRYP_DES_CBC+0xc8>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80049e8:	2300      	movs	r3, #0
 80049ea:	e04b      	b.n	8004a84 <CRYP_DES_CBC+0x160>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80049ec:	2300      	movs	r3, #0
 80049ee:	673b      	str	r3, [r7, #112]	; 0x70
 80049f0:	e03a      	b.n	8004a68 <CRYP_DES_CBC+0x144>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80049f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fb8c 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 80049fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049fe:	3304      	adds	r3, #4
 8004a00:	67bb      	str	r3, [r7, #120]	; 0x78
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fd fb84 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8004a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a0e:	3304      	adds	r3, #4
 8004a10:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Wait until the complete message has been processed */
    counter = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004a16:	2010      	movs	r0, #16
 8004a18:	f7fd fd64 	bl	80024e4 <CRYP_GetFlagStatus>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	3301      	adds	r3, #1
 8004a24:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2c:	d002      	beq.n	8004a34 <CRYP_DES_CBC+0x110>
 8004a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <CRYP_DES_CBC+0xf2>

    if (busystatus != RESET)
 8004a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <CRYP_DES_CBC+0x11e>
   {
       status = ERROR;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a40:	e00f      	b.n	8004a62 <CRYP_DES_CBC+0x13e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004a42:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8004a44:	f7fd fb76 	bl	8002134 <CRYP_DataOut>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a4e:	3304      	adds	r3, #4
 8004a50:	677b      	str	r3, [r7, #116]	; 0x74
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004a52:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8004a54:	f7fd fb6e 	bl	8002134 <CRYP_DataOut>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a5e:	3304      	adds	r3, #4
 8004a60:	677b      	str	r3, [r7, #116]	; 0x74
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a64:	3308      	adds	r3, #8
 8004a66:	673b      	str	r3, [r7, #112]	; 0x70
 8004a68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004a6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d203      	bcs.n	8004a7a <CRYP_DES_CBC+0x156>
 8004a72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1bb      	bne.n	80049f2 <CRYP_DES_CBC+0xce>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	f7fd fb2c 	bl	80020d8 <CRYP_Cmd>

  return status; 
 8004a80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3784      	adds	r7, #132	; 0x84
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd90      	pop	{r4, r7, pc}

08004a8c <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8004a8c:	b590      	push	{r4, r7, lr}
 8004a8e:	b09f      	sub	sp, #124	; 0x7c
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  uint32_t keyaddr    = (uint32_t)Key;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t inputaddr  = (uint32_t)Input;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 8004ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8004abc:	f107 0318 	add.w	r3, r7, #24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd fa89 	bl	8001fd8 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d102      	bne.n	8004ad2 <CRYP_TDES_ECB+0x46>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8004acc:	2300      	movs	r3, #0
 8004ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad0:	e001      	b.n	8004ad6 <CRYP_TDES_ECB+0x4a>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&TDES_CRYP_InitStructure);
 8004ade:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fd f9e4 	bl	8001eb0 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af0:	ba1b      	rev	r3, r3
 8004af2:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8004af4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004af6:	3304      	adds	r3, #4
 8004af8:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b02:	ba1b      	rev	r3, r3
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8004b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b08:	3304      	adds	r3, #4
 8004b0a:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	653b      	str	r3, [r7, #80]	; 0x50
 8004b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b14:	ba1b      	rev	r3, r3
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 8004b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	657b      	str	r3, [r7, #84]	; 0x54
 8004b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b26:	ba1b      	rev	r3, r3
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8004b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b38:	ba1b      	rev	r3, r3
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8004b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b3e:	3304      	adds	r3, #4
 8004b40:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4a:	ba1b      	rev	r3, r3
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8004b4e:	f107 0318 	add.w	r3, r7, #24
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fa14 	bl	8001f80 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004b58:	f7fd faae 	bl	80020b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f7fd fabb 	bl	80020d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8004b62:	f7fd fca5 	bl	80024b0 <CRYP_GetCmdStatus>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <CRYP_TDES_ECB+0xe4>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e04a      	b.n	8004c06 <CRYP_TDES_ECB+0x17a>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004b70:	2300      	movs	r3, #0
 8004b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b74:	e03a      	b.n	8004bec <CRYP_TDES_ECB+0x160>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fd faca 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8004b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b82:	3304      	adds	r3, #4
 8004b84:	673b      	str	r3, [r7, #112]	; 0x70
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fac2 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8004b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b92:	3304      	adds	r3, #4
 8004b94:	673b      	str	r3, [r7, #112]	; 0x70

    /* Wait until the complete message has been processed */
    counter = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004b9a:	2010      	movs	r0, #16
 8004b9c:	f7fd fca2 	bl	80024e4 <CRYP_GetFlagStatus>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	667b      	str	r3, [r7, #100]	; 0x64
      counter++;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb0:	d002      	beq.n	8004bb8 <CRYP_TDES_ECB+0x12c>
 8004bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f0      	bne.n	8004b9a <CRYP_TDES_ECB+0x10e>

    if (busystatus != RESET)
 8004bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <CRYP_TDES_ECB+0x13a>
    {
       status = ERROR;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004bc4:	e00f      	b.n	8004be6 <CRYP_TDES_ECB+0x15a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004bc6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8004bc8:	f7fd fab4 	bl	8002134 <CRYP_DataOut>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004bd6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8004bd8:	f7fd faac 	bl	8002134 <CRYP_DataOut>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be2:	3304      	adds	r3, #4
 8004be4:	66fb      	str	r3, [r7, #108]	; 0x6c
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004be8:	3308      	adds	r3, #8
 8004bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d203      	bcs.n	8004bfc <CRYP_TDES_ECB+0x170>
 8004bf4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1bc      	bne.n	8004b76 <CRYP_TDES_ECB+0xea>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f7fd fa6b 	bl	80020d8 <CRYP_Cmd>

  return status; 
 8004c02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	377c      	adds	r7, #124	; 0x7c
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd90      	pop	{r4, r7, pc}

08004c0e <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8004c0e:	b590      	push	{r4, r7, lr}
 8004c10:	b0a5      	sub	sp, #148	; 0x94
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	67fb      	str	r3, [r7, #124]	; 0x7c
  ErrorStatus status = SUCCESS;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t keyaddr    = (uint32_t)Key;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t inputaddr  = (uint32_t)Input;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t outputaddr = (uint32_t)Output;
 8004c36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t i = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8004c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fd f9c3 	bl	8001fd8 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d102      	bne.n	8004c5e <CRYP_TDES_CBC+0x50>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5c:	e001      	b.n	8004c62 <CRYP_TDES_CBC+0x54>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004c5e:	2304      	movs	r3, #4
 8004c60:	647b      	str	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8004c62:	2308      	movs	r3, #8
 8004c64:	64bb      	str	r3, [r7, #72]	; 0x48
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004c66:	2380      	movs	r3, #128	; 0x80
 8004c68:	64fb      	str	r3, [r7, #76]	; 0x4c

  CRYP_Init(&TDES_CRYP_InitStructure);
 8004c6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fd f91e 	bl	8001eb0 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	657b      	str	r3, [r7, #84]	; 0x54
 8004c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c7c:	ba1b      	rev	r3, r3
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8004c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c82:	3304      	adds	r3, #4
 8004c84:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004c86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c8e:	ba1b      	rev	r3, r3
 8004c90:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8004c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c94:	3304      	adds	r3, #4
 8004c96:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca0:	ba1b      	rev	r3, r3
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8004ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb2:	ba1b      	rev	r3, r3
 8004cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 8004cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb8:	3304      	adds	r3, #4
 8004cba:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	667b      	str	r3, [r7, #100]	; 0x64
 8004cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc4:	ba1b      	rev	r3, r3
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 8004cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cca:	3304      	adds	r3, #4
 8004ccc:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cd6:	ba1b      	rev	r3, r3
 8004cd8:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8004cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fd f94e 	bl	8001f80 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8004ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cec:	ba1b      	rev	r3, r3
 8004cee:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8004cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	677b      	str	r3, [r7, #116]	; 0x74
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8004cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8004cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cfe:	ba1b      	rev	r3, r3
 8004d00:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8004d02:	f107 0314 	add.w	r3, r7, #20
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fd f988 	bl	800201c <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004d0c:	f7fd f9d4 	bl	80020b8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004d10:	2001      	movs	r0, #1
 8004d12:	f7fd f9e1 	bl	80020d8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8004d16:	f7fd fbcb 	bl	80024b0 <CRYP_GetCmdStatus>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <CRYP_TDES_CBC+0x116>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8004d20:	2300      	movs	r3, #0
 8004d22:	e05b      	b.n	8004ddc <CRYP_TDES_CBC+0x1ce>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004d24:	2300      	movs	r3, #0
 8004d26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d2a:	e048      	b.n	8004dbe <CRYP_TDES_CBC+0x1b0>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fd f9ee 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8004d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd f9e3 	bl	8002114 <CRYP_DataIn>
    inputaddr+=4;
 8004d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d52:	3304      	adds	r3, #4
 8004d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Wait until the complete message has been processed */
    counter = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004d5c:	2010      	movs	r0, #16
 8004d5e:	f7fd fbc1 	bl	80024e4 <CRYP_GetFlagStatus>
 8004d62:	4603      	mov	r3, r0
 8004d64:	67fb      	str	r3, [r7, #124]	; 0x7c
      counter++;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d72:	d002      	beq.n	8004d7a <CRYP_TDES_CBC+0x16c>
 8004d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <CRYP_TDES_CBC+0x14e>

    if (busystatus != RESET)
 8004d7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <CRYP_TDES_CBC+0x17a>
   {
       status = ERROR;
 8004d80:	2300      	movs	r3, #0
 8004d82:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004d86:	e015      	b.n	8004db4 <CRYP_TDES_CBC+0x1a6>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004d88:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8004d8c:	f7fd f9d2 	bl	8002134 <CRYP_DataOut>
 8004d90:	4603      	mov	r3, r0
 8004d92:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d98:	3304      	adds	r3, #4
 8004d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004d9e:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8004da2:	f7fd f9c7 	bl	8002134 <CRYP_DataOut>
 8004da6:	4603      	mov	r3, r0
 8004da8:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dae:	3304      	adds	r3, #4
 8004db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004db8:	3308      	adds	r3, #8
 8004dba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d203      	bcs.n	8004dd2 <CRYP_TDES_CBC+0x1c4>
 8004dca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ac      	bne.n	8004d2c <CRYP_TDES_CBC+0x11e>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f7fd f980 	bl	80020d8 <CRYP_Cmd>

  return status; 
 8004dd8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3794      	adds	r7, #148	; 0x94
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd90      	pop	{r4, r7, pc}

08004de4 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8004de8:	2101      	movs	r1, #1
 8004dea:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004dee:	f004 fbb7 	bl	8009560 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8004df2:	2100      	movs	r1, #0
 8004df4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004df8:	f004 fbb2 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 8004dfc:	bf00      	nop
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8004e12:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <DAC_Init+0x64>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8004e18:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4013      	ands	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8004e38:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8004e50:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <DAC_Init+0x64>)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6013      	str	r3, [r2, #0]
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40007400 	.word	0x40007400

08004e68 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	60da      	str	r2, [r3, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8004ea6:	490d      	ldr	r1, [pc, #52]	; (8004edc <DAC_Cmd+0x48>)
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <DAC_Cmd+0x48>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	2001      	movs	r0, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	fa00 f303 	lsl.w	r3, r0, r3
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8004eb8:	e009      	b.n	8004ece <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8004eba:	4908      	ldr	r1, [pc, #32]	; (8004edc <DAC_Cmd+0x48>)
 8004ebc:	4b07      	ldr	r3, [pc, #28]	; (8004edc <DAC_Cmd+0x48>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	fa00 f303 	lsl.w	r3, r0, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	4013      	ands	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40007400 	.word	0x40007400

08004ee0 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8004ef2:	490e      	ldr	r1, [pc, #56]	; (8004f2c <DAC_SoftwareTriggerCmd+0x4c>)
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <DAC_SoftwareTriggerCmd+0x4c>)
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	2001      	movs	r0, #1
 8004efe:	fa00 f303 	lsl.w	r3, r0, r3
 8004f02:	4313      	orrs	r3, r2
 8004f04:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
 8004f06:	e00a      	b.n	8004f1e <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8004f08:	4908      	ldr	r1, [pc, #32]	; (8004f2c <DAC_SoftwareTriggerCmd+0x4c>)
 8004f0a:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <DAC_SoftwareTriggerCmd+0x4c>)
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	2001      	movs	r0, #1
 8004f14:	fa00 f303 	lsl.w	r3, r0, r3
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40007400 	.word	0x40007400

08004f30 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d006      	beq.n	8004f4e <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8004f40:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <DAC_DualSoftwareTriggerCmd+0x38>)
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <DAC_DualSoftwareTriggerCmd+0x38>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f043 0303 	orr.w	r3, r3, #3
 8004f4a:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
  }
}
 8004f4c:	e005      	b.n	8004f5a <DAC_DualSoftwareTriggerCmd+0x2a>
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8004f4e:	4a06      	ldr	r2, [pc, #24]	; (8004f68 <DAC_DualSoftwareTriggerCmd+0x38>)
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <DAC_DualSoftwareTriggerCmd+0x38>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f023 0303 	bic.w	r3, r3, #3
 8004f58:	6053      	str	r3, [r2, #4]
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40007400 	.word	0x40007400

08004f6c <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8004f80:	480c      	ldr	r0, [pc, #48]	; (8004fb4 <DAC_WaveGenerationCmd+0x48>)
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <DAC_WaveGenerationCmd+0x48>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
  }
}
 8004f92:	e009      	b.n	8004fa8 <DAC_WaveGenerationCmd+0x3c>
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8004f94:	4807      	ldr	r0, [pc, #28]	; (8004fb4 <DAC_WaveGenerationCmd+0x48>)
 8004f96:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <DAC_WaveGenerationCmd+0x48>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	6003      	str	r3, [r0, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40007400 	.word	0x40007400

08004fb8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <DAC_SetChannel1Data+0x34>)
 8004fca:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	6013      	str	r3, [r2, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40007400 	.word	0x40007400

08004ff0 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8005000:	4b08      	ldr	r3, [pc, #32]	; (8005024 <DAC_SetChannel2Data+0x34>)
 8005002:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4413      	add	r3, r2
 800500a:	3314      	adds	r3, #20
 800500c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	461a      	mov	r2, r3
 8005012:	887b      	ldrh	r3, [r7, #2]
 8005014:	6013      	str	r3, [r2, #0]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40007400 	.word	0x40007400

08005028 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	807b      	strh	r3, [r7, #2]
 8005034:	4613      	mov	r3, r2
 8005036:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b08      	cmp	r3, #8
 8005044:	d105      	bne.n	8005052 <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	021a      	lsls	r2, r3, #8
 800504a:	883b      	ldrh	r3, [r7, #0]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e004      	b.n	800505c <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8005052:	887b      	ldrh	r3, [r7, #2]
 8005054:	041a      	lsls	r2, r3, #16
 8005056:	883b      	ldrh	r3, [r7, #0]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <DAC_SetDualChannelData+0x54>)
 800505e:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4413      	add	r3, r2
 8005066:	3320      	adds	r3, #32
 8005068:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	601a      	str	r2, [r3, #0]
}
 8005070:	bf00      	nop
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40007400 	.word	0x40007400

08005080 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 800508c:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <DAC_GetDataOutputValue+0x30>)
 800508e:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	089a      	lsrs	r2, r3, #2
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	332c      	adds	r3, #44	; 0x2c
 800509a:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40007400 	.word	0x40007400

080050b4 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 80050c6:	490e      	ldr	r1, [pc, #56]	; (8005100 <DAC_DMACmd+0x4c>)
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <DAC_DMACmd+0x4c>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	fa00 f303 	lsl.w	r3, r0, r3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 80050da:	e00a      	b.n	80050f2 <DAC_DMACmd+0x3e>
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 80050dc:	4908      	ldr	r1, [pc, #32]	; (8005100 <DAC_DMACmd+0x4c>)
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <DAC_DMACmd+0x4c>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	fa00 f303 	lsl.w	r3, r0, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	4013      	ands	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40007400 	.word	0x40007400

08005104 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	4613      	mov	r3, r2
 8005110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d009      	beq.n	800512c <DAC_ITConfig+0x28>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8005118:	480c      	ldr	r0, [pc, #48]	; (800514c <DAC_ITConfig+0x48>)
 800511a:	4b0c      	ldr	r3, [pc, #48]	; (800514c <DAC_ITConfig+0x48>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	fa01 f303 	lsl.w	r3, r1, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
  }
}
 800512a:	e009      	b.n	8005140 <DAC_ITConfig+0x3c>
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 800512c:	4807      	ldr	r0, [pc, #28]	; (800514c <DAC_ITConfig+0x48>)
 800512e:	4b07      	ldr	r3, [pc, #28]	; (800514c <DAC_ITConfig+0x48>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	fa01 f303 	lsl.w	r3, r1, r3
 800513a:	43db      	mvns	r3, r3
 800513c:	4013      	ands	r3, r2
 800513e:	6003      	str	r3, [r0, #0]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40007400 	.word	0x40007400

08005150 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <DAC_GetFlagStatus+0x38>)
 8005160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005162:	6839      	ldr	r1, [r7, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <DAC_GetFlagStatus+0x26>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
 8005174:	e001      	b.n	800517a <DAC_GetFlagStatus+0x2a>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 800517a:	7bfb      	ldrb	r3, [r7, #15]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40007400 	.word	0x40007400

0800518c <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8005196:	4906      	ldr	r1, [pc, #24]	; (80051b0 <DAC_ClearFlag+0x24>)
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	634b      	str	r3, [r1, #52]	; 0x34
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40007400 	.word	0x40007400

080051b4 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <DAC_GetITStatus+0x54>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	fa01 f303 	lsl.w	r3, r1, r3
 80051d2:	4013      	ands	r3, r2
 80051d4:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 80051d6:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <DAC_GetITStatus+0x54>)
 80051d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	fa01 f303 	lsl.w	r3, r1, r3
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <DAC_GetITStatus+0x40>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <DAC_GetITStatus+0x40>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 80051ee:	2301      	movs	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
 80051f2:	e001      	b.n	80051f8 <DAC_GetITStatus+0x44>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 80051f4:	2300      	movs	r3, #0
 80051f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40007400 	.word	0x40007400

0800520c <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8005216:	4906      	ldr	r1, [pc, #24]	; (8005230 <DAC_ClearITPendingBit+0x24>)
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	634b      	str	r3, [r1, #52]	; 0x34
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40007400 	.word	0x40007400

08005234 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <DBGMCU_GetREVID+0x14>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	0c1b      	lsrs	r3, r3, #16
}
 800523e:	4618      	mov	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e0042000 	.word	0xe0042000

0800524c <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <DBGMCU_GetDEVID+0x18>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8005258:	4618      	mov	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	e0042000 	.word	0xe0042000

08005268 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d006      	beq.n	8005288 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800527a:	490a      	ldr	r1, [pc, #40]	; (80052a4 <DBGMCU_Config+0x3c>)
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <DBGMCU_Config+0x3c>)
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4313      	orrs	r3, r2
 8005284:	604b      	str	r3, [r1, #4]
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
  }
}
 8005286:	e006      	b.n	8005296 <DBGMCU_Config+0x2e>
    DBGMCU->CR &= ~DBGMCU_Periph;
 8005288:	4906      	ldr	r1, [pc, #24]	; (80052a4 <DBGMCU_Config+0x3c>)
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <DBGMCU_Config+0x3c>)
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	43db      	mvns	r3, r3
 8005292:	4013      	ands	r3, r2
 8005294:	604b      	str	r3, [r1, #4]
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	e0042000 	.word	0xe0042000

080052a8 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d006      	beq.n	80052c8 <DBGMCU_APB1PeriphConfig+0x20>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 80052ba:	490a      	ldr	r1, [pc, #40]	; (80052e4 <DBGMCU_APB1PeriphConfig+0x3c>)
 80052bc:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <DBGMCU_APB1PeriphConfig+0x3c>)
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
  }
}
 80052c6:	e006      	b.n	80052d6 <DBGMCU_APB1PeriphConfig+0x2e>
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 80052c8:	4906      	ldr	r1, [pc, #24]	; (80052e4 <DBGMCU_APB1PeriphConfig+0x3c>)
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <DBGMCU_APB1PeriphConfig+0x3c>)
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	4013      	ands	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	e0042000 	.word	0xe0042000

080052e8 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d006      	beq.n	8005308 <DBGMCU_APB2PeriphConfig+0x20>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 80052fa:	490a      	ldr	r1, [pc, #40]	; (8005324 <DBGMCU_APB2PeriphConfig+0x3c>)
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <DBGMCU_APB2PeriphConfig+0x3c>)
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4313      	orrs	r3, r2
 8005304:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
  }
}
 8005306:	e006      	b.n	8005316 <DBGMCU_APB2PeriphConfig+0x2e>
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8005308:	4906      	ldr	r1, [pc, #24]	; (8005324 <DBGMCU_APB2PeriphConfig+0x3c>)
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <DBGMCU_APB2PeriphConfig+0x3c>)
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	43db      	mvns	r3, r3
 8005312:	4013      	ands	r3, r2
 8005314:	60cb      	str	r3, [r1, #12]
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	e0042000 	.word	0xe0042000

08005328 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 800532c:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <DCMI_DeInit+0x38>)
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 8005332:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <DCMI_DeInit+0x38>)
 8005334:	2200      	movs	r2, #0
 8005336:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8005338:	4b09      	ldr	r3, [pc, #36]	; (8005360 <DCMI_DeInit+0x38>)
 800533a:	221f      	movs	r2, #31
 800533c:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <DCMI_DeInit+0x38>)
 8005340:	2200      	movs	r2, #0
 8005342:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <DCMI_DeInit+0x38>)
 8005346:	2200      	movs	r2, #0
 8005348:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <DCMI_DeInit+0x38>)
 800534c:	2200      	movs	r2, #0
 800534e:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <DCMI_DeInit+0x38>)
 8005352:	2200      	movs	r2, #0
 8005354:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005356:	bf00      	nop
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	50050000 	.word	0x50050000

08005364 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8005370:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <DCMI_Init+0x7c>)
 8005372:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <DCMI_Init+0x7c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	6013      	str	r3, [r2, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8005380:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <DCMI_Init+0x7c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800538c:	f023 0302 	bic.w	r3, r3, #2
 8005390:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800539a:	4313      	orrs	r3, r2
 800539c:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_PCKPolarity |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80053a2:	4313      	orrs	r3, r2
 80053a4:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_VSPolarity |
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80053aa:	4313      	orrs	r3, r2
 80053ac:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_HSPolarity |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80053b2:	4313      	orrs	r3, r2
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	895b      	ldrh	r3, [r3, #10]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	899b      	ldrh	r3, [r3, #12]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80053c2:	4313      	orrs	r3, r2
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	461a      	mov	r2, r3
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  DCMI->CR = temp;                              
 80053ce:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <DCMI_Init+0x7c>)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6013      	str	r3, [r2, #0]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	50050000 	.word	0x50050000

080053e4 <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	819a      	strh	r2, [r3, #12]
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800542a:	4a0c      	ldr	r2, [pc, #48]	; (800545c <DCMI_CROPConfig+0x3a>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	885b      	ldrh	r3, [r3, #2]
 8005430:	4619      	mov	r1, r3
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	041b      	lsls	r3, r3, #16
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8005438:	430b      	orrs	r3, r1
 800543a:	6213      	str	r3, [r2, #32]

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800543c:	4a07      	ldr	r2, [pc, #28]	; (800545c <DCMI_CROPConfig+0x3a>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	88db      	ldrh	r3, [r3, #6]
 8005442:	4619      	mov	r1, r3
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	889b      	ldrh	r3, [r3, #4]
 8005448:	041b      	lsls	r3, r3, #16
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800544a:	430b      	orrs	r3, r1
 800544c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	50050000 	.word	0x50050000

08005460 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d006      	beq.n	800547e <DCMI_CROPCmd+0x1e>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8005470:	4a09      	ldr	r2, [pc, #36]	; (8005498 <DCMI_CROPCmd+0x38>)
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <DCMI_CROPCmd+0x38>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f043 0304 	orr.w	r3, r3, #4
 800547a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
  }
}
 800547c:	e005      	b.n	800548a <DCMI_CROPCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 800547e:	4a06      	ldr	r2, [pc, #24]	; (8005498 <DCMI_CROPCmd+0x38>)
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <DCMI_CROPCmd+0x38>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f023 0304 	bic.w	r3, r3, #4
 8005488:	6013      	str	r3, [r2, #0]
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	50050000 	.word	0x50050000

0800549c <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80054a4:	490b      	ldr	r1, [pc, #44]	; (80054d4 <DCMI_SetEmbeddedSynchroCodes+0x38>)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	021b      	lsls	r3, r3, #8
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80054b2:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	789b      	ldrb	r3, [r3, #2]
 80054b8:	041b      	lsls	r3, r3, #16
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 80054ba:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	78db      	ldrb	r3, [r3, #3]
 80054c0:	061b      	lsls	r3, r3, #24
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80054c2:	4313      	orrs	r3, r2
 80054c4:	618b      	str	r3, [r1, #24]
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	50050000 	.word	0x50050000

080054d8 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d006      	beq.n	80054f6 <DCMI_JPEGCmd+0x1e>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 80054e8:	4a09      	ldr	r2, [pc, #36]	; (8005510 <DCMI_JPEGCmd+0x38>)
 80054ea:	4b09      	ldr	r3, [pc, #36]	; (8005510 <DCMI_JPEGCmd+0x38>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f043 0308 	orr.w	r3, r3, #8
 80054f2:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
  }
}
 80054f4:	e005      	b.n	8005502 <DCMI_JPEGCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 80054f6:	4a06      	ldr	r2, [pc, #24]	; (8005510 <DCMI_JPEGCmd+0x38>)
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <DCMI_JPEGCmd+0x38>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 0308 	bic.w	r3, r3, #8
 8005500:	6013      	str	r3, [r2, #0]
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	50050000 	.word	0x50050000

08005514 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <DCMI_Cmd+0x1e>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8005524:	4a09      	ldr	r2, [pc, #36]	; (800554c <DCMI_Cmd+0x38>)
 8005526:	4b09      	ldr	r3, [pc, #36]	; (800554c <DCMI_Cmd+0x38>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800552e:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
  }
}
 8005530:	e005      	b.n	800553e <DCMI_Cmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8005532:	4a06      	ldr	r2, [pc, #24]	; (800554c <DCMI_Cmd+0x38>)
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <DCMI_Cmd+0x38>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553c:	6013      	str	r3, [r2, #0]
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	50050000 	.word	0x50050000

08005550 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <DCMI_CaptureCmd+0x1e>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <DCMI_CaptureCmd+0x38>)
 8005562:	4b09      	ldr	r3, [pc, #36]	; (8005588 <DCMI_CaptureCmd+0x38>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
  }
}
 800556c:	e005      	b.n	800557a <DCMI_CaptureCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 800556e:	4a06      	ldr	r2, [pc, #24]	; (8005588 <DCMI_CaptureCmd+0x38>)
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <DCMI_CaptureCmd+0x38>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	6013      	str	r3, [r2, #0]
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	50050000 	.word	0x50050000

0800558c <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return DCMI->DR;
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <DCMI_ReadData+0x14>)
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	50050000 	.word	0x50050000

080055a4 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	460a      	mov	r2, r1
 80055ae:	80fb      	strh	r3, [r7, #6]
 80055b0:	4613      	mov	r3, r2
 80055b2:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80055b4:	797b      	ldrb	r3, [r7, #5]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d006      	beq.n	80055c8 <DCMI_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 80055ba:	490a      	ldr	r1, [pc, #40]	; (80055e4 <DCMI_ITConfig+0x40>)
 80055bc:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <DCMI_ITConfig+0x40>)
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60cb      	str	r3, [r1, #12]
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
  }  
}
 80055c6:	e007      	b.n	80055d8 <DCMI_ITConfig+0x34>
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 80055c8:	4906      	ldr	r1, [pc, #24]	; (80055e4 <DCMI_ITConfig+0x40>)
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <DCMI_ITConfig+0x40>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	43d2      	mvns	r2, r2
 80055d2:	b292      	uxth	r2, r2
 80055d4:	4013      	ands	r3, r2
 80055d6:	60cb      	str	r3, [r1, #12]
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	50050000 	.word	0x50050000

080055e8 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80055f2:	2300      	movs	r3, #0
 80055f4:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	0b1b      	lsrs	r3, r3, #12
 80055fe:	b29b      	uxth	r3, r3
 8005600:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d103      	bne.n	8005610 <DCMI_GetFlagStatus+0x28>
  {
    tempreg= DCMI->RISR;
 8005608:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <DCMI_GetFlagStatus+0x60>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	e009      	b.n	8005624 <DCMI_GetFlagStatus+0x3c>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d103      	bne.n	800561e <DCMI_GetFlagStatus+0x36>
  {
    tempreg = DCMI->SR;
 8005616:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <DCMI_GetFlagStatus+0x60>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	e002      	b.n	8005624 <DCMI_GetFlagStatus+0x3c>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 800561e:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <DCMI_GetFlagStatus+0x60>)
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <DCMI_GetFlagStatus+0x4c>
  {
    bitstatus = SET;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]
 8005632:	e001      	b.n	8005638 <DCMI_GetFlagStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8005634:	2300      	movs	r3, #0
 8005636:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8005638:	7dfb      	ldrb	r3, [r7, #23]
}
 800563a:	4618      	mov	r0, r3
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	50050000 	.word	0x50050000

0800564c <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8005656:	4a04      	ldr	r2, [pc, #16]	; (8005668 <DCMI_ClearFlag+0x1c>)
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	6153      	str	r3, [r2, #20]
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	50050000 	.word	0x50050000

0800566c <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 800567e:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <DCMI_GetITStatus+0x3c>)
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	4013      	ands	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <DCMI_GetITStatus+0x28>
  {
    bitstatus = SET;
 800568e:	2301      	movs	r3, #1
 8005690:	73fb      	strb	r3, [r7, #15]
 8005692:	e001      	b.n	8005698 <DCMI_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 8005694:	2300      	movs	r3, #0
 8005696:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	50050000 	.word	0x50050000

080056ac <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 80056b6:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <DCMI_ClearITPendingBit+0x1c>)
 80056b8:	88fb      	ldrh	r3, [r7, #6]
 80056ba:	6153      	str	r3, [r2, #20]
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	50050000 	.word	0x50050000

080056cc <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f023 0201 	bic.w	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2221      	movs	r2, #33	; 0x21
 8005702:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a46      	ldr	r2, [pc, #280]	; (8005820 <DMA_DeInit+0x154>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d103      	bne.n	8005714 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800570c:	4b45      	ldr	r3, [pc, #276]	; (8005824 <DMA_DeInit+0x158>)
 800570e:	223d      	movs	r2, #61	; 0x3d
 8005710:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005712:	e07e      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a44      	ldr	r2, [pc, #272]	; (8005828 <DMA_DeInit+0x15c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d104      	bne.n	8005726 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800571c:	4b41      	ldr	r3, [pc, #260]	; (8005824 <DMA_DeInit+0x158>)
 800571e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005722:	609a      	str	r2, [r3, #8]
}
 8005724:	e075      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a40      	ldr	r2, [pc, #256]	; (800582c <DMA_DeInit+0x160>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d104      	bne.n	8005738 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800572e:	4b3d      	ldr	r3, [pc, #244]	; (8005824 <DMA_DeInit+0x158>)
 8005730:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005734:	609a      	str	r2, [r3, #8]
}
 8005736:	e06c      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a3d      	ldr	r2, [pc, #244]	; (8005830 <DMA_DeInit+0x164>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d104      	bne.n	800574a <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8005740:	4b38      	ldr	r3, [pc, #224]	; (8005824 <DMA_DeInit+0x158>)
 8005742:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005746:	609a      	str	r2, [r3, #8]
}
 8005748:	e063      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a39      	ldr	r2, [pc, #228]	; (8005834 <DMA_DeInit+0x168>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d103      	bne.n	800575a <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8005752:	4b34      	ldr	r3, [pc, #208]	; (8005824 <DMA_DeInit+0x158>)
 8005754:	4a38      	ldr	r2, [pc, #224]	; (8005838 <DMA_DeInit+0x16c>)
 8005756:	60da      	str	r2, [r3, #12]
}
 8005758:	e05b      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a37      	ldr	r2, [pc, #220]	; (800583c <DMA_DeInit+0x170>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d103      	bne.n	800576a <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8005762:	4b30      	ldr	r3, [pc, #192]	; (8005824 <DMA_DeInit+0x158>)
 8005764:	4a36      	ldr	r2, [pc, #216]	; (8005840 <DMA_DeInit+0x174>)
 8005766:	60da      	str	r2, [r3, #12]
}
 8005768:	e053      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a35      	ldr	r2, [pc, #212]	; (8005844 <DMA_DeInit+0x178>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d103      	bne.n	800577a <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8005772:	4b2c      	ldr	r3, [pc, #176]	; (8005824 <DMA_DeInit+0x158>)
 8005774:	4a34      	ldr	r2, [pc, #208]	; (8005848 <DMA_DeInit+0x17c>)
 8005776:	60da      	str	r2, [r3, #12]
}
 8005778:	e04b      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a33      	ldr	r2, [pc, #204]	; (800584c <DMA_DeInit+0x180>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d104      	bne.n	800578c <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8005782:	4b28      	ldr	r3, [pc, #160]	; (8005824 <DMA_DeInit+0x158>)
 8005784:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005788:	60da      	str	r2, [r3, #12]
}
 800578a:	e042      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a30      	ldr	r2, [pc, #192]	; (8005850 <DMA_DeInit+0x184>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d103      	bne.n	800579c <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8005794:	4b2f      	ldr	r3, [pc, #188]	; (8005854 <DMA_DeInit+0x188>)
 8005796:	223d      	movs	r2, #61	; 0x3d
 8005798:	609a      	str	r2, [r3, #8]
}
 800579a:	e03a      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a2e      	ldr	r2, [pc, #184]	; (8005858 <DMA_DeInit+0x18c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d104      	bne.n	80057ae <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80057a4:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <DMA_DeInit+0x188>)
 80057a6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80057aa:	609a      	str	r2, [r3, #8]
}
 80057ac:	e031      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a2a      	ldr	r2, [pc, #168]	; (800585c <DMA_DeInit+0x190>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d104      	bne.n	80057c0 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80057b6:	4b27      	ldr	r3, [pc, #156]	; (8005854 <DMA_DeInit+0x188>)
 80057b8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80057bc:	609a      	str	r2, [r3, #8]
}
 80057be:	e028      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a27      	ldr	r2, [pc, #156]	; (8005860 <DMA_DeInit+0x194>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d104      	bne.n	80057d2 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80057c8:	4b22      	ldr	r3, [pc, #136]	; (8005854 <DMA_DeInit+0x188>)
 80057ca:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80057ce:	609a      	str	r2, [r3, #8]
}
 80057d0:	e01f      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a23      	ldr	r2, [pc, #140]	; (8005864 <DMA_DeInit+0x198>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d103      	bne.n	80057e2 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80057da:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <DMA_DeInit+0x188>)
 80057dc:	4a16      	ldr	r2, [pc, #88]	; (8005838 <DMA_DeInit+0x16c>)
 80057de:	60da      	str	r2, [r3, #12]
}
 80057e0:	e017      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a20      	ldr	r2, [pc, #128]	; (8005868 <DMA_DeInit+0x19c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d103      	bne.n	80057f2 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80057ea:	4b1a      	ldr	r3, [pc, #104]	; (8005854 <DMA_DeInit+0x188>)
 80057ec:	4a14      	ldr	r2, [pc, #80]	; (8005840 <DMA_DeInit+0x174>)
 80057ee:	60da      	str	r2, [r3, #12]
}
 80057f0:	e00f      	b.n	8005812 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1d      	ldr	r2, [pc, #116]	; (800586c <DMA_DeInit+0x1a0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d103      	bne.n	8005802 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80057fa:	4b16      	ldr	r3, [pc, #88]	; (8005854 <DMA_DeInit+0x188>)
 80057fc:	4a12      	ldr	r2, [pc, #72]	; (8005848 <DMA_DeInit+0x17c>)
 80057fe:	60da      	str	r2, [r3, #12]
}
 8005800:	e007      	b.n	8005812 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1a      	ldr	r2, [pc, #104]	; (8005870 <DMA_DeInit+0x1a4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d103      	bne.n	8005812 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <DMA_DeInit+0x188>)
 800580c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005810:	60da      	str	r2, [r3, #12]
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40026010 	.word	0x40026010
 8005824:	40026000 	.word	0x40026000
 8005828:	40026028 	.word	0x40026028
 800582c:	40026040 	.word	0x40026040
 8005830:	40026058 	.word	0x40026058
 8005834:	40026070 	.word	0x40026070
 8005838:	2000003d 	.word	0x2000003d
 800583c:	40026088 	.word	0x40026088
 8005840:	20000f40 	.word	0x20000f40
 8005844:	400260a0 	.word	0x400260a0
 8005848:	203d0000 	.word	0x203d0000
 800584c:	400260b8 	.word	0x400260b8
 8005850:	40026410 	.word	0x40026410
 8005854:	40026400 	.word	0x40026400
 8005858:	40026428 	.word	0x40026428
 800585c:	40026440 	.word	0x40026440
 8005860:	40026458 	.word	0x40026458
 8005864:	40026470 	.word	0x40026470
 8005868:	40026488 	.word	0x40026488
 800586c:	400264a0 	.word	0x400264a0
 8005870:	400264b8 	.word	0x400264b8

08005874 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4b25      	ldr	r3, [pc, #148]	; (8005920 <DMA_Init+0xac>)
 800588c:	4013      	ands	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800589e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80058aa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80058b6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80058c2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0307 	bic.w	r3, r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	4313      	orrs	r3, r2
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60da      	str	r2, [r3, #12]
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	f01c803f 	.word	0xf01c803f

08005924 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	460b      	mov	r3, r1
 800599c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d006      	beq.n	80059b2 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f043 0201 	orr.w	r2, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80059b0:	e005      	b.n	80059be <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	601a      	str	r2, [r3, #0]
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d006      	beq.n	80059e8 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
  }
}
 80059e6:	e005      	b.n	80059f4 <DMA_PeriphIncOffsetSizeConfig+0x2a>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
  }
}
 8005a1c:	e005      	b.n	8005a2a <DMA_FlowControllerConfig+0x2a>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 0220 	bic.w	r2, r3, #32
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	601a      	str	r2, [r3, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8005a42:	887a      	ldrh	r2, [r7, #2]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	605a      	str	r2, [r3, #4]
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	b29b      	uxth	r3, r3
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d006      	beq.n	8005a8e <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e005      	b.n	8005a9a <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	611a      	str	r2, [r3, #16]
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d006      	beq.n	8005acc <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
  }
}
 8005aca:	e005      	b.n	8005ad8 <DMA_DoubleBufferModeCmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	611a      	str	r2, [r3, #16]
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
  }
}
 8005afc:	e002      	b.n	8005b04 <DMA_MemoryTargetConfig+0x20>
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	60da      	str	r2, [r3, #12]
}
 8005b04:	bf00      	nop
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e001      	b.n	8005b32 <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8005b32:	68fb      	ldr	r3, [r7, #12]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
 8005b5c:	e001      	b.n	8005b62 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b84:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8005b86:	68fb      	ldr	r3, [r7, #12]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <DMA_GetFlagStatus+0x6c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d802      	bhi.n	8005bb4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005bae:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <DMA_GetFlagStatus+0x70>)
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	e001      	b.n	8005bb8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <DMA_GetFlagStatus+0x74>)
 8005bb6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e002      	b.n	8005bd0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005bd6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	4013      	ands	r3, r2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8005be6:	2301      	movs	r3, #1
 8005be8:	75fb      	strb	r3, [r7, #23]
 8005bea:	e001      	b.n	8005bf0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8005bec:	2300      	movs	r3, #0
 8005bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	4002640f 	.word	0x4002640f
 8005c04:	40026000 	.word	0x40026000
 8005c08:	40026400 	.word	0x40026400

08005c0c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <DMA_ClearFlag+0x50>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d802      	bhi.n	8005c24 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005c1e:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <DMA_ClearFlag+0x54>)
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e001      	b.n	8005c28 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <DMA_ClearFlag+0x58>)
 8005c26:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005c38:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8005c40:	e006      	b.n	8005c50 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005c48:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	6093      	str	r3, [r2, #8]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	4002640f 	.word	0x4002640f
 8005c60:	40026000 	.word	0x40026000
 8005c64:	40026400 	.word	0x40026400

08005c68 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00f      	beq.n	8005ca0 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8005c80:	79fb      	ldrb	r3, [r7, #7]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d006      	beq.n	8005c94 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	615a      	str	r2, [r3, #20]
 8005c92:	e005      	b.n	8005ca0 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d014      	beq.n	8005cd0 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 031e 	and.w	r3, r3, #30
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8005cbc:	e008      	b.n	8005cd0 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f003 031e 	and.w	r3, r3, #30
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	401a      	ands	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a22      	ldr	r2, [pc, #136]	; (8005d80 <DMA_GetITStatus+0xa4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d802      	bhi.n	8005d00 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005cfa:	4b22      	ldr	r3, [pc, #136]	; (8005d84 <DMA_GetITStatus+0xa8>)
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	e001      	b.n	8005d04 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005d00:	4b21      	ldr	r3, [pc, #132]	; (8005d88 <DMA_GetITStatus+0xac>)
 8005d02:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005d0a:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	0adb      	lsrs	r3, r3, #11
 8005d16:	f003 031e 	and.w	r3, r3, #30
 8005d1a:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4013      	ands	r3, r2
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	e004      	b.n	8005d32 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e002      	b.n	8005d4a <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005d50:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <DMA_GetITStatus+0x90>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
 8005d6a:	e001      	b.n	8005d70 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	4002640f 	.word	0x4002640f
 8005d84:	40026000 	.word	0x40026000
 8005d88:	40026400 	.word	0x40026400

08005d8c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a10      	ldr	r2, [pc, #64]	; (8005ddc <DMA_ClearITPendingBit+0x50>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d802      	bhi.n	8005da4 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <DMA_ClearITPendingBit+0x54>)
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e001      	b.n	8005da8 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005da4:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <DMA_ClearITPendingBit+0x58>)
 8005da6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005db8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8005dc0:	e006      	b.n	8005dd0 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005dc8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	6093      	str	r3, [r2, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	4002640f 	.word	0x4002640f
 8005de0:	40026000 	.word	0x40026000
 8005de4:	40026400 	.word	0x40026400

08005de8 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <EXTI_DeInit+0x2c>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8005df2:	4b08      	ldr	r3, [pc, #32]	; (8005e14 <EXTI_DeInit+0x2c>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <EXTI_DeInit+0x2c>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <EXTI_DeInit+0x2c>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <EXTI_DeInit+0x2c>)
 8005e06:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <EXTI_DeInit+0x30>)
 8005e08:	615a      	str	r2, [r3, #20]
}
 8005e0a:	bf00      	nop
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	40013c00 	.word	0x40013c00
 8005e18:	007fffff 	.word	0x007fffff

08005e1c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8005e28:	4b34      	ldr	r3, [pc, #208]	; (8005efc <EXTI_Init+0xe0>)
 8005e2a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	799b      	ldrb	r3, [r3, #6]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d04f      	beq.n	8005ed4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8005e34:	4931      	ldr	r1, [pc, #196]	; (8005efc <EXTI_Init+0xe0>)
 8005e36:	4b31      	ldr	r3, [pc, #196]	; (8005efc <EXTI_Init+0xe0>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	4013      	ands	r3, r2
 8005e42:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8005e44:	492d      	ldr	r1, [pc, #180]	; (8005efc <EXTI_Init+0xe0>)
 8005e46:	4b2d      	ldr	r3, [pc, #180]	; (8005efc <EXTI_Init+0xe0>)
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	4013      	ands	r3, r2
 8005e52:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	791b      	ldrb	r3, [r3, #4]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	6811      	ldr	r1, [r2, #0]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6812      	ldr	r2, [r2, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005e6e:	4923      	ldr	r1, [pc, #140]	; (8005efc <EXTI_Init+0xe0>)
 8005e70:	4b22      	ldr	r3, [pc, #136]	; (8005efc <EXTI_Init+0xe0>)
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005e7e:	491f      	ldr	r1, [pc, #124]	; (8005efc <EXTI_Init+0xe0>)
 8005e80:	4b1e      	ldr	r3, [pc, #120]	; (8005efc <EXTI_Init+0xe0>)
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	795b      	ldrb	r3, [r3, #5]
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d10e      	bne.n	8005eb4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8005e96:	4919      	ldr	r1, [pc, #100]	; (8005efc <EXTI_Init+0xe0>)
 8005e98:	4b18      	ldr	r3, [pc, #96]	; (8005efc <EXTI_Init+0xe0>)
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8005ea4:	4915      	ldr	r1, [pc, #84]	; (8005efc <EXTI_Init+0xe0>)
 8005ea6:	4b15      	ldr	r3, [pc, #84]	; (8005efc <EXTI_Init+0xe0>)
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8005eb2:	e01d      	b.n	8005ef0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8005eb4:	4b11      	ldr	r3, [pc, #68]	; (8005efc <EXTI_Init+0xe0>)
 8005eb6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	795b      	ldrb	r3, [r3, #5]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	6811      	ldr	r1, [r2, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]
}
 8005ed2:	e00d      	b.n	8005ef0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	791b      	ldrb	r3, [r3, #4]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	6811      	ldr	r1, [r2, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6812      	ldr	r2, [r2, #0]
 8005eea:	43d2      	mvns	r2, r2
 8005eec:	400a      	ands	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	40013c00 	.word	0x40013c00

08005f00 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	220c      	movs	r2, #12
 8005f18:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	719a      	strb	r2, [r3, #6]
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8005f34:	4905      	ldr	r1, [pc, #20]	; (8005f4c <EXTI_GenerateSWInterrupt+0x20>)
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <EXTI_GenerateSWInterrupt+0x20>)
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	610b      	str	r3, [r1, #16]
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40013c00 	.word	0x40013c00

08005f50 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8005f5c:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <EXTI_GetFlagStatus+0x30>)
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
 8005f6c:	e001      	b.n	8005f72 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40013c00 	.word	0x40013c00

08005f84 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005f8c:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <EXTI_ClearFlag+0x1c>)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6153      	str	r3, [r2, #20]
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40013c00 	.word	0x40013c00

08005fa4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8005fac:	2300      	movs	r3, #0
 8005fae:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <EXTI_GetITStatus+0x44>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <EXTI_GetITStatus+0x44>)
 8005fc0:	695a      	ldr	r2, [r3, #20]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <EXTI_GetITStatus+0x32>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	73fb      	strb	r3, [r7, #15]
 8005fd4:	e001      	b.n	8005fda <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40013c00 	.word	0x40013c00

08005fec <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005ff4:	4a04      	ldr	r2, [pc, #16]	; (8006008 <EXTI_ClearITPendingBit+0x1c>)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6153      	str	r3, [r2, #20]
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40013c00 	.word	0x40013c00

0800600c <FLASH_SetLatency>:
  *          For STM32F40xx/41xx and STM32F427x/437x devices this parameter can be   
  *          a value between FLASH_Latency_0 and FLASH_Latency_7.   
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8006014:	4b04      	ldr	r3, [pc, #16]	; (8006028 <FLASH_SetLatency+0x1c>)
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	40023c00 	.word	0x40023c00

0800602c <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800603c:	4a09      	ldr	r2, [pc, #36]	; (8006064 <FLASH_PrefetchBufferCmd+0x38>)
 800603e:	4b09      	ldr	r3, [pc, #36]	; (8006064 <FLASH_PrefetchBufferCmd+0x38>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006046:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  }
}
 8006048:	e005      	b.n	8006056 <FLASH_PrefetchBufferCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800604a:	4a06      	ldr	r2, [pc, #24]	; (8006064 <FLASH_PrefetchBufferCmd+0x38>)
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <FLASH_PrefetchBufferCmd+0x38>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006054:	6013      	str	r3, [r2, #0]
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40023c00 	.word	0x40023c00

08006068 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d006      	beq.n	8006086 <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <FLASH_InstructionCacheCmd+0x38>)
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <FLASH_InstructionCacheCmd+0x38>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006082:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
  }
}
 8006084:	e005      	b.n	8006092 <FLASH_InstructionCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8006086:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <FLASH_InstructionCacheCmd+0x38>)
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <FLASH_InstructionCacheCmd+0x38>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006090:	6013      	str	r3, [r2, #0]
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40023c00 	.word	0x40023c00

080060a4 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80060b4:	4a09      	ldr	r2, [pc, #36]	; (80060dc <FLASH_DataCacheCmd+0x38>)
 80060b6:	4b09      	ldr	r3, [pc, #36]	; (80060dc <FLASH_DataCacheCmd+0x38>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060be:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
  }
}
 80060c0:	e005      	b.n	80060ce <FLASH_DataCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 80060c2:	4a06      	ldr	r2, [pc, #24]	; (80060dc <FLASH_DataCacheCmd+0x38>)
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <FLASH_DataCacheCmd+0x38>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060cc:	6013      	str	r3, [r2, #0]
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40023c00 	.word	0x40023c00

080060e0 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 80060e4:	4a05      	ldr	r2, [pc, #20]	; (80060fc <FLASH_InstructionCacheReset+0x1c>)
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <FLASH_InstructionCacheReset+0x1c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060ee:	6013      	str	r3, [r2, #0]
}
 80060f0:	bf00      	nop
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40023c00 	.word	0x40023c00

08006100 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 8006104:	4a05      	ldr	r2, [pc, #20]	; (800611c <FLASH_DataCacheReset+0x1c>)
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <FLASH_DataCacheReset+0x1c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800610e:	6013      	str	r3, [r2, #0]
}
 8006110:	bf00      	nop
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40023c00 	.word	0x40023c00

08006120 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8006124:	4b07      	ldr	r3, [pc, #28]	; (8006144 <FLASH_Unlock+0x24>)
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	da05      	bge.n	8006138 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <FLASH_Unlock+0x24>)
 800612e:	4a06      	ldr	r2, [pc, #24]	; (8006148 <FLASH_Unlock+0x28>)
 8006130:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8006132:	4b04      	ldr	r3, [pc, #16]	; (8006144 <FLASH_Unlock+0x24>)
 8006134:	4a05      	ldr	r2, [pc, #20]	; (800614c <FLASH_Unlock+0x2c>)
 8006136:	605a      	str	r2, [r3, #4]
  }  
}
 8006138:	bf00      	nop
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40023c00 	.word	0x40023c00
 8006148:	45670123 	.word	0x45670123
 800614c:	cdef89ab 	.word	0xcdef89ab

08006150 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006154:	4a05      	ldr	r2, [pc, #20]	; (800616c <FLASH_Lock+0x1c>)
 8006156:	4b05      	ldr	r3, [pc, #20]	; (800616c <FLASH_Lock+0x1c>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800615e:	6113      	str	r3, [r2, #16]
}
 8006160:	bf00      	nop
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40023c00 	.word	0x40023c00

08006170 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8006180:	2308      	movs	r3, #8
 8006182:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d102      	bne.n	8006190 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	e010      	b.n	80061b2 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d103      	bne.n	800619e <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e009      	b.n	80061b2 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d103      	bne.n	80061ac <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80061a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	e002      	b.n	80061b2 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80061ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80061b0:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80061b2:	f000 fb09 	bl	80067c8 <FLASH_WaitForLastOperation>
 80061b6:	4603      	mov	r3, r0
 80061b8:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 80061ba:	7afb      	ldrb	r3, [r7, #11]
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d12f      	bne.n	8006220 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80061c0:	4a1a      	ldr	r2, [pc, #104]	; (800622c <FLASH_EraseSector+0xbc>)
 80061c2:	4b1a      	ldr	r3, [pc, #104]	; (800622c <FLASH_EraseSector+0xbc>)
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ca:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 80061cc:	4917      	ldr	r1, [pc, #92]	; (800622c <FLASH_EraseSector+0xbc>)
 80061ce:	4b17      	ldr	r3, [pc, #92]	; (800622c <FLASH_EraseSector+0xbc>)
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 80061d8:	4a14      	ldr	r2, [pc, #80]	; (800622c <FLASH_EraseSector+0xbc>)
 80061da:	4b14      	ldr	r3, [pc, #80]	; (800622c <FLASH_EraseSector+0xbc>)
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061e2:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 80061e4:	4911      	ldr	r1, [pc, #68]	; (800622c <FLASH_EraseSector+0xbc>)
 80061e6:	4b11      	ldr	r3, [pc, #68]	; (800622c <FLASH_EraseSector+0xbc>)
 80061e8:	691a      	ldr	r2, [r3, #16]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f043 0302 	orr.w	r3, r3, #2
 80061f2:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80061f4:	4a0d      	ldr	r2, [pc, #52]	; (800622c <FLASH_EraseSector+0xbc>)
 80061f6:	4b0d      	ldr	r3, [pc, #52]	; (800622c <FLASH_EraseSector+0xbc>)
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fe:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006200:	f000 fae2 	bl	80067c8 <FLASH_WaitForLastOperation>
 8006204:	4603      	mov	r3, r0
 8006206:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8006208:	4a08      	ldr	r2, [pc, #32]	; (800622c <FLASH_EraseSector+0xbc>)
 800620a:	4b08      	ldr	r3, [pc, #32]	; (800622c <FLASH_EraseSector+0xbc>)
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f023 0302 	bic.w	r3, r3, #2
 8006212:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8006214:	4a05      	ldr	r2, [pc, #20]	; (800622c <FLASH_EraseSector+0xbc>)
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <FLASH_EraseSector+0xbc>)
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800621e:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8006220:	7afb      	ldrb	r3, [r7, #11]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40023c00 	.word	0x40023c00

08006230 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800623e:	2308      	movs	r3, #8
 8006240:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006242:	f000 fac1 	bl	80067c8 <FLASH_WaitForLastOperation>
 8006246:	4603      	mov	r3, r0
 8006248:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <FLASH_EraseAllSectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e010      	b.n	8006278 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d103      	bne.n	8006264 <FLASH_EraseAllSectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800625c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e009      	b.n	8006278 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d103      	bne.n	8006272 <FLASH_EraseAllSectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800626a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e002      	b.n	8006278 <FLASH_EraseAllSectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006272:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006276:	60fb      	str	r3, [r7, #12]
    FLASH->CR &= (~FLASH_CR_MER);
#endif /* STM32F40XX */

  }   
  /* Return the Erase Status */
  return status;
 8006278:	7afb      	ldrb	r3, [r7, #11]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 8006282:	b590      	push	{r4, r7, lr}
 8006284:	b087      	sub	sp, #28
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 800628e:	2308      	movs	r3, #8
 8006290:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006292:	f000 fa99 	bl	80067c8 <FLASH_WaitForLastOperation>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b08      	cmp	r3, #8
 800629e:	d120      	bne.n	80062e2 <FLASH_ProgramDoubleWord+0x60>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80062a0:	4a12      	ldr	r2, [pc, #72]	; (80062ec <FLASH_ProgramDoubleWord+0x6a>)
 80062a2:	4b12      	ldr	r3, [pc, #72]	; (80062ec <FLASH_ProgramDoubleWord+0x6a>)
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062aa:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80062ac:	4a0f      	ldr	r2, [pc, #60]	; (80062ec <FLASH_ProgramDoubleWord+0x6a>)
 80062ae:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <FLASH_ProgramDoubleWord+0x6a>)
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80062b6:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 80062b8:	4a0c      	ldr	r2, [pc, #48]	; (80062ec <FLASH_ProgramDoubleWord+0x6a>)
 80062ba:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <FLASH_ProgramDoubleWord+0x6a>)
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	6113      	str	r3, [r2, #16]
  
    *(__IO uint64_t*)Address = Data;
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	e897 0018 	ldmia.w	r7, {r3, r4}
 80062ca:	e882 0018 	stmia.w	r2, {r3, r4}
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80062ce:	f000 fa7b 	bl	80067c8 <FLASH_WaitForLastOperation>
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80062d6:	4a05      	ldr	r2, [pc, #20]	; (80062ec <FLASH_ProgramDoubleWord+0x6a>)
 80062d8:	4b04      	ldr	r3, [pc, #16]	; (80062ec <FLASH_ProgramDoubleWord+0x6a>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd90      	pop	{r4, r7, pc}
 80062ec:	40023c00 	.word	0x40023c00

080062f0 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 80062fa:	2308      	movs	r3, #8
 80062fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80062fe:	f000 fa63 	bl	80067c8 <FLASH_WaitForLastOperation>
 8006302:	4603      	mov	r3, r0
 8006304:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d11e      	bne.n	800634a <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800630c:	4a11      	ldr	r2, [pc, #68]	; (8006354 <FLASH_ProgramWord+0x64>)
 800630e:	4b11      	ldr	r3, [pc, #68]	; (8006354 <FLASH_ProgramWord+0x64>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006316:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8006318:	4a0e      	ldr	r2, [pc, #56]	; (8006354 <FLASH_ProgramWord+0x64>)
 800631a:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <FLASH_ProgramWord+0x64>)
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006322:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006324:	4a0b      	ldr	r2, [pc, #44]	; (8006354 <FLASH_ProgramWord+0x64>)
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <FLASH_ProgramWord+0x64>)
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006336:	f000 fa47 	bl	80067c8 <FLASH_WaitForLastOperation>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800633e:	4a05      	ldr	r2, [pc, #20]	; (8006354 <FLASH_ProgramWord+0x64>)
 8006340:	4b04      	ldr	r3, [pc, #16]	; (8006354 <FLASH_ProgramWord+0x64>)
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40023c00 	.word	0x40023c00

08006358 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8006364:	2308      	movs	r3, #8
 8006366:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006368:	f000 fa2e 	bl	80067c8 <FLASH_WaitForLastOperation>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b08      	cmp	r3, #8
 8006374:	d11e      	bne.n	80063b4 <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006376:	4a12      	ldr	r2, [pc, #72]	; (80063c0 <FLASH_ProgramHalfWord+0x68>)
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <FLASH_ProgramHalfWord+0x68>)
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006380:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006382:	4a0f      	ldr	r2, [pc, #60]	; (80063c0 <FLASH_ProgramHalfWord+0x68>)
 8006384:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <FLASH_ProgramHalfWord+0x68>)
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800638c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 800638e:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <FLASH_ProgramHalfWord+0x68>)
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <FLASH_ProgramHalfWord+0x68>)
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	887a      	ldrh	r2, [r7, #2]
 800639e:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80063a0:	f000 fa12 	bl	80067c8 <FLASH_WaitForLastOperation>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80063a8:	4a05      	ldr	r2, [pc, #20]	; (80063c0 <FLASH_ProgramHalfWord+0x68>)
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <FLASH_ProgramHalfWord+0x68>)
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40023c00 	.word	0x40023c00

080063c4 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 80063d0:	2308      	movs	r3, #8
 80063d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80063d4:	f000 f9f8 	bl	80067c8 <FLASH_WaitForLastOperation>
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d11c      	bne.n	800641c <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80063e2:	4a11      	ldr	r2, [pc, #68]	; (8006428 <FLASH_ProgramByte+0x64>)
 80063e4:	4b10      	ldr	r3, [pc, #64]	; (8006428 <FLASH_ProgramByte+0x64>)
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ec:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 80063ee:	4a0e      	ldr	r2, [pc, #56]	; (8006428 <FLASH_ProgramByte+0x64>)
 80063f0:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <FLASH_ProgramByte+0x64>)
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 80063f6:	4a0c      	ldr	r2, [pc, #48]	; (8006428 <FLASH_ProgramByte+0x64>)
 80063f8:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <FLASH_ProgramByte+0x64>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	6113      	str	r3, [r2, #16]
  
    *(__IO uint8_t*)Address = Data;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006408:	f000 f9de 	bl	80067c8 <FLASH_WaitForLastOperation>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006410:	4a05      	ldr	r2, [pc, #20]	; (8006428 <FLASH_ProgramByte+0x64>)
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <FLASH_ProgramByte+0x64>)
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	6113      	str	r3, [r2, #16]
  } 

  /* Return the Program Status */
  return status;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40023c00 	.word	0x40023c00

0800642c <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8006430:	4b08      	ldr	r3, [pc, #32]	; (8006454 <FLASH_OB_Unlock+0x28>)
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <FLASH_OB_Unlock+0x1c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800643c:	4b05      	ldr	r3, [pc, #20]	; (8006454 <FLASH_OB_Unlock+0x28>)
 800643e:	4a06      	ldr	r2, [pc, #24]	; (8006458 <FLASH_OB_Unlock+0x2c>)
 8006440:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8006442:	4b04      	ldr	r3, [pc, #16]	; (8006454 <FLASH_OB_Unlock+0x28>)
 8006444:	4a05      	ldr	r2, [pc, #20]	; (800645c <FLASH_OB_Unlock+0x30>)
 8006446:	609a      	str	r2, [r3, #8]
  }  
}
 8006448:	bf00      	nop
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	40023c00 	.word	0x40023c00
 8006458:	08192a3b 	.word	0x08192a3b
 800645c:	4c5d6e7f 	.word	0x4c5d6e7f

08006460 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8006464:	4a05      	ldr	r2, [pc, #20]	; (800647c <FLASH_OB_Lock+0x1c>)
 8006466:	4b05      	ldr	r3, [pc, #20]	; (800647c <FLASH_OB_Lock+0x1c>)
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6153      	str	r3, [r2, #20]
}
 8006470:	bf00      	nop
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40023c00 	.word	0x40023c00

08006480 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800648c:	2308      	movs	r3, #8
 800648e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8006490:	f000 f99a 	bl	80067c8 <FLASH_WaitForLastOperation>
 8006494:	4603      	mov	r3, r0
 8006496:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b08      	cmp	r3, #8
 800649c:	d117      	bne.n	80064ce <FLASH_OB_WRPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <FLASH_OB_WRPConfig+0x3c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 80064a4:	490c      	ldr	r1, [pc, #48]	; (80064d8 <FLASH_OB_WRPConfig+0x58>)
 80064a6:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <FLASH_OB_WRPConfig+0x58>)
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	4013      	ands	r3, r2
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    }
  }
}
 80064ba:	e008      	b.n	80064ce <FLASH_OB_WRPConfig+0x4e>
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 80064bc:	4906      	ldr	r1, [pc, #24]	; (80064d8 <FLASH_OB_WRPConfig+0x58>)
 80064be:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <FLASH_OB_WRPConfig+0x58>)
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	4313      	orrs	r3, r2
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	800b      	strh	r3, [r1, #0]
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40023c16 	.word	0x40023c16

080064dc <FLASH_OB_WRP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
{ 
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 80064e8:	2308      	movs	r3, #8
 80064ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 80064ec:	f000 f96c 	bl	80067c8 <FLASH_WaitForLastOperation>
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d117      	bne.n	800652a <FLASH_OB_WRP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <FLASH_OB_WRP1Config+0x3c>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 8006500:	490c      	ldr	r1, [pc, #48]	; (8006534 <FLASH_OB_WRP1Config+0x58>)
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <FLASH_OB_WRP1Config+0x58>)
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29a      	uxth	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	b29b      	uxth	r3, r3
 800650c:	43db      	mvns	r3, r3
 800650e:	b29b      	uxth	r3, r3
 8006510:	4013      	ands	r3, r2
 8006512:	b29b      	uxth	r3, r3
 8006514:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    }
  }
}
 8006516:	e008      	b.n	800652a <FLASH_OB_WRP1Config+0x4e>
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8006518:	4906      	ldr	r1, [pc, #24]	; (8006534 <FLASH_OB_WRP1Config+0x58>)
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <FLASH_OB_WRP1Config+0x58>)
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	b29b      	uxth	r3, r3
 8006524:	4313      	orrs	r3, r2
 8006526:	b29b      	uxth	r3, r3
 8006528:	800b      	strh	r3, [r1, #0]
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40023c1a 	.word	0x40023c1a

08006538 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 8006542:	2308      	movs	r3, #8
 8006544:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 8006546:	f000 f93f 	bl	80067c8 <FLASH_WaitForLastOperation>
 800654a:	4603      	mov	r3, r0
 800654c:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	2b08      	cmp	r3, #8
 8006552:	d102      	bne.n	800655a <FLASH_OB_RDPConfig+0x22>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 8006554:	4a03      	ldr	r2, [pc, #12]	; (8006564 <FLASH_OB_RDPConfig+0x2c>)
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	7013      	strb	r3, [r2, #0]

  }
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40023c15 	.word	0x40023c15

08006568 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	71fb      	strb	r3, [r7, #7]
 8006572:	460b      	mov	r3, r1
 8006574:	71bb      	strb	r3, [r7, #6]
 8006576:	4613      	mov	r3, r2
 8006578:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800657a:	23ff      	movs	r3, #255	; 0xff
 800657c:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 800657e:	2308      	movs	r3, #8
 8006580:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006582:	f000 f921 	bl	80067c8 <FLASH_WaitForLastOperation>
 8006586:	4603      	mov	r3, r0
 8006588:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	2b08      	cmp	r3, #8
 800658e:	d111      	bne.n	80065b4 <FLASH_OB_UserConfig+0x4c>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <FLASH_OB_UserConfig+0x54>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 800659c:	4907      	ldr	r1, [pc, #28]	; (80065bc <FLASH_OB_UserConfig+0x54>)
 800659e:	79ba      	ldrb	r2, [r7, #6]
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	797b      	ldrb	r3, [r7, #5]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	700b      	strb	r3, [r1, #0]
  }  
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40023c14 	.word	0x40023c14

080065c0 <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80065ca:	4a0b      	ldr	r2, [pc, #44]	; (80065f8 <FLASH_OB_BORConfig+0x38>)
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <FLASH_OB_BORConfig+0x38>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f023 030c 	bic.w	r3, r3, #12
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 80065da:	4907      	ldr	r1, [pc, #28]	; (80065f8 <FLASH_OB_BORConfig+0x38>)
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <FLASH_OB_BORConfig+0x38>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	700b      	strb	r3, [r1, #0]

}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40023c14 	.word	0x40023c14

080065fc <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 8006602:	2308      	movs	r3, #8
 8006604:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8006606:	4a08      	ldr	r2, [pc, #32]	; (8006628 <FLASH_OB_Launch+0x2c>)
 8006608:	4b07      	ldr	r3, [pc, #28]	; (8006628 <FLASH_OB_Launch+0x2c>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f043 0302 	orr.w	r3, r3, #2
 8006612:	b2db      	uxtb	r3, r3
 8006614:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006616:	f000 f8d7 	bl	80067c8 <FLASH_WaitForLastOperation>
 800661a:	4603      	mov	r3, r0
 800661c:	71fb      	strb	r3, [r7, #7]

  return status;
 800661e:	79fb      	ldrb	r3, [r7, #7]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40023c14 	.word	0x40023c14

0800662c <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 8006630:	4b04      	ldr	r3, [pc, #16]	; (8006644 <FLASH_OB_GetUser+0x18>)
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	b2db      	uxtb	r3, r3
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40023c00 	.word	0x40023c00

08006648 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800664c:	4b03      	ldr	r3, [pc, #12]	; (800665c <FLASH_OB_GetWRP+0x14>)
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
}
 8006652:	4618      	mov	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	40023c16 	.word	0x40023c16

08006660 <FLASH_OB_GetWRP1>:
  * @note   This function can be used only for STM32F427x/437x devices.  
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP1(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 8006664:	4b03      	ldr	r3, [pc, #12]	; (8006674 <FLASH_OB_GetWRP1+0x14>)
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	40023c1a 	.word	0x40023c1a

08006678 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 800667e:	2300      	movs	r3, #0
 8006680:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <FLASH_OB_GetRDP+0x2c>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2baa      	cmp	r3, #170	; 0xaa
 800668a:	d002      	beq.n	8006692 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = SET;
 800668c:	2301      	movs	r3, #1
 800668e:	71fb      	strb	r3, [r7, #7]
 8006690:	e001      	b.n	8006696 <FLASH_OB_GetRDP+0x1e>
  }
  else
  {
    readstatus = RESET;
 8006692:	2300      	movs	r3, #0
 8006694:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 8006696:	79fb      	ldrb	r3, [r7, #7]
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	40023c15 	.word	0x40023c15

080066a8 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <FLASH_OB_GetBOR+0x1c>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f003 030c 	and.w	r3, r3, #12
 80066b6:	b2db      	uxtb	r3, r3
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	40023c14 	.word	0x40023c14

080066c8 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <FLASH_ITConfig+0x20>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80066da:	490a      	ldr	r1, [pc, #40]	; (8006704 <FLASH_ITConfig+0x3c>)
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <FLASH_ITConfig+0x3c>)
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	610b      	str	r3, [r1, #16]
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
  }
}
 80066e6:	e006      	b.n	80066f6 <FLASH_ITConfig+0x2e>
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 80066e8:	4906      	ldr	r1, [pc, #24]	; (8006704 <FLASH_ITConfig+0x3c>)
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <FLASH_ITConfig+0x3c>)
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	43db      	mvns	r3, r3
 80066f2:	4013      	ands	r3, r2
 80066f4:	610b      	str	r3, [r1, #16]
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40023c00 	.word	0x40023c00

08006708 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8006710:	2300      	movs	r3, #0
 8006712:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8006714:	4b08      	ldr	r3, [pc, #32]	; (8006738 <FLASH_GetFlagStatus+0x30>)
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4013      	ands	r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <FLASH_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8006720:	2301      	movs	r3, #1
 8006722:	73fb      	strb	r3, [r7, #15]
 8006724:	e001      	b.n	800672a <FLASH_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8006726:	2300      	movs	r3, #0
 8006728:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 800672a:	7bfb      	ldrb	r3, [r7, #15]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	40023c00 	.word	0x40023c00

0800673c <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag  
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8006744:	4a04      	ldr	r2, [pc, #16]	; (8006758 <FLASH_ClearFlag+0x1c>)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60d3      	str	r3, [r2, #12]
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40023c00 	.word	0x40023c00

0800675c <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8006762:	2308      	movs	r3, #8
 8006764:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006766:	4b17      	ldr	r3, [pc, #92]	; (80067c4 <FLASH_GetStatus+0x68>)
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006772:	d102      	bne.n	800677a <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY;
 8006774:	2301      	movs	r3, #1
 8006776:	71fb      	strb	r3, [r7, #7]
 8006778:	e01c      	b.n	80067b4 <FLASH_GetStatus+0x58>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800677a:	4b12      	ldr	r3, [pc, #72]	; (80067c4 <FLASH_GetStatus+0x68>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f003 0310 	and.w	r3, r3, #16
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8006786:	2305      	movs	r3, #5
 8006788:	71fb      	strb	r3, [r7, #7]
 800678a:	e013      	b.n	80067b4 <FLASH_GetStatus+0x58>
    }
    else
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 800678c:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <FLASH_GetStatus+0x68>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <FLASH_GetStatus+0x42>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8006798:	2306      	movs	r3, #6
 800679a:	71fb      	strb	r3, [r7, #7]
 800679c:	e00a      	b.n	80067b4 <FLASH_GetStatus+0x58>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800679e:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <FLASH_GetStatus+0x68>)
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 80067aa:	2307      	movs	r3, #7
 80067ac:	71fb      	strb	r3, [r7, #7]
 80067ae:	e001      	b.n	80067b4 <FLASH_GetStatus+0x58>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 80067b0:	2308      	movs	r3, #8
 80067b2:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 80067b4:	79fb      	ldrb	r3, [r7, #7]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40023c00 	.word	0x40023c00

080067c8 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 80067ce:	2308      	movs	r3, #8
 80067d0:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80067d2:	f7ff ffc3 	bl	800675c <FLASH_GetStatus>
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80067da:	e003      	b.n	80067e4 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 80067dc:	f7ff ffbe 	bl	800675c <FLASH_GetStatus>
 80067e0:	4603      	mov	r3, r0
 80067e2:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY)
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d0f7      	beq.n	80067dc <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	b2db      	uxtb	r3, r3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d107      	bne.n	8006816 <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 8006806:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f243 01db 	movw	r1, #12507	; 0x30db
 8006810:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8006814:	e006      	b.n	8006824 <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 8006816:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8006820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8006824:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3301      	adds	r3, #1
 800682c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006830:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8006834:	4a05      	ldr	r2, [pc, #20]	; (800684c <FSMC_NORSRAMDeInit+0x54>)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800683c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	a0000104 	.word	0xa0000104

08006850 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8006858:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6851      	ldr	r1, [r2, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6892      	ldr	r2, [r2, #8]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8006868:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68d2      	ldr	r2, [r2, #12]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800686e:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6912      	ldr	r2, [r2, #16]
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8006874:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6952      	ldr	r2, [r2, #20]
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 800687a:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6992      	ldr	r2, [r2, #24]
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8006880:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	69d2      	ldr	r2, [r2, #28]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8006886:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6a12      	ldr	r2, [r2, #32]
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800688c:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6a52      	ldr	r2, [r2, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8006892:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6a92      	ldr	r2, [r2, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8006898:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 800689e:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 80068a4:	430a      	orrs	r2, r1
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80068a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d10d      	bne.n	80068ce <FSMC_NORSRAMInit+0x7e>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 80068b2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80068c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80068ce:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3301      	adds	r3, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068dc:	6811      	ldr	r1, [r2, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068e2:	6852      	ldr	r2, [r2, #4]
 80068e4:	0112      	lsls	r2, r2, #4
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80068e6:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068ec:	6892      	ldr	r2, [r2, #8]
 80068ee:	0212      	lsls	r2, r2, #8
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 80068f0:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068f6:	68d2      	ldr	r2, [r2, #12]
 80068f8:	0412      	lsls	r2, r2, #16
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 80068fa:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006900:	6912      	ldr	r2, [r2, #16]
 8006902:	0512      	lsls	r2, r2, #20
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8006904:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800690a:	6952      	ldr	r2, [r2, #20]
 800690c:	0612      	lsls	r2, r2, #24
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 800690e:	4311      	orrs	r1, r2
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006914:	6992      	ldr	r2, [r2, #24]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8006916:	430a      	orrs	r2, r1
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8006918:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006924:	d120      	bne.n	8006968 <FSMC_NORSRAMInit+0x118>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8006926:	4817      	ldr	r0, [pc, #92]	; (8006984 <FSMC_NORSRAMInit+0x134>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006930:	6811      	ldr	r1, [r2, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006936:	6852      	ldr	r2, [r2, #4]
 8006938:	0112      	lsls	r2, r2, #4
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800693a:	4311      	orrs	r1, r2
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006940:	6892      	ldr	r2, [r2, #8]
 8006942:	0212      	lsls	r2, r2, #8
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8006944:	4311      	orrs	r1, r2
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800694a:	6912      	ldr	r2, [r2, #16]
 800694c:	0512      	lsls	r2, r2, #20
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 800694e:	4311      	orrs	r1, r2
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006954:	6952      	ldr	r2, [r2, #20]
 8006956:	0612      	lsls	r2, r2, #24
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8006958:	4311      	orrs	r1, r2
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800695e:	6992      	ldr	r2, [r2, #24]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8006960:	430a      	orrs	r2, r1
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8006962:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
  }
}
 8006966:	e006      	b.n	8006976 <FSMC_NORSRAMInit+0x126>
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8006968:	4a06      	ldr	r2, [pc, #24]	; (8006984 <FSMC_NORSRAMInit+0x134>)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006972:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	a0000104 	.word	0xa0000104

08006988 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069cc:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069d4:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e6:	220f      	movs	r2, #15
 80069e8:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ee:	220f      	movs	r2, #15
 80069f0:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f6:	22ff      	movs	r2, #255	; 0xff
 80069f8:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fe:	220f      	movs	r2, #15
 8006a00:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	220f      	movs	r2, #15
 8006a08:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0e:	220f      	movs	r2, #15
 8006a10:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a16:	2200      	movs	r2, #0
 8006a18:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	220f      	movs	r2, #15
 8006a20:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	220f      	movs	r2, #15
 8006a28:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	22ff      	movs	r2, #255	; 0xff
 8006a30:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	220f      	movs	r2, #15
 8006a38:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	220f      	movs	r2, #15
 8006a40:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	220f      	movs	r2, #15
 8006a48:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	2200      	movs	r2, #0
 8006a50:	619a      	str	r2, [r3, #24]
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	460b      	mov	r3, r1
 8006a68:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <FSMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 8006a70:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8006a74:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a7e:	f043 0201 	orr.w	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
  }
}
 8006a88:	e00b      	b.n	8006aa2 <FSMC_NORSRAMCmd+0x44>
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8006a8a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8006a8e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <FSMC_NORSRAMCmd+0x52>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	000ffffe 	.word	0x000ffffe

08006ab4 <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b10      	cmp	r3, #16
 8006ac0:	d10e      	bne.n	8006ae0 <FSMC_NANDDeInit+0x2c>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8006ac2:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <FSMC_NANDDeInit+0x54>)
 8006ac4:	2218      	movs	r2, #24
 8006ac6:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <FSMC_NANDDeInit+0x54>)
 8006aca:	2240      	movs	r2, #64	; 0x40
 8006acc:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 8006ace:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <FSMC_NANDDeInit+0x54>)
 8006ad0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006ad4:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8006ad6:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <FSMC_NANDDeInit+0x54>)
 8006ad8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006adc:	60da      	str	r2, [r3, #12]
    FSMC_Bank3->PCR3 = 0x00000018;
    FSMC_Bank3->SR3 = 0x00000040;
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
  }  
}
 8006ade:	e00d      	b.n	8006afc <FSMC_NANDDeInit+0x48>
    FSMC_Bank3->PCR3 = 0x00000018;
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <FSMC_NANDDeInit+0x58>)
 8006ae2:	2218      	movs	r2, #24
 8006ae4:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8006ae6:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <FSMC_NANDDeInit+0x58>)
 8006ae8:	2240      	movs	r2, #64	; 0x40
 8006aea:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8006aec:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <FSMC_NANDDeInit+0x58>)
 8006aee:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006af2:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <FSMC_NANDDeInit+0x58>)
 8006af6:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006afa:	60da      	str	r2, [r3, #12]
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	a0000060 	.word	0xa0000060
 8006b0c:	a0000080 	.word	0xa0000080

08006b10 <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8006b18:	2300      	movs	r3, #0
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
            PCR_MEMORYTYPE_NAND |
 8006b2c:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8006b32:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
            FSMC_NANDInitStruct->FSMC_ECC |
 8006b38:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	025b      	lsls	r3, r3, #9
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8006b40:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	035b      	lsls	r3, r3, #13
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8006b48:	4313      	orrs	r3, r2
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8006b4a:	f043 0308 	orr.w	r3, r3, #8
 8006b4e:	617b      	str	r3, [r7, #20]
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	021b      	lsls	r3, r3, #8
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006b5e:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	041b      	lsls	r3, r3, #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006b68:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	061b      	lsls	r3, r3, #24
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	021b      	lsls	r3, r3, #8
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006b84:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	041b      	lsls	r3, r3, #16
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006b8e:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	061b      	lsls	r3, r3, #24
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d109      	bne.n	8006bb8 <FSMC_NANDInit+0xa8>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8006ba4:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <FSMC_NANDInit+0xc8>)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	6013      	str	r3, [r2, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 8006baa:	4a0b      	ldr	r2, [pc, #44]	; (8006bd8 <FSMC_NANDInit+0xc8>)
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6093      	str	r3, [r2, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 8006bb0:	4a09      	ldr	r2, [pc, #36]	; (8006bd8 <FSMC_NANDInit+0xc8>)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	60d3      	str	r3, [r2, #12]
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
    FSMC_Bank3->PMEM3 = tmppmem;
    FSMC_Bank3->PATT3 = tmppatt;
  }
}
 8006bb6:	e008      	b.n	8006bca <FSMC_NANDInit+0xba>
    FSMC_Bank3->PCR3 = tmppcr;
 8006bb8:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <FSMC_NANDInit+0xcc>)
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	6013      	str	r3, [r2, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8006bbe:	4a07      	ldr	r2, [pc, #28]	; (8006bdc <FSMC_NANDInit+0xcc>)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6093      	str	r3, [r2, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8006bc4:	4a05      	ldr	r2, [pc, #20]	; (8006bdc <FSMC_NANDInit+0xcc>)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	60d3      	str	r3, [r2, #12]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	a0000060 	.word	0xa0000060
 8006bdc:	a0000080 	.word	0xa0000080

08006be0 <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2210      	movs	r2, #16
 8006bec:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	22fc      	movs	r2, #252	; 0xfc
 8006c18:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	22fc      	movs	r2, #252	; 0xfc
 8006c20:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	22fc      	movs	r2, #252	; 0xfc
 8006c28:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	22fc      	movs	r2, #252	; 0xfc
 8006c30:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	22fc      	movs	r2, #252	; 0xfc
 8006c38:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	22fc      	movs	r2, #252	; 0xfc
 8006c40:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	22fc      	movs	r2, #252	; 0xfc
 8006c48:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	22fc      	movs	r2, #252	; 0xfc
 8006c50:	60da      	str	r2, [r3, #12]
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d010      	beq.n	8006c92 <FSMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b10      	cmp	r3, #16
 8006c74:	d106      	bne.n	8006c84 <FSMC_NANDCmd+0x26>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8006c76:	4a12      	ldr	r2, [pc, #72]	; (8006cc0 <FSMC_NANDCmd+0x62>)
 8006c78:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <FSMC_NANDCmd+0x62>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f043 0304 	orr.w	r3, r3, #4
 8006c80:	6013      	str	r3, [r2, #0]
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
    }
  }
}
 8006c82:	e016      	b.n	8006cb2 <FSMC_NANDCmd+0x54>
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8006c84:	4a0f      	ldr	r2, [pc, #60]	; (8006cc4 <FSMC_NANDCmd+0x66>)
 8006c86:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <FSMC_NANDCmd+0x66>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f043 0304 	orr.w	r3, r3, #4
 8006c8e:	6013      	str	r3, [r2, #0]
}
 8006c90:	e00f      	b.n	8006cb2 <FSMC_NANDCmd+0x54>
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d106      	bne.n	8006ca6 <FSMC_NANDCmd+0x48>
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8006c98:	4909      	ldr	r1, [pc, #36]	; (8006cc0 <FSMC_NANDCmd+0x62>)
 8006c9a:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <FSMC_NANDCmd+0x62>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <FSMC_NANDCmd+0x6a>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	600b      	str	r3, [r1, #0]
}
 8006ca4:	e005      	b.n	8006cb2 <FSMC_NANDCmd+0x54>
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8006ca6:	4907      	ldr	r1, [pc, #28]	; (8006cc4 <FSMC_NANDCmd+0x66>)
 8006ca8:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <FSMC_NANDCmd+0x66>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <FSMC_NANDCmd+0x6a>)
 8006cae:	4013      	ands	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	a0000060 	.word	0xa0000060
 8006cc4:	a0000080 	.word	0xa0000080
 8006cc8:	000ffffb 	.word	0x000ffffb

08006ccc <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d010      	beq.n	8006d00 <FSMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b10      	cmp	r3, #16
 8006ce2:	d106      	bne.n	8006cf2 <FSMC_NANDECCCmd+0x26>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8006ce4:	4a11      	ldr	r2, [pc, #68]	; (8006d2c <FSMC_NANDECCCmd+0x60>)
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <FSMC_NANDECCCmd+0x60>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cee:	6013      	str	r3, [r2, #0]
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
    }
  }
}
 8006cf0:	e016      	b.n	8006d20 <FSMC_NANDECCCmd+0x54>
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8006cf2:	4a0f      	ldr	r2, [pc, #60]	; (8006d30 <FSMC_NANDECCCmd+0x64>)
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <FSMC_NANDECCCmd+0x64>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfc:	6013      	str	r3, [r2, #0]
}
 8006cfe:	e00f      	b.n	8006d20 <FSMC_NANDECCCmd+0x54>
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b10      	cmp	r3, #16
 8006d04:	d106      	bne.n	8006d14 <FSMC_NANDECCCmd+0x48>
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8006d06:	4909      	ldr	r1, [pc, #36]	; (8006d2c <FSMC_NANDECCCmd+0x60>)
 8006d08:	4b08      	ldr	r3, [pc, #32]	; (8006d2c <FSMC_NANDECCCmd+0x60>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <FSMC_NANDECCCmd+0x68>)
 8006d0e:	4013      	ands	r3, r2
 8006d10:	600b      	str	r3, [r1, #0]
}
 8006d12:	e005      	b.n	8006d20 <FSMC_NANDECCCmd+0x54>
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8006d14:	4906      	ldr	r1, [pc, #24]	; (8006d30 <FSMC_NANDECCCmd+0x64>)
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <FSMC_NANDECCCmd+0x64>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <FSMC_NANDECCCmd+0x68>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	600b      	str	r3, [r1, #0]
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	a0000060 	.word	0xa0000060
 8006d30:	a0000080 	.word	0xa0000080
 8006d34:	000fffbf 	.word	0x000fffbf

08006d38 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b10      	cmp	r3, #16
 8006d48:	d103      	bne.n	8006d52 <FSMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8006d4a:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <FSMC_GetECC+0x30>)
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e002      	b.n	8006d58 <FSMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <FSMC_GetECC+0x34>)
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8006d58:	68fb      	ldr	r3, [r7, #12]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	a0000060 	.word	0xa0000060
 8006d6c:	a0000080 	.word	0xa0000080

08006d70 <FSMC_PCCARDDeInit>:
  * @brief  De-initializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8006d74:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <FSMC_PCCARDDeInit+0x34>)
 8006d76:	2218      	movs	r2, #24
 8006d78:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <FSMC_PCCARDDeInit+0x34>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8006d80:	4b08      	ldr	r3, [pc, #32]	; (8006da4 <FSMC_PCCARDDeInit+0x34>)
 8006d82:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006d86:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8006d88:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <FSMC_PCCARDDeInit+0x34>)
 8006d8a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006d8e:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 8006d90:	4b04      	ldr	r3, [pc, #16]	; (8006da4 <FSMC_PCCARDDeInit+0x34>)
 8006d92:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006d96:	611a      	str	r2, [r3, #16]
}
 8006d98:	bf00      	nop
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	a00000a0 	.word	0xa00000a0

08006da8 <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8006db0:	4927      	ldr	r1, [pc, #156]	; (8006e50 <FSMC_PCCARDInit+0xa8>)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681a      	ldr	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	025b      	lsls	r3, r3, #9
                     FSMC_MemoryDataWidth_16b |  
 8006dbc:	431a      	orrs	r2, r3
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	035b      	lsls	r3, r3, #13
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f043 0310 	orr.w	r3, r3, #16
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8006dca:	600b      	str	r3, [r1, #0]
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006dcc:	4920      	ldr	r1, [pc, #128]	; (8006e50 <FSMC_PCCARDInit+0xa8>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	021b      	lsls	r3, r3, #8
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006ddc:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	041b      	lsls	r3, r3, #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006de6:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	061b      	lsls	r3, r3, #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006df0:	4313      	orrs	r3, r2
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006df2:	608b      	str	r3, [r1, #8]
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006df4:	4916      	ldr	r1, [pc, #88]	; (8006e50 <FSMC_PCCARDInit+0xa8>)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	681a      	ldr	r2, [r3, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	021b      	lsls	r3, r3, #8
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006e04:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	041b      	lsls	r3, r3, #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006e0e:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	061b      	lsls	r3, r3, #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006e18:	4313      	orrs	r3, r2
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006e1a:	60cb      	str	r3, [r1, #12]
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8006e1c:	490c      	ldr	r1, [pc, #48]	; (8006e50 <FSMC_PCCARDInit+0xa8>)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	681a      	ldr	r2, [r3, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	021b      	lsls	r3, r3, #8
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8006e2c:	431a      	orrs	r2, r3
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	041b      	lsls	r3, r3, #16
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006e36:	431a      	orrs	r2, r3
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	061b      	lsls	r3, r3, #24
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006e40:	4313      	orrs	r3, r2
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8006e42:	610b      	str	r3, [r1, #16]
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	a00000a0 	.word	0xa00000a0

08006e54 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	22fc      	movs	r2, #252	; 0xfc
 8006e74:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	22fc      	movs	r2, #252	; 0xfc
 8006e7c:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	22fc      	movs	r2, #252	; 0xfc
 8006e84:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	22fc      	movs	r2, #252	; 0xfc
 8006e8c:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	22fc      	movs	r2, #252	; 0xfc
 8006e94:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	22fc      	movs	r2, #252	; 0xfc
 8006e9c:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	22fc      	movs	r2, #252	; 0xfc
 8006ea4:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	22fc      	movs	r2, #252	; 0xfc
 8006eac:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	22fc      	movs	r2, #252	; 0xfc
 8006eb4:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	22fc      	movs	r2, #252	; 0xfc
 8006ebc:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	22fc      	movs	r2, #252	; 0xfc
 8006ec4:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	22fc      	movs	r2, #252	; 0xfc
 8006ecc:	60da      	str	r2, [r3, #12]
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d006      	beq.n	8006ef8 <FSMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8006eea:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <FSMC_PCCARDCmd+0x36>)
 8006eec:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <FSMC_PCCARDCmd+0x36>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f043 0304 	orr.w	r3, r3, #4
 8006ef4:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
  }
}
 8006ef6:	e005      	b.n	8006f04 <FSMC_PCCARDCmd+0x2a>
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8006ef8:	4905      	ldr	r1, [pc, #20]	; (8006f10 <FSMC_PCCARDCmd+0x36>)
 8006efa:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <FSMC_PCCARDCmd+0x36>)
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <FSMC_PCCARDCmd+0x3a>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	600b      	str	r3, [r1, #0]
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	a00000a0 	.word	0xa00000a0
 8006f14:	000ffffb 	.word	0x000ffffb

08006f18 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01b      	beq.n	8006f64 <FSMC_ITConfig+0x4c>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d106      	bne.n	8006f40 <FSMC_ITConfig+0x28>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 8006f32:	491e      	ldr	r1, [pc, #120]	; (8006fac <FSMC_ITConfig+0x94>)
 8006f34:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <FSMC_ITConfig+0x94>)
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	604b      	str	r3, [r1, #4]
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
    }
  }
}
 8006f3e:	e02f      	b.n	8006fa0 <FSMC_ITConfig+0x88>
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f46:	d106      	bne.n	8006f56 <FSMC_ITConfig+0x3e>
      FSMC_Bank3->SR3 |= FSMC_IT;
 8006f48:	4919      	ldr	r1, [pc, #100]	; (8006fb0 <FSMC_ITConfig+0x98>)
 8006f4a:	4b19      	ldr	r3, [pc, #100]	; (8006fb0 <FSMC_ITConfig+0x98>)
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	604b      	str	r3, [r1, #4]
}
 8006f54:	e024      	b.n	8006fa0 <FSMC_ITConfig+0x88>
      FSMC_Bank4->SR4 |= FSMC_IT;    
 8006f56:	4917      	ldr	r1, [pc, #92]	; (8006fb4 <FSMC_ITConfig+0x9c>)
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <FSMC_ITConfig+0x9c>)
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	604b      	str	r3, [r1, #4]
}
 8006f62:	e01d      	b.n	8006fa0 <FSMC_ITConfig+0x88>
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d107      	bne.n	8006f7a <FSMC_ITConfig+0x62>
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 8006f6a:	4910      	ldr	r1, [pc, #64]	; (8006fac <FSMC_ITConfig+0x94>)
 8006f6c:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <FSMC_ITConfig+0x94>)
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	43db      	mvns	r3, r3
 8006f74:	4013      	ands	r3, r2
 8006f76:	604b      	str	r3, [r1, #4]
}
 8006f78:	e012      	b.n	8006fa0 <FSMC_ITConfig+0x88>
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f80:	d107      	bne.n	8006f92 <FSMC_ITConfig+0x7a>
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8006f82:	490b      	ldr	r1, [pc, #44]	; (8006fb0 <FSMC_ITConfig+0x98>)
 8006f84:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <FSMC_ITConfig+0x98>)
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	43db      	mvns	r3, r3
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	604b      	str	r3, [r1, #4]
}
 8006f90:	e006      	b.n	8006fa0 <FSMC_ITConfig+0x88>
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8006f92:	4908      	ldr	r1, [pc, #32]	; (8006fb4 <FSMC_ITConfig+0x9c>)
 8006f94:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <FSMC_ITConfig+0x9c>)
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	604b      	str	r3, [r1, #4]
}
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	a0000060 	.word	0xa0000060
 8006fb0:	a0000080 	.word	0xa0000080
 8006fb4:	a00000a0 	.word	0xa00000a0

08006fb8 <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d103      	bne.n	8006fd8 <FSMC_GetFlagStatus+0x20>
  {
    tmpsr = FSMC_Bank2->SR2;
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <FSMC_GetFlagStatus+0x58>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	60bb      	str	r3, [r7, #8]
 8006fd6:	e00a      	b.n	8006fee <FSMC_GetFlagStatus+0x36>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fde:	d103      	bne.n	8006fe8 <FSMC_GetFlagStatus+0x30>
  {
    tmpsr = FSMC_Bank3->SR3;
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <FSMC_GetFlagStatus+0x5c>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	e002      	b.n	8006fee <FSMC_GetFlagStatus+0x36>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <FSMC_GetFlagStatus+0x60>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <FSMC_GetFlagStatus+0x46>
  {
    bitstatus = SET;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
 8006ffc:	e001      	b.n	8007002 <FSMC_GetFlagStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	a0000060 	.word	0xa0000060
 8007014:	a0000080 	.word	0xa0000080
 8007018:	a00000a0 	.word	0xa00000a0

0800701c <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b10      	cmp	r3, #16
 800702a:	d107      	bne.n	800703c <FSMC_ClearFlag+0x20>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 800702c:	4910      	ldr	r1, [pc, #64]	; (8007070 <FSMC_ClearFlag+0x54>)
 800702e:	4b10      	ldr	r3, [pc, #64]	; (8007070 <FSMC_ClearFlag+0x54>)
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	43db      	mvns	r3, r3
 8007036:	4013      	ands	r3, r2
 8007038:	604b      	str	r3, [r1, #4]
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
  }
}
 800703a:	e012      	b.n	8007062 <FSMC_ClearFlag+0x46>
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007042:	d107      	bne.n	8007054 <FSMC_ClearFlag+0x38>
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8007044:	490b      	ldr	r1, [pc, #44]	; (8007074 <FSMC_ClearFlag+0x58>)
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <FSMC_ClearFlag+0x58>)
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	43db      	mvns	r3, r3
 800704e:	4013      	ands	r3, r2
 8007050:	604b      	str	r3, [r1, #4]
}
 8007052:	e006      	b.n	8007062 <FSMC_ClearFlag+0x46>
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8007054:	4908      	ldr	r1, [pc, #32]	; (8007078 <FSMC_ClearFlag+0x5c>)
 8007056:	4b08      	ldr	r3, [pc, #32]	; (8007078 <FSMC_ClearFlag+0x5c>)
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	43db      	mvns	r3, r3
 800705e:	4013      	ands	r3, r2
 8007060:	604b      	str	r3, [r1, #4]
}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	a0000060 	.word	0xa0000060
 8007074:	a0000080 	.word	0xa0000080
 8007078:	a00000a0 	.word	0xa00000a0

0800707c <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8007086:	2300      	movs	r3, #0
 8007088:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 800708a:	2300      	movs	r3, #0
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	2300      	movs	r3, #0
 8007094:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b10      	cmp	r3, #16
 800709a:	d103      	bne.n	80070a4 <FSMC_GetITStatus+0x28>
  {
    tmpsr = FSMC_Bank2->SR2;
 800709c:	4b14      	ldr	r3, [pc, #80]	; (80070f0 <FSMC_GetITStatus+0x74>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	e00a      	b.n	80070ba <FSMC_GetITStatus+0x3e>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070aa:	d103      	bne.n	80070b4 <FSMC_GetITStatus+0x38>
  {
    tmpsr = FSMC_Bank3->SR3;
 80070ac:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <FSMC_GetITStatus+0x78>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	e002      	b.n	80070ba <FSMC_GetITStatus+0x3e>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80070b4:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <FSMC_GetITStatus+0x7c>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	4013      	ands	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	08da      	lsrs	r2, r3, #3
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	4013      	ands	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <FSMC_GetITStatus+0x62>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <FSMC_GetITStatus+0x62>
  {
    bitstatus = SET;
 80070d8:	2301      	movs	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
 80070dc:	e001      	b.n	80070e2 <FSMC_GetITStatus+0x66>
  }
  else
  {
    bitstatus = RESET;
 80070de:	2300      	movs	r3, #0
 80070e0:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	a0000060 	.word	0xa0000060
 80070f4:	a0000080 	.word	0xa0000080
 80070f8:	a00000a0 	.word	0xa00000a0

080070fc <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b10      	cmp	r3, #16
 800710a:	d108      	bne.n	800711e <FSMC_ClearITPendingBit+0x22>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 800710c:	4911      	ldr	r1, [pc, #68]	; (8007154 <FSMC_ClearITPendingBit+0x58>)
 800710e:	4b11      	ldr	r3, [pc, #68]	; (8007154 <FSMC_ClearITPendingBit+0x58>)
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	08db      	lsrs	r3, r3, #3
 8007116:	43db      	mvns	r3, r3
 8007118:	4013      	ands	r3, r2
 800711a:	604b      	str	r3, [r1, #4]
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
  }
}
 800711c:	e014      	b.n	8007148 <FSMC_ClearITPendingBit+0x4c>
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007124:	d108      	bne.n	8007138 <FSMC_ClearITPendingBit+0x3c>
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8007126:	490c      	ldr	r1, [pc, #48]	; (8007158 <FSMC_ClearITPendingBit+0x5c>)
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <FSMC_ClearITPendingBit+0x5c>)
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	43db      	mvns	r3, r3
 8007132:	4013      	ands	r3, r2
 8007134:	604b      	str	r3, [r1, #4]
}
 8007136:	e007      	b.n	8007148 <FSMC_ClearITPendingBit+0x4c>
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8007138:	4908      	ldr	r1, [pc, #32]	; (800715c <FSMC_ClearITPendingBit+0x60>)
 800713a:	4b08      	ldr	r3, [pc, #32]	; (800715c <FSMC_ClearITPendingBit+0x60>)
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	08db      	lsrs	r3, r3, #3
 8007142:	43db      	mvns	r3, r3
 8007144:	4013      	ands	r3, r2
 8007146:	604b      	str	r3, [r1, #4]
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	a0000060 	.word	0xa0000060
 8007158:	a0000080 	.word	0xa0000080
 800715c:	a00000a0 	.word	0xa00000a0

08007160 <GPIO_DeInit>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a3c      	ldr	r2, [pc, #240]	; (800725c <GPIO_DeInit+0xfc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d108      	bne.n	8007182 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8007170:	2101      	movs	r1, #1
 8007172:	2001      	movs	r0, #1
 8007174:	f002 f994 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8007178:	2100      	movs	r1, #0
 800717a:	2001      	movs	r0, #1
 800717c:	f002 f990 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8007180:	e068      	b.n	8007254 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOB)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a36      	ldr	r2, [pc, #216]	; (8007260 <GPIO_DeInit+0x100>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d108      	bne.n	800719c <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800718a:	2101      	movs	r1, #1
 800718c:	2002      	movs	r0, #2
 800718e:	f002 f987 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8007192:	2100      	movs	r1, #0
 8007194:	2002      	movs	r0, #2
 8007196:	f002 f983 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
}
 800719a:	e05b      	b.n	8007254 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOC)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a31      	ldr	r2, [pc, #196]	; (8007264 <GPIO_DeInit+0x104>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d108      	bne.n	80071b6 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80071a4:	2101      	movs	r1, #1
 80071a6:	2004      	movs	r0, #4
 80071a8:	f002 f97a 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80071ac:	2100      	movs	r1, #0
 80071ae:	2004      	movs	r0, #4
 80071b0:	f002 f976 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
}
 80071b4:	e04e      	b.n	8007254 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOD)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a2b      	ldr	r2, [pc, #172]	; (8007268 <GPIO_DeInit+0x108>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d108      	bne.n	80071d0 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80071be:	2101      	movs	r1, #1
 80071c0:	2008      	movs	r0, #8
 80071c2:	f002 f96d 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80071c6:	2100      	movs	r1, #0
 80071c8:	2008      	movs	r0, #8
 80071ca:	f002 f969 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
}
 80071ce:	e041      	b.n	8007254 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a26      	ldr	r2, [pc, #152]	; (800726c <GPIO_DeInit+0x10c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d108      	bne.n	80071ea <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80071d8:	2101      	movs	r1, #1
 80071da:	2010      	movs	r0, #16
 80071dc:	f002 f960 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80071e0:	2100      	movs	r1, #0
 80071e2:	2010      	movs	r0, #16
 80071e4:	f002 f95c 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
}
 80071e8:	e034      	b.n	8007254 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOF)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a20      	ldr	r2, [pc, #128]	; (8007270 <GPIO_DeInit+0x110>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d108      	bne.n	8007204 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80071f2:	2101      	movs	r1, #1
 80071f4:	2020      	movs	r0, #32
 80071f6:	f002 f953 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80071fa:	2100      	movs	r1, #0
 80071fc:	2020      	movs	r0, #32
 80071fe:	f002 f94f 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
}
 8007202:	e027      	b.n	8007254 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOG)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a1b      	ldr	r2, [pc, #108]	; (8007274 <GPIO_DeInit+0x114>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d108      	bne.n	800721e <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800720c:	2101      	movs	r1, #1
 800720e:	2040      	movs	r0, #64	; 0x40
 8007210:	f002 f946 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8007214:	2100      	movs	r1, #0
 8007216:	2040      	movs	r0, #64	; 0x40
 8007218:	f002 f942 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
}
 800721c:	e01a      	b.n	8007254 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOH)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a15      	ldr	r2, [pc, #84]	; (8007278 <GPIO_DeInit+0x118>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d108      	bne.n	8007238 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8007226:	2101      	movs	r1, #1
 8007228:	2080      	movs	r0, #128	; 0x80
 800722a:	f002 f939 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800722e:	2100      	movs	r1, #0
 8007230:	2080      	movs	r0, #128	; 0x80
 8007232:	f002 f935 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
}
 8007236:	e00d      	b.n	8007254 <GPIO_DeInit+0xf4>
    if (GPIOx == GPIOI)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a10      	ldr	r2, [pc, #64]	; (800727c <GPIO_DeInit+0x11c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d109      	bne.n	8007254 <GPIO_DeInit+0xf4>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8007240:	2101      	movs	r1, #1
 8007242:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007246:	f002 f92b 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800724a:	2100      	movs	r1, #0
 800724c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007250:	f002 f926 	bl	80094a0 <RCC_AHB1PeriphResetCmd>
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40020000 	.word	0x40020000
 8007260:	40020400 	.word	0x40020400
 8007264:	40020800 	.word	0x40020800
 8007268:	40020c00 	.word	0x40020c00
 800726c:	40021000 	.word	0x40021000
 8007270:	40021400 	.word	0x40021400
 8007274:	40021800 	.word	0x40021800
 8007278:	40021c00 	.word	0x40021c00
 800727c:	40022000 	.word	0x40022000

08007280 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	2300      	movs	r3, #0
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	e076      	b.n	800738a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800729c:	2201      	movs	r2, #1
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	fa02 f303 	lsl.w	r3, r2, r3
 80072a4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	4013      	ands	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d165      	bne.n	8007384 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	2103      	movs	r1, #3
 80072c2:	fa01 f303 	lsl.w	r3, r1, r3
 80072c6:	43db      	mvns	r3, r3
 80072c8:	401a      	ands	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	791b      	ldrb	r3, [r3, #4]
 80072d6:	4619      	mov	r1, r3
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	fa01 f303 	lsl.w	r3, r1, r3
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	791b      	ldrb	r3, [r3, #4]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d003      	beq.n	80072f6 <GPIO_Init+0x76>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	791b      	ldrb	r3, [r3, #4]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d12e      	bne.n	8007354 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689a      	ldr	r2, [r3, #8]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	2103      	movs	r1, #3
 8007300:	fa01 f303 	lsl.w	r3, r1, r3
 8007304:	43db      	mvns	r3, r3
 8007306:	401a      	ands	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	795b      	ldrb	r3, [r3, #5]
 8007314:	4619      	mov	r1, r3
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	fa01 f303 	lsl.w	r3, r1, r3
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	b29b      	uxth	r3, r3
 800732c:	4619      	mov	r1, r3
 800732e:	2301      	movs	r3, #1
 8007330:	408b      	lsls	r3, r1
 8007332:	43db      	mvns	r3, r3
 8007334:	401a      	ands	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	7992      	ldrb	r2, [r2, #6]
 8007342:	4611      	mov	r1, r2
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	b292      	uxth	r2, r2
 8007348:	fa01 f202 	lsl.w	r2, r1, r2
 800734c:	b292      	uxth	r2, r2
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	b29b      	uxth	r3, r3
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	2103      	movs	r1, #3
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	43db      	mvns	r3, r3
 8007366:	401a      	ands	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	79db      	ldrb	r3, [r3, #7]
 8007374:	4619      	mov	r1, r3
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	fa01 f303 	lsl.w	r3, r1, r3
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	3301      	adds	r3, #1
 8007388:	617b      	str	r3, [r7, #20]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b0f      	cmp	r3, #15
 800738e:	d985      	bls.n	800729c <GPIO_Init+0x1c>
    }
  }
}
 8007390:	bf00      	nop
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	71da      	strb	r2, [r3, #7]
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 80073dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80073e2:	887a      	ldrh	r2, [r7, #2]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80073f0:	887a      	ldrh	r2, [r7, #2]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	60fb      	str	r3, [r7, #12]
}
 8007408:	bf00      	nop
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691a      	ldr	r2, [r3, #16]
 8007428:	887b      	ldrh	r3, [r7, #2]
 800742a:	4013      	ands	r3, r2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8007430:	2301      	movs	r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
 8007434:	e001      	b.n	800743a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <GPIO_ReadInputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	b29b      	uxth	r3, r3
}
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007462:	b480      	push	{r7}
 8007464:	b085      	sub	sp, #20
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	460b      	mov	r3, r1
 800746c:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695a      	ldr	r2, [r3, #20]
 8007476:	887b      	ldrh	r3, [r7, #2]
 8007478:	4013      	ands	r3, r2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
 8007482:	e001      	b.n	8007488 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <GPIO_ReadOutputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	b29b      	uxth	r3, r3
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	887a      	ldrh	r2, [r7, #2]
 80074c0:	831a      	strh	r2, [r3, #24]
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	887a      	ldrh	r2, [r7, #2]
 80074de:	835a      	strh	r2, [r3, #26]
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	807b      	strh	r3, [r7, #2]
 80074f8:	4613      	mov	r3, r2
 80074fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80074fc:	787b      	ldrb	r3, [r7, #1]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	887a      	ldrh	r2, [r7, #2]
 8007506:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8007508:	e002      	b.n	8007510 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	887a      	ldrh	r2, [r7, #2]
 800750e:	835a      	strh	r2, [r3, #26]
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <GPIO_Write>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8007528:	887a      	ldrh	r2, [r7, #2]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	615a      	str	r2, [r3, #20]
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	695a      	ldr	r2, [r3, #20]
 800754a:	887b      	ldrh	r3, [r7, #2]
 800754c:	405a      	eors	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	615a      	str	r2, [r3, #20]
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	807b      	strh	r3, [r7, #2]
 800756a:	4613      	mov	r3, r2
 800756c:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8007572:	2300      	movs	r3, #0
 8007574:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007576:	787a      	ldrb	r2, [r7, #1]
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007586:	887b      	ldrh	r3, [r7, #2]
 8007588:	08db      	lsrs	r3, r3, #3
 800758a:	b29b      	uxth	r3, r3
 800758c:	4618      	mov	r0, r3
 800758e:	887b      	ldrh	r3, [r7, #2]
 8007590:	08db      	lsrs	r3, r3, #3
 8007592:	b29b      	uxth	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3208      	adds	r2, #8
 800759a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800759e:	887b      	ldrh	r3, [r7, #2]
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	210f      	movs	r1, #15
 80075a8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ac:	43db      	mvns	r3, r3
 80075ae:	ea02 0103 	and.w	r1, r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f100 0208 	add.w	r2, r0, #8
 80075b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80075bc:	887b      	ldrh	r3, [r7, #2]
 80075be:	08db      	lsrs	r3, r3, #3
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	461a      	mov	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3208      	adds	r2, #8
 80075c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80075d2:	887b      	ldrh	r3, [r7, #2]
 80075d4:	08db      	lsrs	r3, r3, #3
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3208      	adds	r2, #8
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HASH_DeInit>:
  * @brief  De-initializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 80075f4:	2101      	movs	r1, #1
 80075f6:	2020      	movs	r0, #32
 80075f8:	f001 ff72 	bl	80094e0 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 80075fc:	2100      	movs	r1, #0
 80075fe:	2020      	movs	r0, #32
 8007600:	f001 ff6e 	bl	80094e0 <RCC_AHB2PeriphResetCmd>
}
 8007604:	bf00      	nop
 8007606:	bd80      	pop	{r7, pc}

08007608 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8007610:	4a18      	ldr	r2, [pc, #96]	; (8007674 <HASH_Init+0x6c>)
 8007612:	4b18      	ldr	r3, [pc, #96]	; (8007674 <HASH_Init+0x6c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800761a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800761e:	6013      	str	r3, [r2, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8007620:	4814      	ldr	r0, [pc, #80]	; (8007674 <HASH_Init+0x6c>)
 8007622:	4b14      	ldr	r3, [pc, #80]	; (8007674 <HASH_Init+0x6c>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6819      	ldr	r1, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800762e:	4319      	orrs	r1, r3
               HASH_InitStruct->HASH_AlgoMode);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
               HASH_InitStruct->HASH_DataType | \
 8007634:	430b      	orrs	r3, r1
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8007636:	4313      	orrs	r3, r2
 8007638:	6003      	str	r3, [r0, #0]
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b40      	cmp	r3, #64	; 0x40
 8007640:	d10c      	bne.n	800765c <HASH_Init+0x54>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 8007642:	4a0c      	ldr	r2, [pc, #48]	; (8007674 <HASH_Init+0x6c>)
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <HASH_Init+0x6c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800764c:	6013      	str	r3, [r2, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 800764e:	4909      	ldr	r1, [pc, #36]	; (8007674 <HASH_Init+0x6c>)
 8007650:	4b08      	ldr	r3, [pc, #32]	; (8007674 <HASH_Init+0x6c>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	4313      	orrs	r3, r2
 800765a:	600b      	str	r3, [r1, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 800765c:	4a05      	ldr	r2, [pc, #20]	; (8007674 <HASH_Init+0x6c>)
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <HASH_Init+0x6c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f043 0304 	orr.w	r3, r3, #4
 8007666:	6013      	str	r3, [r2, #0]
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	50060400 	.word	0x50060400

08007678 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	60da      	str	r2, [r3, #12]
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 80076a8:	4a05      	ldr	r2, [pc, #20]	; (80076c0 <HASH_Reset+0x1c>)
 80076aa:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <HASH_Reset+0x1c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f043 0304 	orr.w	r3, r3, #4
 80076b2:	6013      	str	r3, [r2, #0]
}
 80076b4:	bf00      	nop
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	50060400 	.word	0x50060400

080076c4 <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 80076ce:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <HASH_SetLastWordValidBitsNbr+0x30>)
 80076d0:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <HASH_SetLastWordValidBitsNbr+0x30>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f023 031f 	bic.w	r3, r3, #31
 80076d8:	6093      	str	r3, [r2, #8]
  HASH->STR |= ValidNumber;
 80076da:	4906      	ldr	r1, [pc, #24]	; (80076f4 <HASH_SetLastWordValidBitsNbr+0x30>)
 80076dc:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <HASH_SetLastWordValidBitsNbr+0x30>)
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	608b      	str	r3, [r1, #8]
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	50060400 	.word	0x50060400

080076f8 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 8007700:	4a04      	ldr	r2, [pc, #16]	; (8007714 <HASH_DataIn+0x1c>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6053      	str	r3, [r2, #4]
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	50060400 	.word	0x50060400

08007718 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <HASH_GetInFIFOWordsNbr+0x1c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	0a1b      	lsrs	r3, r3, #8
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 030f 	and.w	r3, r3, #15
 8007728:	b2db      	uxtb	r3, r3
}
 800772a:	4618      	mov	r0, r3
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	50060400 	.word	0x50060400

08007738 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8007740:	4b12      	ldr	r3, [pc, #72]	; (800778c <HASH_GetDigest+0x54>)
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 8007748:	4b10      	ldr	r3, [pc, #64]	; (800778c <HASH_GetDigest+0x54>)
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 8007750:	4b0e      	ldr	r3, [pc, #56]	; (800778c <HASH_GetDigest+0x54>)
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 8007758:	4b0c      	ldr	r3, [pc, #48]	; (800778c <HASH_GetDigest+0x54>)
 800775a:	699a      	ldr	r2, [r3, #24]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 8007760:	4b0a      	ldr	r3, [pc, #40]	; (800778c <HASH_GetDigest+0x54>)
 8007762:	69da      	ldr	r2, [r3, #28]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	611a      	str	r2, [r3, #16]
  HASH_MessageDigest->Data[5] = HASH_DIGEST->HR[5];
 8007768:	4b09      	ldr	r3, [pc, #36]	; (8007790 <HASH_GetDigest+0x58>)
 800776a:	695a      	ldr	r2, [r3, #20]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	615a      	str	r2, [r3, #20]
  HASH_MessageDigest->Data[6] = HASH_DIGEST->HR[6];
 8007770:	4b07      	ldr	r3, [pc, #28]	; (8007790 <HASH_GetDigest+0x58>)
 8007772:	699a      	ldr	r2, [r3, #24]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	619a      	str	r2, [r3, #24]
  HASH_MessageDigest->Data[7] = HASH_DIGEST->HR[7];
 8007778:	4b05      	ldr	r3, [pc, #20]	; (8007790 <HASH_GetDigest+0x58>)
 800777a:	69da      	ldr	r2, [r3, #28]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	61da      	str	r2, [r3, #28]
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	50060400 	.word	0x50060400
 8007790:	50060710 	.word	0x50060710

08007794 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 8007798:	4a05      	ldr	r2, [pc, #20]	; (80077b0 <HASH_StartDigest+0x1c>)
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <HASH_StartDigest+0x1c>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a2:	6093      	str	r3, [r2, #8]
}
 80077a4:	bf00      	nop
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	50060400 	.word	0x50060400

080077b4 <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 80077c0:	4b12      	ldr	r3, [pc, #72]	; (800780c <HASH_SaveContext+0x58>)
 80077c2:	6a1a      	ldr	r2, [r3, #32]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 80077c8:	4b10      	ldr	r3, [pc, #64]	; (800780c <HASH_SaveContext+0x58>)
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 80077d0:	4b0e      	ldr	r3, [pc, #56]	; (800780c <HASH_SaveContext+0x58>)
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	609a      	str	r2, [r3, #8]
  for(i=0; i<=53;i++)
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]
 80077dc:	e00d      	b.n	80077fa <HASH_SaveContext+0x46>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	490a      	ldr	r1, [pc, #40]	; (800780c <HASH_SaveContext+0x58>)
 80077e2:	7bfa      	ldrb	r2, [r7, #15]
 80077e4:	323e      	adds	r2, #62	; 0x3e
 80077e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	3302      	adds	r3, #2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	605a      	str	r2, [r3, #4]
  for(i=0; i<=53;i++)
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	3301      	adds	r3, #1
 80077f8:	73fb      	strb	r3, [r7, #15]
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b35      	cmp	r3, #53	; 0x35
 80077fe:	d9ee      	bls.n	80077de <HASH_SaveContext+0x2a>
  }   
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	50060400 	.word	0x50060400

08007810 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 800781c:	4a16      	ldr	r2, [pc, #88]	; (8007878 <HASH_RestoreContext+0x68>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6213      	str	r3, [r2, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 8007824:	4a14      	ldr	r2, [pc, #80]	; (8007878 <HASH_RestoreContext+0x68>)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	6093      	str	r3, [r2, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800782c:	4a12      	ldr	r2, [pc, #72]	; (8007878 <HASH_RestoreContext+0x68>)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	6013      	str	r3, [r2, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 8007834:	4a10      	ldr	r2, [pc, #64]	; (8007878 <HASH_RestoreContext+0x68>)
 8007836:	4b10      	ldr	r3, [pc, #64]	; (8007878 <HASH_RestoreContext+0x68>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f043 0304 	orr.w	r3, r3, #4
 800783e:	6013      	str	r3, [r2, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 8007840:	2300      	movs	r3, #0
 8007842:	73fb      	strb	r3, [r7, #15]
 8007844:	e00e      	b.n	8007864 <HASH_RestoreContext+0x54>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 8007846:	480c      	ldr	r0, [pc, #48]	; (8007878 <HASH_RestoreContext+0x68>)
 8007848:	7bf9      	ldrb	r1, [r7, #15]
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	3302      	adds	r3, #2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	f101 033e 	add.w	r3, r1, #62	; 0x3e
 800785a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for(i=0; i<=53;i++)
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	3301      	adds	r3, #1
 8007862:	73fb      	strb	r3, [r7, #15]
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	2b35      	cmp	r3, #53	; 0x35
 8007868:	d9ed      	bls.n	8007846 <HASH_RestoreContext+0x36>
  }   
}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	50060400 	.word	0x50060400

0800787c <HASH_AutoStartDigest>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_AutoStartDigest(FunctionalState NewState)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d006      	beq.n	800789a <HASH_AutoStartDigest+0x1e>
  {
    /* Enable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR &= ~HASH_CR_MDMAT;
 800788c:	4a09      	ldr	r2, [pc, #36]	; (80078b4 <HASH_AutoStartDigest+0x38>)
 800788e:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <HASH_AutoStartDigest+0x38>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007896:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR |= HASH_CR_MDMAT;
  }
}
 8007898:	e005      	b.n	80078a6 <HASH_AutoStartDigest+0x2a>
    HASH->CR |= HASH_CR_MDMAT;
 800789a:	4a06      	ldr	r2, [pc, #24]	; (80078b4 <HASH_AutoStartDigest+0x38>)
 800789c:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <HASH_AutoStartDigest+0x38>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078a4:	6013      	str	r3, [r2, #0]
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	50060400 	.word	0x50060400

080078b8 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d006      	beq.n	80078d6 <HASH_DMACmd+0x1e>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 80078c8:	4a09      	ldr	r2, [pc, #36]	; (80078f0 <HASH_DMACmd+0x38>)
 80078ca:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <HASH_DMACmd+0x38>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f043 0308 	orr.w	r3, r3, #8
 80078d2:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
  }
}
 80078d4:	e005      	b.n	80078e2 <HASH_DMACmd+0x2a>
    HASH->CR &= ~HASH_CR_DMAE;
 80078d6:	4a06      	ldr	r2, [pc, #24]	; (80078f0 <HASH_DMACmd+0x38>)
 80078d8:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <HASH_DMACmd+0x38>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f023 0308 	bic.w	r3, r3, #8
 80078e0:	6013      	str	r3, [r2, #0]
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	50060400 	.word	0x50060400

080078f4 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d006      	beq.n	8007914 <HASH_ITConfig+0x20>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8007906:	490a      	ldr	r1, [pc, #40]	; (8007930 <HASH_ITConfig+0x3c>)
 8007908:	4b09      	ldr	r3, [pc, #36]	; (8007930 <HASH_ITConfig+0x3c>)
 800790a:	6a1a      	ldr	r2, [r3, #32]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4313      	orrs	r3, r2
 8007910:	620b      	str	r3, [r1, #32]
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint32_t)(~HASH_IT);
  }
}
 8007912:	e006      	b.n	8007922 <HASH_ITConfig+0x2e>
    HASH->IMR &= (uint32_t)(~HASH_IT);
 8007914:	4906      	ldr	r1, [pc, #24]	; (8007930 <HASH_ITConfig+0x3c>)
 8007916:	4b06      	ldr	r3, [pc, #24]	; (8007930 <HASH_ITConfig+0x3c>)
 8007918:	6a1a      	ldr	r2, [r3, #32]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	43db      	mvns	r3, r3
 800791e:	4013      	ands	r3, r2
 8007920:	620b      	str	r3, [r1, #32]
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	50060400 	.word	0x50060400

08007934 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint32_t)RESET ) 
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HASH_GetFlagStatus+0x22>
  {
    tempreg = HASH->CR;
 800794e:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <HASH_GetFlagStatus+0x4c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	60bb      	str	r3, [r7, #8]
 8007954:	e002      	b.n	800795c <HASH_GetFlagStatus+0x28>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 8007956:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <HASH_GetFlagStatus+0x4c>)
 8007958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795a:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint32_t)RESET)
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4013      	ands	r3, r2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <HASH_GetFlagStatus+0x38>
  {
    /* HASH is set */
    bitstatus = SET;
 8007966:	2301      	movs	r3, #1
 8007968:	73fb      	strb	r3, [r7, #15]
 800796a:	e001      	b.n	8007970 <HASH_GetFlagStatus+0x3c>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 800796c:	2300      	movs	r3, #0
 800796e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	50060400 	.word	0x50060400

08007984 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint32_t HASH_FLAG)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 800798c:	4a04      	ldr	r2, [pc, #16]	; (80079a0 <HASH_ClearFlag+0x1c>)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	43db      	mvns	r3, r3
 8007992:	6253      	str	r3, [r2, #36]	; 0x24
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	50060400 	.word	0x50060400

080079a4 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint32_t HASH_IT)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 80079b4:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <HASH_GetITStatus+0x40>)
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 80079ba:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <HASH_GetITStatus+0x40>)
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	401a      	ands	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4013      	ands	r3, r2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HASH_GetITStatus+0x2c>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 80079ca:	2301      	movs	r3, #1
 80079cc:	73fb      	strb	r3, [r7, #15]
 80079ce:	e001      	b.n	80079d4 <HASH_GetITStatus+0x30>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	50060400 	.word	0x50060400

080079e8 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint32_t HASH_IT)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint32_t)(~HASH_IT);
 80079f0:	4a04      	ldr	r2, [pc, #16]	; (8007a04 <HASH_ClearITPendingBit+0x1c>)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	43db      	mvns	r3, r3
 80079f6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	50060400 	.word	0x50060400

08007a08 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b09c      	sub	sp, #112	; 0x70
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	837b      	strh	r3, [r7, #26]
  uint32_t i = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	f003 0303 	and.w	r3, r3, #3
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	837b      	strh	r3, [r7, #26]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8007a42:	f7ff fdd5 	bl	80075f0 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8007a46:	2380      	movs	r3, #128	; 0x80
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	643b      	str	r3, [r7, #64]	; 0x40
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8007a4e:	2320      	movs	r3, #32
 8007a50:	647b      	str	r3, [r7, #68]	; 0x44
  HASH_Init(&MD5_HASH_InitStructure);
 8007a52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fdd6 	bl	8007608 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8007a5c:	8b7b      	ldrh	r3, [r7, #26]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff fe2f 	bl	80076c4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8007a66:	2300      	movs	r3, #0
 8007a68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a6a:	e00a      	b.n	8007a82 <HASH_MD5+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8007a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff fe41 	bl	80076f8 <HASH_DataIn>
    inputaddr+=4;
 8007a76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a78:	3304      	adds	r3, #4
 8007a7a:	667b      	str	r3, [r7, #100]	; 0x64
  for(i=0; i<Ilen; i+=4)
 8007a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7e:	3304      	adds	r3, #4
 8007a80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d3f0      	bcc.n	8007a6c <HASH_MD5+0x64>
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8007a8a:	f7ff fe83 	bl	8007794 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007a8e:	2008      	movs	r0, #8
 8007a90:	f7ff ff50 	bl	8007934 <HASH_GetFlagStatus>
 8007a94:	4603      	mov	r3, r0
 8007a96:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa4:	d002      	beq.n	8007aac <HASH_MD5+0xa4>
 8007aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1f0      	bne.n	8007a8e <HASH_MD5+0x86>

  if (busystatus != RESET)
 8007aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HASH_MD5+0xb2>
  {
     status = ERROR;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8007ab8:	e025      	b.n	8007b06 <HASH_MD5+0xfe>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 8007aba:	f107 031c 	add.w	r3, r7, #28
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fe3a 	bl	8007738 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8007ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007aca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007acc:	ba12      	rev	r2, r2
 8007ace:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8007ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad8:	6a3a      	ldr	r2, [r7, #32]
 8007ada:	653a      	str	r2, [r7, #80]	; 0x50
 8007adc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ade:	ba12      	rev	r2, r2
 8007ae0:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8007ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aec:	657a      	str	r2, [r7, #84]	; 0x54
 8007aee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007af0:	ba12      	rev	r2, r2
 8007af2:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007af6:	3304      	adds	r3, #4
 8007af8:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8007afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007afe:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b02:	ba12      	rev	r2, r2
 8007b04:	601a      	str	r2, [r3, #0]
  }
  return status; 
 8007b06:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3770      	adds	r7, #112	; 0x70
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b09c      	sub	sp, #112	; 0x70
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	82fb      	strh	r3, [r7, #22]
  __IO uint16_t nbvalidbitskey = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	82bb      	strh	r3, [r7, #20]
  uint32_t i = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	65fb      	str	r3, [r7, #92]	; 0x5c
  ErrorStatus status = SUCCESS;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t keyaddr    = (uint32_t)Key;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t inputaddr  = (uint32_t)Input;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8007b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b44:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	82fb      	strh	r3, [r7, #22]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	82bb      	strh	r3, [r7, #20]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 8007b66:	f7ff fd43 	bl	80075f0 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8007b6a:	2380      	movs	r3, #128	; 0x80
 8007b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8007b6e:	2340      	movs	r3, #64	; 0x40
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8007b72:	2320      	movs	r3, #32
 8007b74:	643b      	str	r3, [r7, #64]	; 0x40
  if(Keylen > 64)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b40      	cmp	r3, #64	; 0x40
 8007b7a:	d903      	bls.n	8007b84 <HMAC_MD5+0x72>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8007b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b80:	647b      	str	r3, [r7, #68]	; 0x44
 8007b82:	e001      	b.n	8007b88 <HMAC_MD5+0x76>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8007b84:	2300      	movs	r3, #0
 8007b86:	647b      	str	r3, [r7, #68]	; 0x44
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8007b88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff fd3b 	bl	8007608 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8007b92:	8abb      	ldrh	r3, [r7, #20]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff fd94 	bl	80076c4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ba0:	e00a      	b.n	8007bb8 <HMAC_MD5+0xa6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8007ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fda6 	bl	80076f8 <HASH_DataIn>
    keyaddr+=4;
 8007bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bae:	3304      	adds	r3, #4
 8007bb0:	667b      	str	r3, [r7, #100]	; 0x64
  for(i=0; i<Keylen; i+=4)
 8007bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d3f0      	bcc.n	8007ba2 <HMAC_MD5+0x90>
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 8007bc0:	f7ff fde8 	bl	8007794 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007bc4:	2008      	movs	r0, #8
 8007bc6:	f7ff feb5 	bl	8007934 <HASH_GetFlagStatus>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
    counter++;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bda:	d002      	beq.n	8007be2 <HMAC_MD5+0xd0>
 8007bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1f0      	bne.n	8007bc4 <HMAC_MD5+0xb2>

  if (busystatus != RESET)
 8007be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HMAC_MD5+0xde>
  {
     status = ERROR;
 8007be8:	2300      	movs	r3, #0
 8007bea:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8007bee:	e089      	b.n	8007d04 <HMAC_MD5+0x1f2>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8007bf0:	8afb      	ldrh	r3, [r7, #22]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff fd65 	bl	80076c4 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bfe:	e00a      	b.n	8007c16 <HMAC_MD5+0x104>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8007c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7ff fd77 	bl	80076f8 <HASH_DataIn>
      inputaddr+=4;
 8007c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	663b      	str	r3, [r7, #96]	; 0x60
    for(i=0; i<Ilen; i+=4)
 8007c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c12:	3304      	adds	r3, #4
 8007c14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d3f0      	bcc.n	8007c00 <HMAC_MD5+0xee>
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8007c1e:	f7ff fdb9 	bl	8007794 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	613b      	str	r3, [r7, #16]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007c26:	2008      	movs	r0, #8
 8007c28:	f7ff fe84 	bl	8007934 <HASH_GetFlagStatus>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
       counter++;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	3301      	adds	r3, #1
 8007c34:	613b      	str	r3, [r7, #16]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c3c:	d002      	beq.n	8007c44 <HMAC_MD5+0x132>
 8007c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1f0      	bne.n	8007c26 <HMAC_MD5+0x114>

    if (busystatus != RESET)
 8007c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HMAC_MD5+0x140>
    {
      status = ERROR;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8007c50:	e058      	b.n	8007d04 <HMAC_MD5+0x1f2>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8007c52:	8abb      	ldrh	r3, [r7, #20]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff fd34 	bl	80076c4 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	667b      	str	r3, [r7, #100]	; 0x64
      for(i=0; i<Keylen; i+=4)
 8007c60:	2300      	movs	r3, #0
 8007c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c64:	e00a      	b.n	8007c7c <HMAC_MD5+0x16a>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8007c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fd44 	bl	80076f8 <HASH_DataIn>
        keyaddr+=4;
 8007c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c72:	3304      	adds	r3, #4
 8007c74:	667b      	str	r3, [r7, #100]	; 0x64
      for(i=0; i<Keylen; i+=4)
 8007c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c78:	3304      	adds	r3, #4
 8007c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d3f0      	bcc.n	8007c66 <HMAC_MD5+0x154>
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 8007c84:	f7ff fd86 	bl	8007794 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	613b      	str	r3, [r7, #16]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007c8c:	2008      	movs	r0, #8
 8007c8e:	f7ff fe51 	bl	8007934 <HASH_GetFlagStatus>
 8007c92:	4603      	mov	r3, r0
 8007c94:	65fb      	str	r3, [r7, #92]	; 0x5c
          counter++;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	613b      	str	r3, [r7, #16]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca2:	d002      	beq.n	8007caa <HMAC_MD5+0x198>
 8007ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1f0      	bne.n	8007c8c <HMAC_MD5+0x17a>

      if (busystatus != RESET)
 8007caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <HMAC_MD5+0x1a6>
      {
         status = ERROR;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8007cb6:	e025      	b.n	8007d04 <HMAC_MD5+0x1f2>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 8007cb8:	f107 0318 	add.w	r3, r7, #24
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff fd3b 	bl	8007738 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8007cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cca:	ba12      	rev	r2, r2
 8007ccc:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 8007cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8007cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007cda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cdc:	ba12      	rev	r2, r2
 8007cde:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 8007ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8007ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ce8:	6a3a      	ldr	r2, [r7, #32]
 8007cea:	653a      	str	r2, [r7, #80]	; 0x50
 8007cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cee:	ba12      	rev	r2, r2
 8007cf0:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 8007cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8007cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfc:	657a      	str	r2, [r7, #84]	; 0x54
 8007cfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d00:	ba12      	rev	r2, r2
 8007d02:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 8007d04:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3770      	adds	r7, #112	; 0x70
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b09c      	sub	sp, #112	; 0x70
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8007d4a:	f7ff fc51 	bl	80075f0 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	63bb      	str	r3, [r7, #56]	; 0x38
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8007d52:	2300      	movs	r3, #0
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8007d56:	2320      	movs	r3, #32
 8007d58:	643b      	str	r3, [r7, #64]	; 0x40
  HASH_Init(&SHA1_HASH_InitStructure);
 8007d5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fc52 	bl	8007608 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8007d64:	8afb      	ldrh	r3, [r7, #22]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7ff fcab 	bl	80076c4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8007d6e:	2300      	movs	r3, #0
 8007d70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d72:	e00a      	b.n	8007d8a <HASH_SHA1+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8007d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff fcbd 	bl	80076f8 <HASH_DataIn>
    inputaddr+=4;
 8007d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d80:	3304      	adds	r3, #4
 8007d82:	667b      	str	r3, [r7, #100]	; 0x64
  for(i=0; i<Ilen; i+=4)
 8007d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d86:	3304      	adds	r3, #4
 8007d88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d3f0      	bcc.n	8007d74 <HASH_SHA1+0x64>
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8007d92:	f7ff fcff 	bl	8007794 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007d96:	2008      	movs	r0, #8
 8007d98:	f7ff fdcc 	bl	8007934 <HASH_GetFlagStatus>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	3301      	adds	r3, #1
 8007da4:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dac:	d002      	beq.n	8007db4 <HASH_SHA1+0xa4>
 8007dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1f0      	bne.n	8007d96 <HASH_SHA1+0x86>

  if (busystatus != RESET)
 8007db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HASH_SHA1+0xb2>
  {
     status = ERROR;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8007dc0:	e02e      	b.n	8007e20 <HASH_SHA1+0x110>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 8007dc2:	f107 0318 	add.w	r3, r7, #24
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff fcb6 	bl	8007738 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8007dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	64ba      	str	r2, [r7, #72]	; 0x48
 8007dd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dd4:	ba12      	rev	r2, r2
 8007dd6:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dda:	3304      	adds	r3, #4
 8007ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8007dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007de6:	ba12      	rev	r2, r2
 8007de8:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dec:	3304      	adds	r3, #4
 8007dee:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8007df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007df2:	6a3a      	ldr	r2, [r7, #32]
 8007df4:	653a      	str	r2, [r7, #80]	; 0x50
 8007df6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007df8:	ba12      	rev	r2, r2
 8007dfa:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dfe:	3304      	adds	r3, #4
 8007e00:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8007e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e06:	657a      	str	r2, [r7, #84]	; 0x54
 8007e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e0a:	ba12      	rev	r2, r2
 8007e0c:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e10:	3304      	adds	r3, #4
 8007e12:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8007e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e18:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e1c:	ba12      	rev	r2, r2
 8007e1e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8007e20:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3770      	adds	r7, #112	; 0x70
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b09e      	sub	sp, #120	; 0x78
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 8007e5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e60:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8007e82:	f7ff fbb5 	bl	80075f0 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8007e86:	2300      	movs	r3, #0
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8007e8a:	2340      	movs	r3, #64	; 0x40
 8007e8c:	643b      	str	r3, [r7, #64]	; 0x40
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8007e8e:	2320      	movs	r3, #32
 8007e90:	647b      	str	r3, [r7, #68]	; 0x44
  if(Keylen > 64)
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b40      	cmp	r3, #64	; 0x40
 8007e96:	d903      	bls.n	8007ea0 <HMAC_SHA1+0x74>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8007e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e9e:	e001      	b.n	8007ea4 <HMAC_SHA1+0x78>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8007ea4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff fbad 	bl	8007608 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8007eae:	8b3b      	ldrh	r3, [r7, #24]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff fc06 	bl	80076c4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	677b      	str	r3, [r7, #116]	; 0x74
 8007ebc:	e00a      	b.n	8007ed4 <HMAC_SHA1+0xa8>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8007ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff fc18 	bl	80076f8 <HASH_DataIn>
    keyaddr+=4;
 8007ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eca:	3304      	adds	r3, #4
 8007ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
  for(i=0; i<Keylen; i+=4)
 8007ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	677b      	str	r3, [r7, #116]	; 0x74
 8007ed4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d3f0      	bcc.n	8007ebe <HMAC_SHA1+0x92>
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8007edc:	f7ff fc5a 	bl	8007794 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007ee0:	2008      	movs	r0, #8
 8007ee2:	f7ff fd27 	bl	8007934 <HASH_GetFlagStatus>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	3301      	adds	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef6:	d002      	beq.n	8007efe <HMAC_SHA1+0xd2>
 8007ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1f0      	bne.n	8007ee0 <HMAC_SHA1+0xb4>

  if (busystatus != RESET)
 8007efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <HMAC_SHA1+0xe0>
  {
     status = ERROR;
 8007f04:	2300      	movs	r3, #0
 8007f06:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007f0a:	e092      	b.n	8008032 <HMAC_SHA1+0x206>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8007f0c:	8b7b      	ldrh	r3, [r7, #26]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fbd7 	bl	80076c4 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8007f16:	2300      	movs	r3, #0
 8007f18:	677b      	str	r3, [r7, #116]	; 0x74
 8007f1a:	e00a      	b.n	8007f32 <HMAC_SHA1+0x106>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8007f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff fbe9 	bl	80076f8 <HASH_DataIn>
      inputaddr+=4;
 8007f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f28:	3304      	adds	r3, #4
 8007f2a:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=0; i<Ilen; i+=4)
 8007f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f2e:	3304      	adds	r3, #4
 8007f30:	677b      	str	r3, [r7, #116]	; 0x74
 8007f32:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d3f0      	bcc.n	8007f1c <HMAC_SHA1+0xf0>
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8007f3a:	f7ff fc2b 	bl	8007794 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007f42:	2008      	movs	r0, #8
 8007f44:	f7ff fcf6 	bl	8007934 <HASH_GetFlagStatus>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	667b      	str	r3, [r7, #100]	; 0x64
      counter++;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f58:	d002      	beq.n	8007f60 <HMAC_SHA1+0x134>
 8007f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1f0      	bne.n	8007f42 <HMAC_SHA1+0x116>

    if (busystatus != RESET)
 8007f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <HMAC_SHA1+0x142>
    {
      status = ERROR;
 8007f66:	2300      	movs	r3, #0
 8007f68:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007f6c:	e061      	b.n	8008032 <HMAC_SHA1+0x206>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8007f6e:	8b3b      	ldrh	r3, [r7, #24]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff fba6 	bl	80076c4 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	677b      	str	r3, [r7, #116]	; 0x74
 8007f80:	e00a      	b.n	8007f98 <HMAC_SHA1+0x16c>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8007f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fbb6 	bl	80076f8 <HASH_DataIn>
        keyaddr+=4;
 8007f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8e:	3304      	adds	r3, #4
 8007f90:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 8007f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f94:	3304      	adds	r3, #4
 8007f96:	677b      	str	r3, [r7, #116]	; 0x74
 8007f98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d3f0      	bcc.n	8007f82 <HMAC_SHA1+0x156>
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 8007fa0:	f7ff fbf8 	bl	8007794 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007fa8:	2008      	movs	r0, #8
 8007faa:	f7ff fcc3 	bl	8007934 <HASH_GetFlagStatus>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	667b      	str	r3, [r7, #100]	; 0x64
        counter++;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fbe:	d002      	beq.n	8007fc6 <HMAC_SHA1+0x19a>
 8007fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f0      	bne.n	8007fa8 <HMAC_SHA1+0x17c>

      if (busystatus != RESET)
 8007fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <HMAC_SHA1+0x1a8>
      {
        status = ERROR;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007fd2:	e02e      	b.n	8008032 <HMAC_SHA1+0x206>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 8007fd4:	f107 031c 	add.w	r3, r7, #28
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff fbad 	bl	8007738 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8007fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fe0:	69fa      	ldr	r2, [r7, #28]
 8007fe2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fe6:	ba12      	rev	r2, r2
 8007fe8:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8007fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fec:	3304      	adds	r3, #4
 8007fee:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8007ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ff2:	6a3a      	ldr	r2, [r7, #32]
 8007ff4:	653a      	str	r2, [r7, #80]	; 0x50
 8007ff6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ff8:	ba12      	rev	r2, r2
 8007ffa:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8007ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ffe:	3304      	adds	r3, #4
 8008000:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8008002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008006:	657a      	str	r2, [r7, #84]	; 0x54
 8008008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800800a:	ba12      	rev	r2, r2
 800800c:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800800e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008010:	3304      	adds	r3, #4
 8008012:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8008014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008018:	65ba      	str	r2, [r7, #88]	; 0x58
 800801a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800801c:	ba12      	rev	r2, r2
 800801e:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8008020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008022:	3304      	adds	r3, #4
 8008024:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8008026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800802a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800802c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800802e:	ba12      	rev	r2, r2
 8008030:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 8008032:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8008036:	4618      	mov	r0, r3
 8008038:	3778      	adds	r7, #120	; 0x78
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a17      	ldr	r2, [pc, #92]	; (80080a8 <I2C_DeInit+0x68>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10a      	bne.n	8008066 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8008050:	2101      	movs	r1, #1
 8008052:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008056:	f001 fa83 	bl	8009560 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800805a:	2100      	movs	r1, #0
 800805c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008060:	f001 fa7e 	bl	8009560 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8008064:	e01c      	b.n	80080a0 <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a10      	ldr	r2, [pc, #64]	; (80080ac <I2C_DeInit+0x6c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d10a      	bne.n	8008084 <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800806e:	2101      	movs	r1, #1
 8008070:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008074:	f001 fa74 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8008078:	2100      	movs	r1, #0
 800807a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800807e:	f001 fa6f 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 8008082:	e00d      	b.n	80080a0 <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a0a      	ldr	r2, [pc, #40]	; (80080b0 <I2C_DeInit+0x70>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d109      	bne.n	80080a0 <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800808c:	2101      	movs	r1, #1
 800808e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008092:	f001 fa65 	bl	8009560 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8008096:	2100      	movs	r1, #0
 8008098:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800809c:	f001 fa60 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	40005400 	.word	0x40005400
 80080ac:	40005800 	.word	0x40005800
 80080b0:	40005c00 	.word	0x40005c00

080080b4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08a      	sub	sp, #40	; 0x28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080c2:	2300      	movs	r3, #0
 80080c4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80080c6:	2304      	movs	r3, #4
 80080c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80080ca:	4b57      	ldr	r3, [pc, #348]	; (8008228 <I2C_Init+0x174>)
 80080cc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	889b      	ldrh	r3, [r3, #4]
 80080d2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80080d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80080da:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80080dc:	f107 030c 	add.w	r3, r7, #12
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 f827 	bl	8009134 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	4a4f      	ldr	r2, [pc, #316]	; (800822c <I2C_Init+0x178>)
 80080ee:	fba2 2303 	umull	r2, r3, r2, r3
 80080f2:	0c9b      	lsrs	r3, r3, #18
 80080f4:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80080f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080fa:	4313      	orrs	r3, r2
 80080fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008102:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f023 0301 	bic.w	r3, r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a44      	ldr	r2, [pc, #272]	; (8008230 <I2C_Init+0x17c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d815      	bhi.n	800814e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	69fa      	ldr	r2, [r7, #28]
 800812a:	fbb2 f3f3 	udiv	r3, r2, r3
 800812e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8008130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008132:	2b03      	cmp	r3, #3
 8008134:	d801      	bhi.n	800813a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8008136:	2304      	movs	r3, #4
 8008138:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800813a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800813c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800813e:	4313      	orrs	r3, r2
 8008140:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8008142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008144:	3301      	adds	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	841a      	strh	r2, [r3, #32]
 800814c:	e040      	b.n	80081d0 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	88db      	ldrh	r3, [r3, #6]
 8008152:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8008156:	4293      	cmp	r3, r2
 8008158:	d109      	bne.n	800816e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4613      	mov	r3, r2
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	4413      	add	r3, r2
 8008164:	69fa      	ldr	r2, [r7, #28]
 8008166:	fbb2 f3f3 	udiv	r3, r2, r3
 800816a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800816c:	e00e      	b.n	800818c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4613      	mov	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	009a      	lsls	r2, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008182:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8008184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800818a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800818c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800818e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008192:	2b00      	cmp	r3, #0
 8008194:	d103      	bne.n	800819e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8008196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008198:	f043 0301 	orr.w	r3, r3, #1
 800819c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800819e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80081a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081a2:	4313      	orrs	r3, r2
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80081b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80081b6:	fb02 f303 	mul.w	r3, r2, r3
 80081ba:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <I2C_Init+0x180>)
 80081bc:	fb82 1203 	smull	r1, r2, r2, r3
 80081c0:	1192      	asrs	r2, r2, #6
 80081c2:	17db      	asrs	r3, r3, #31
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	3301      	adds	r3, #1
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081d4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	f043 0301 	orr.w	r3, r3, #1
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80081ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081ee:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80081f2:	f023 0302 	bic.w	r3, r3, #2
 80081f6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	889a      	ldrh	r2, [r3, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	895b      	ldrh	r3, [r3, #10]
 8008200:	4313      	orrs	r3, r2
 8008202:	b29a      	uxth	r2, r3
 8008204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008206:	4313      	orrs	r3, r2
 8008208:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800820e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	899a      	ldrh	r2, [r3, #12]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	891b      	ldrh	r3, [r3, #8]
 8008218:	4313      	orrs	r3, r2
 800821a:	b29a      	uxth	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	811a      	strh	r2, [r3, #8]
}
 8008220:	bf00      	nop
 8008222:	3728      	adds	r7, #40	; 0x28
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	007a1200 	.word	0x007a1200
 800822c:	431bde83 	.word	0x431bde83
 8008230:	000186a0 	.word	0x000186a0
 8008234:	10624dd3 	.word	0x10624dd3

08008238 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f241 3288 	movw	r2, #5000	; 0x1388
 8008246:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8008254:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008268:	819a      	strh	r2, [r3, #12]
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008282:	78fb      	ldrb	r3, [r7, #3]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d008      	beq.n	800829a <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	b29a      	uxth	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8008298:	e007      	b.n	80082aa <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f023 0301 	bic.w	r3, r3, #1
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	801a      	strh	r2, [r3, #0]
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d008      	beq.n	80082da <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f023 0310 	bic.w	r3, r3, #16
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	849a      	strh	r2, [r3, #36]	; 0x24
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
  }
}
 80082d8:	e007      	b.n	80082ea <I2C_AnalogFilterCmd+0x34>
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082de:	b29b      	uxth	r3, r3
 80082e0:	f043 0310 	orr.w	r3, r3, #16
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b085      	sub	sp, #20
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	460b      	mov	r3, r1
 8008300:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800830a:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 800830c:	89fb      	ldrh	r3, [r7, #14]
 800830e:	f023 030f 	bic.w	r3, r3, #15
 8008312:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 8008314:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008318:	f003 030f 	and.w	r3, r3, #15
 800831c:	b21a      	sxth	r2, r3
 800831e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008322:	4313      	orrs	r3, r2
 8008324:	b21b      	sxth	r3, r3
 8008326:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	89fa      	ldrh	r2, [r7, #14]
 800832c:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d008      	beq.n	800835e <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	b29b      	uxth	r3, r3
 8008352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008356:	b29a      	uxth	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 800835c:	e007      	b.n	800836e <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008368:	b29a      	uxth	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	801a      	strh	r2, [r3, #0]
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	460b      	mov	r3, r1
 8008384:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008386:	78fb      	ldrb	r3, [r7, #3]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d008      	beq.n	800839e <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008396:	b29a      	uxth	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 800839c:	e007      	b.n	80083ae <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	801a      	strh	r2, [r3, #0]
}
 80083ae:	bf00      	nop
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
 80083c6:	4613      	mov	r3, r2
 80083c8:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80083ca:	78bb      	ldrb	r3, [r7, #2]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	f043 0301 	orr.w	r3, r3, #1
 80083d6:	70fb      	strb	r3, [r7, #3]
 80083d8:	e003      	b.n	80083e2 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	f023 0301 	bic.w	r3, r3, #1
 80083e0:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	821a      	strh	r2, [r3, #16]
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	b29b      	uxth	r3, r3
 800840e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008412:	b29a      	uxth	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8008418:	e007      	b.n	800842a <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	b29b      	uxth	r3, r3
 8008420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008424:	b29a      	uxth	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	801a      	strh	r2, [r3, #0]
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 8008436:	b480      	push	{r7}
 8008438:	b085      	sub	sp, #20
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	899b      	ldrh	r3, [r3, #12]
 800844a:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800844c:	89fb      	ldrh	r3, [r7, #14]
 800844e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8008452:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	b21b      	sxth	r3, r3
 8008458:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800845c:	b21a      	sxth	r2, r3
 800845e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008462:	4313      	orrs	r3, r2
 8008464:	b21b      	sxth	r3, r3
 8008466:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	89fa      	ldrh	r2, [r7, #14]
 800846c:	819a      	strh	r2, [r3, #12]
}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d008      	beq.n	800849e <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	899b      	ldrh	r3, [r3, #12]
 8008490:	b29b      	uxth	r3, r3
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
  }
}
 800849c:	e007      	b.n	80084ae <I2C_DualAddressCmd+0x34>
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	899b      	ldrh	r3, [r3, #12]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f023 0301 	bic.w	r3, r3, #1
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	819a      	strh	r2, [r3, #12]
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	460b      	mov	r3, r1
 80084c4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80084c6:	78fb      	ldrb	r3, [r7, #3]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d008      	beq.n	80084de <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
  }
}
 80084dc:	e007      	b.n	80084ee <I2C_GeneralCallCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	801a      	strh	r2, [r3, #0]
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851a:	b29a      	uxth	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
  }
}
 8008520:	e007      	b.n	8008532 <I2C_SoftwareResetCmd+0x38>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800852c:	b29a      	uxth	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	801a      	strh	r2, [r3, #0]
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d108      	bne.n	8008562 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855a:	b29a      	uxth	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
  }
}
 8008560:	e007      	b.n	8008572 <I2C_StretchClockCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800856c:	b29a      	uxth	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	801a      	strh	r2, [r3, #0]
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800858a:	887b      	ldrh	r3, [r7, #2]
 800858c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008590:	d008      	beq.n	80085a4 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	8b9b      	ldrh	r3, [r3, #28]
 8008596:	b29b      	uxth	r3, r3
 8008598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800859c:	b29a      	uxth	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	839a      	strh	r2, [r3, #28]
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
  }
}
 80085a2:	e007      	b.n	80085b4 <I2C_FastModeDutyCycleConfig+0x36>
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	8b9b      	ldrh	r3, [r3, #28]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	839a      	strh	r2, [r3, #28]
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80085cc:	887b      	ldrh	r3, [r7, #2]
 80085ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085d2:	d108      	bne.n	80085e6 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80085de:	b29a      	uxth	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
  }
}
 80085e4:	e007      	b.n	80085f6 <I2C_NACKPositionConfig+0x36>
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	801a      	strh	r2, [r3, #0]
}
 80085f6:	bf00      	nop
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800860e:	887b      	ldrh	r3, [r7, #2]
 8008610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008614:	d108      	bne.n	8008628 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29b      	uxth	r3, r3
 800861c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008620:	b29a      	uxth	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
  }
}
 8008626:	e007      	b.n	8008638 <I2C_SMBusAlertConfig+0x36>
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	b29b      	uxth	r3, r3
 800862e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008632:	b29a      	uxth	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	801a      	strh	r2, [r3, #0]
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008650:	78fb      	ldrb	r3, [r7, #3]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d008      	beq.n	8008668 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	b29b      	uxth	r3, r3
 800865c:	f043 0310 	orr.w	r3, r3, #16
 8008660:	b29a      	uxth	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
  }
}
 8008666:	e007      	b.n	8008678 <I2C_ARPCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29b      	uxth	r3, r3
 800866e:	f023 0310 	bic.w	r3, r3, #16
 8008672:	b29a      	uxth	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	801a      	strh	r2, [r3, #0]
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	b29a      	uxth	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	821a      	strh	r2, [r3, #16]
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	8a1b      	ldrh	r3, [r3, #16]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	b2db      	uxtb	r3, r3
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d008      	beq.n	80086e4 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086dc:	b29a      	uxth	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
  }
}
 80086e2:	e007      	b.n	80086f4 <I2C_TransmitPEC+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	801a      	strh	r2, [r3, #0]
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800870c:	887b      	ldrh	r3, [r7, #2]
 800870e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008712:	d108      	bne.n	8008726 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800871e:	b29a      	uxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
  }
}
 8008724:	e007      	b.n	8008736 <I2C_PECPositionConfig+0x36>
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	b29b      	uxth	r3, r3
 800872c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008730:	b29a      	uxth	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	801a      	strh	r2, [r3, #0]
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	460b      	mov	r3, r1
 800874c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d008      	beq.n	8008766 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	f043 0320 	orr.w	r3, r3, #32
 800875e:	b29a      	uxth	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
  }
}
 8008764:	e007      	b.n	8008776 <I2C_CalculatePEC+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	b29b      	uxth	r3, r3
 800876c:	f023 0320 	bic.w	r3, r3, #32
 8008770:	b29a      	uxth	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	801a      	strh	r2, [r3, #0]
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	8b1b      	ldrh	r3, [r3, #24]
 800878e:	b29b      	uxth	r3, r3
 8008790:	0a1b      	lsrs	r3, r3, #8
 8008792:	b29b      	uxth	r3, r3
 8008794:	b2db      	uxtb	r3, r3
}
 8008796:	4618      	mov	r0, r3
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b083      	sub	sp, #12
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	460b      	mov	r3, r1
 80087ac:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80087ae:	78fb      	ldrb	r3, [r7, #3]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d008      	beq.n	80087c6 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	889b      	ldrh	r3, [r3, #4]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80087be:	b29a      	uxth	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 80087c4:	e007      	b.n	80087d6 <I2C_DMACmd+0x34>
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	889b      	ldrh	r3, [r3, #4]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	809a      	strh	r2, [r3, #4]
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	460b      	mov	r3, r1
 80087ec:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d008      	beq.n	8008806 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	889b      	ldrh	r3, [r3, #4]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087fe:	b29a      	uxth	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 8008804:	e007      	b.n	8008816 <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	889b      	ldrh	r3, [r3, #4]
 800880a:	b29b      	uxth	r3, r3
 800880c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008810:	b29a      	uxth	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	809a      	strh	r2, [r3, #4]
}
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8008822:	b480      	push	{r7}
 8008824:	b085      	sub	sp, #20
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 8008836:	78fa      	ldrb	r2, [r7, #3]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4413      	add	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29b      	uxth	r3, r3
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	807b      	strh	r3, [r7, #2]
 800885c:	4613      	mov	r3, r2
 800885e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8008860:	787b      	ldrb	r3, [r7, #1]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d008      	beq.n	8008878 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	889b      	ldrh	r3, [r3, #4]
 800886a:	b29a      	uxth	r2, r3
 800886c:	887b      	ldrh	r3, [r7, #2]
 800886e:	4313      	orrs	r3, r2
 8008870:	b29a      	uxth	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 8008876:	e009      	b.n	800888c <I2C_ITConfig+0x3c>
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	889b      	ldrh	r3, [r3, #4]
 800887c:	b29a      	uxth	r2, r3
 800887e:	887b      	ldrh	r3, [r7, #2]
 8008880:	43db      	mvns	r3, r3
 8008882:	b29b      	uxth	r3, r3
 8008884:	4013      	ands	r3, r2
 8008886:	b29a      	uxth	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	809a      	strh	r2, [r3, #4]
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	2300      	movs	r3, #0
 80088ac:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80088ae:	2300      	movs	r3, #0
 80088b0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	8a9b      	ldrh	r3, [r3, #20]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	8b1b      	ldrh	r3, [r3, #24]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	041b      	lsls	r3, r3, #16
 80088c6:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80088d2:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	401a      	ands	r2, r3
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d102      	bne.n	80088e6 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80088e0:	2301      	movs	r3, #1
 80088e2:	75fb      	strb	r3, [r7, #23]
 80088e4:	e001      	b.n	80088ea <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80088e6:	2300      	movs	r3, #0
 80088e8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	613b      	str	r3, [r7, #16]
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	8a9b      	ldrh	r3, [r3, #20]
 8008910:	b29b      	uxth	r3, r3
 8008912:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	8b1b      	ldrh	r3, [r3, #24]
 8008918:	b29b      	uxth	r3, r3
 800891a:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	041b      	lsls	r3, r3, #16
 8008920:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4313      	orrs	r3, r2
 8008928:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800892c:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800892e:	697b      	ldr	r3, [r7, #20]
}
 8008930:	4618      	mov	r0, r3
 8008932:	371c      	adds	r7, #28
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	613b      	str	r3, [r7, #16]
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	0f1b      	lsrs	r3, r3, #28
 800895a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008962:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3314      	adds	r3, #20
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	e005      	b.n	800897e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	0c1b      	lsrs	r3, r3, #16
 8008976:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3318      	adds	r3, #24
 800897c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	4013      	ands	r3, r2
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800898a:	2301      	movs	r3, #1
 800898c:	75fb      	strb	r3, [r7, #23]
 800898e:	e001      	b.n	8008994 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8008990:	2300      	movs	r3, #0
 8008992:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
}
 8008996:	4618      	mov	r0, r3
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089b6:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	43db      	mvns	r3, r3
 80089be:	b29a      	uxth	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	829a      	strh	r2, [r3, #20]
}
 80089c4:	bf00      	nop
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	0c1b      	lsrs	r3, r3, #16
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	8892      	ldrh	r2, [r2, #4]
 80089ea:	b292      	uxth	r2, r2
 80089ec:	4013      	ands	r3, r2
 80089ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089f2:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089fa:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8a9b      	ldrh	r3, [r3, #20]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	461a      	mov	r2, r3
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	4013      	ands	r3, r2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d005      	beq.n	8008a18 <I2C_GetITStatus+0x48>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8008a12:	2301      	movs	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
 8008a16:	e001      	b.n	8008a1c <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b085      	sub	sp, #20
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	43db      	mvns	r3, r3
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	829a      	strh	r2, [r3, #20]
}
 8008a4c:	bf00      	nop
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8008a62:	4a04      	ldr	r2, [pc, #16]	; (8008a74 <IWDG_WriteAccessCmd+0x1c>)
 8008a64:	88fb      	ldrh	r3, [r7, #6]
 8008a66:	6013      	str	r3, [r2, #0]
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	40003000 	.word	0x40003000

08008a78 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8008a82:	4a04      	ldr	r2, [pc, #16]	; (8008a94 <IWDG_SetPrescaler+0x1c>)
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	6053      	str	r3, [r2, #4]
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	40003000 	.word	0x40003000

08008a98 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8008aa2:	4a04      	ldr	r2, [pc, #16]	; (8008ab4 <IWDG_SetReload+0x1c>)
 8008aa4:	88fb      	ldrh	r3, [r7, #6]
 8008aa6:	6093      	str	r3, [r2, #8]
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	40003000 	.word	0x40003000

08008ab8 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <IWDG_ReloadCounter+0x18>)
 8008abe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008ac2:	601a      	str	r2, [r3, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40003000 	.word	0x40003000

08008ad4 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 8008ad8:	4b04      	ldr	r3, [pc, #16]	; (8008aec <IWDG_Enable+0x18>)
 8008ada:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008ade:	601a      	str	r2, [r3, #0]
}
 8008ae0:	bf00      	nop
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	40003000 	.word	0x40003000

08008af0 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <IWDG_GetFlagStatus+0x34>)
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	4013      	ands	r3, r2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <IWDG_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	73fb      	strb	r3, [r7, #15]
 8008b0e:	e001      	b.n	8008b14 <IWDG_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40003000 	.word	0x40003000

08008b28 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008b32:	f000 fd15 	bl	8009560 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8008b36:	2100      	movs	r1, #0
 8008b38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008b3c:	f000 fd10 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 8008b40:	bf00      	nop
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8008b4e:	4a04      	ldr	r2, [pc, #16]	; (8008b60 <PWR_BackupAccessCmd+0x1c>)
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	6013      	str	r3, [r2, #0]
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	420e0020 	.word	0x420e0020

08008b64 <PWR_PVDLevelConfig>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8008b70:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <PWR_PVDLevelConfig+0x34>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008b7c:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8008b86:	4a04      	ldr	r2, [pc, #16]	; (8008b98 <PWR_PVDLevelConfig+0x34>)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6013      	str	r3, [r2, #0]
}
 8008b8c:	bf00      	nop
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	40007000 	.word	0x40007000

08008b9c <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8008ba6:	4a04      	ldr	r2, [pc, #16]	; (8008bb8 <PWR_PVDCmd+0x1c>)
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	6013      	str	r3, [r2, #0]
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	420e0010 	.word	0x420e0010

08008bbc <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8008bc6:	4a04      	ldr	r2, [pc, #16]	; (8008bd8 <PWR_WakeUpPinCmd+0x1c>)
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	6013      	str	r3, [r2, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	420e00a0 	.word	0x420e00a0

08008bdc <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 8008be6:	4a04      	ldr	r2, [pc, #16]	; (8008bf8 <PWR_BackupRegulatorCmd+0x1c>)
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	6013      	str	r3, [r2, #0]
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	420e00a4 	.word	0x420e00a4

08008bfc <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
  *                                                System frequency up to 120 MHz
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	60fb      	str	r3, [r7, #12]
	
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  tmpreg = PWR->CR;
 8008c08:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <PWR_MainRegulatorModeConfig+0x34>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	60fb      	str	r3, [r7, #12]
  
  /* Clear VOS[15:14] bits */
  tmpreg &= CR_VOS_MASK;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008c14:	60fb      	str	r3, [r7, #12]
  
  /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
  tmpreg |= PWR_Regulator_Voltage;
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8008c1e:	4a04      	ldr	r2, [pc, #16]	; (8008c30 <PWR_MainRegulatorModeConfig+0x34>)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6013      	str	r3, [r2, #0]
}
 8008c24:	bf00      	nop
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	40007000 	.word	0x40007000

08008c34 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 8008c3e:	4a04      	ldr	r2, [pc, #16]	; (8008c50 <PWR_FlashPowerDownCmd+0x1c>)
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	6013      	str	r3, [r2, #0]
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	420e0024 	.word	0x420e0024

08008c54 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008c64:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <PWR_EnterSTOPMode+0x5c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f023 0303 	bic.w	r3, r3, #3
 8008c70:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8008c7a:	4a0d      	ldr	r2, [pc, #52]	; (8008cb0 <PWR_EnterSTOPMode+0x5c>)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8008c80:	4a0c      	ldr	r2, [pc, #48]	; (8008cb4 <PWR_EnterSTOPMode+0x60>)
 8008c82:	4b0c      	ldr	r3, [pc, #48]	; (8008cb4 <PWR_EnterSTOPMode+0x60>)
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	f043 0304 	orr.w	r3, r3, #4
 8008c8a:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8008c8c:	78fb      	ldrb	r3, [r7, #3]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <PWR_EnterSTOPMode+0x42>
  __ASM volatile ("wfi");
 8008c92:	bf30      	wfi
 8008c94:	e000      	b.n	8008c98 <PWR_EnterSTOPMode+0x44>
  __ASM volatile ("wfe");
 8008c96:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8008c98:	4a06      	ldr	r2, [pc, #24]	; (8008cb4 <PWR_EnterSTOPMode+0x60>)
 8008c9a:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <PWR_EnterSTOPMode+0x60>)
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f023 0304 	bic.w	r3, r3, #4
 8008ca2:	6113      	str	r3, [r2, #16]
}
 8008ca4:	bf00      	nop
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	40007000 	.word	0x40007000
 8008cb4:	e000ed00 	.word	0xe000ed00

08008cb8 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 8008cbc:	4a0b      	ldr	r2, [pc, #44]	; (8008cec <PWR_EnterSTANDBYMode+0x34>)
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <PWR_EnterSTANDBYMode+0x34>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f043 0304 	orr.w	r3, r3, #4
 8008cc6:	6013      	str	r3, [r2, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8008cc8:	4a08      	ldr	r2, [pc, #32]	; (8008cec <PWR_EnterSTANDBYMode+0x34>)
 8008cca:	4b08      	ldr	r3, [pc, #32]	; (8008cec <PWR_EnterSTANDBYMode+0x34>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f043 0302 	orr.w	r3, r3, #2
 8008cd2:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8008cd4:	4a06      	ldr	r2, [pc, #24]	; (8008cf0 <PWR_EnterSTANDBYMode+0x38>)
 8008cd6:	4b06      	ldr	r3, [pc, #24]	; (8008cf0 <PWR_EnterSTANDBYMode+0x38>)
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	f043 0304 	orr.w	r3, r3, #4
 8008cde:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8008ce0:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8008ce2:	bf00      	nop
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	40007000 	.word	0x40007000
 8008cf0:	e000ed00 	.word	0xe000ed00

08008cf4 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
  *                 scaling output selection is ready. 
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8008d00:	4b08      	ldr	r3, [pc, #32]	; (8008d24 <PWR_GetFlagStatus+0x30>)
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4013      	ands	r3, r2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]
 8008d10:	e001      	b.n	8008d16 <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	40007000 	.word	0x40007000

08008d28 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8008d30:	4906      	ldr	r1, [pc, #24]	; (8008d4c <PWR_ClearFlag+0x24>)
 8008d32:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <PWR_ClearFlag+0x24>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	600b      	str	r3, [r1, #0]
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	40007000 	.word	0x40007000

08008d50 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8008d50:	b480      	push	{r7}
 8008d52:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008d54:	4a12      	ldr	r2, [pc, #72]	; (8008da0 <RCC_DeInit+0x50>)
 8008d56:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <RCC_DeInit+0x50>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f043 0301 	orr.w	r3, r3, #1
 8008d5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008d60:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <RCC_DeInit+0x50>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8008d66:	4a0e      	ldr	r2, [pc, #56]	; (8008da0 <RCC_DeInit+0x50>)
 8008d68:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <RCC_DeInit+0x50>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8008d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008d76:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <RCC_DeInit+0x50>)
 8008d78:	4a0a      	ldr	r2, [pc, #40]	; (8008da4 <RCC_DeInit+0x54>)
 8008d7a:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8008d7c:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <RCC_DeInit+0x50>)
 8008d7e:	4a0a      	ldr	r2, [pc, #40]	; (8008da8 <RCC_DeInit+0x58>)
 8008d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008d84:	4a06      	ldr	r2, [pc, #24]	; (8008da0 <RCC_DeInit+0x50>)
 8008d86:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <RCC_DeInit+0x50>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008d90:	4b03      	ldr	r3, [pc, #12]	; (8008da0 <RCC_DeInit+0x50>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8008d96:	bf00      	nop
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	40023800 	.word	0x40023800
 8008da4:	24003010 	.word	0x24003010
 8008da8:	20003000 	.word	0x20003000

08008dac <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8008db6:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <RCC_HSEConfig+0x24>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8008dbc:	4a04      	ldr	r2, [pc, #16]	; (8008dd0 <RCC_HSEConfig+0x24>)
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	7013      	strb	r3, [r2, #0]
}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	40023802 	.word	0x40023802

08008dd4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8008dde:	2300      	movs	r3, #0
 8008de0:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8008de2:	2300      	movs	r3, #0
 8008de4:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8008de6:	2031      	movs	r0, #49	; 0x31
 8008de8:	f000 fcc0 	bl	800976c <RCC_GetFlagStatus>
 8008dec:	4603      	mov	r3, r0
 8008dee:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	3301      	adds	r3, #1
 8008df4:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008dfc:	d002      	beq.n	8008e04 <RCC_WaitForHSEStartUp+0x30>
 8008dfe:	79bb      	ldrb	r3, [r7, #6]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0f0      	beq.n	8008de6 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8008e04:	2031      	movs	r0, #49	; 0x31
 8008e06:	f000 fcb1 	bl	800976c <RCC_GetFlagStatus>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8008e10:	2301      	movs	r3, #1
 8008e12:	71fb      	strb	r3, [r7, #7]
 8008e14:	e001      	b.n	8008e1a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8008e16:	2300      	movs	r3, #0
 8008e18:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8008e32:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <RCC_AdjustHSICalibrationValue+0x38>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8008e4a:	4a04      	ldr	r2, [pc, #16]	; (8008e5c <RCC_AdjustHSICalibrationValue+0x38>)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6013      	str	r3, [r2, #0]
}
 8008e50:	bf00      	nop
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	40023800 	.word	0x40023800

08008e60 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8008e6a:	4a04      	ldr	r2, [pc, #16]	; (8008e7c <RCC_HSICmd+0x1c>)
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	6013      	str	r3, [r2, #0]
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	42470000 	.word	0x42470000

08008e80 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8008e8a:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <RCC_LSEConfig+0x40>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8008e90:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <RCC_LSEConfig+0x40>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8008e96:	79fb      	ldrb	r3, [r7, #7]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d002      	beq.n	8008ea2 <RCC_LSEConfig+0x22>
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d004      	beq.n	8008eaa <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8008ea0:	e007      	b.n	8008eb2 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8008ea2:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <RCC_LSEConfig+0x40>)
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	701a      	strb	r2, [r3, #0]
      break;
 8008ea8:	e003      	b.n	8008eb2 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8008eaa:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <RCC_LSEConfig+0x40>)
 8008eac:	2205      	movs	r2, #5
 8008eae:	701a      	strb	r2, [r3, #0]
      break;
 8008eb0:	bf00      	nop
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	40023870 	.word	0x40023870

08008ec4 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8008ece:	4a04      	ldr	r2, [pc, #16]	; (8008ee0 <RCC_LSICmd+0x1c>)
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	6013      	str	r3, [r2, #0]
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	42470e80 	.word	0x42470e80

08008ee4 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8008ef2:	490b      	ldr	r1, [pc, #44]	; (8008f20 <RCC_PLLConfig+0x3c>)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	019a      	lsls	r2, r3, #6
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	085b      	lsrs	r3, r3, #1
 8008f00:	3b01      	subs	r3, #1
 8008f02:	041b      	lsls	r3, r3, #16
 8008f04:	431a      	orrs	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	061b      	lsls	r3, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	604b      	str	r3, [r1, #4]
}
 8008f12:	bf00      	nop
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	40023800 	.word	0x40023800

08008f24 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8008f2e:	4a04      	ldr	r2, [pc, #16]	; (8008f40 <RCC_PLLCmd+0x1c>)
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	6013      	str	r3, [r2, #0]
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	42470060 	.word	0x42470060

08008f44 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8008f4e:	4907      	ldr	r1, [pc, #28]	; (8008f6c <RCC_PLLI2SConfig+0x28>)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	019a      	lsls	r2, r3, #6
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	071b      	lsls	r3, r3, #28
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8008f5e:	bf00      	nop
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	40023800 	.word	0x40023800

08008f70 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8008f7a:	4a04      	ldr	r2, [pc, #16]	; (8008f8c <RCC_PLLI2SCmd+0x1c>)
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	6013      	str	r3, [r2, #0]
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	42470068 	.word	0x42470068

08008f90 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8008f9a:	4a04      	ldr	r2, [pc, #16]	; (8008fac <RCC_ClockSecuritySystemCmd+0x1c>)
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	6013      	str	r3, [r2, #0]
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	4247004c 	.word	0x4247004c

08008fb0 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8008fbe:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <RCC_MCO1Config+0x3c>)
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8008fd8:	4a04      	ldr	r2, [pc, #16]	; (8008fec <RCC_MCO1Config+0x3c>)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6093      	str	r3, [r2, #8]
}
 8008fde:	bf00      	nop
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	40023800 	.word	0x40023800

08008ff0 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8008ffe:	4b0b      	ldr	r3, [pc, #44]	; (800902c <RCC_MCO2Config+0x3c>)
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800900a:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	4313      	orrs	r3, r2
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8009018:	4a04      	ldr	r2, [pc, #16]	; (800902c <RCC_MCO2Config+0x3c>)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6093      	str	r3, [r2, #8]
}
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	40023800 	.word	0x40023800

08009030 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009038:	2300      	movs	r3, #0
 800903a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800903c:	4b09      	ldr	r3, [pc, #36]	; (8009064 <RCC_SYSCLKConfig+0x34>)
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f023 0303 	bic.w	r3, r3, #3
 8009048:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8009052:	4a04      	ldr	r2, [pc, #16]	; (8009064 <RCC_SYSCLKConfig+0x34>)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6093      	str	r3, [r2, #8]
}
 8009058:	bf00      	nop
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	40023800 	.word	0x40023800

08009068 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800906c:	4b05      	ldr	r3, [pc, #20]	; (8009084 <RCC_GetSYSCLKSource+0x1c>)
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	f003 030c 	and.w	r3, r3, #12
 8009076:	b2db      	uxtb	r3, r3
}
 8009078:	4618      	mov	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	40023800 	.word	0x40023800

08009088 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8009094:	4b09      	ldr	r3, [pc, #36]	; (80090bc <RCC_HCLKConfig+0x34>)
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090a0:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80090aa:	4a04      	ldr	r2, [pc, #16]	; (80090bc <RCC_HCLKConfig+0x34>)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6093      	str	r3, [r2, #8]
}
 80090b0:	bf00      	nop
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	40023800 	.word	0x40023800

080090c0 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80090cc:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <RCC_PCLK1Config+0x34>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80090d8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80090e2:	4a04      	ldr	r2, [pc, #16]	; (80090f4 <RCC_PCLK1Config+0x34>)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6093      	str	r3, [r2, #8]
}
 80090e8:	bf00      	nop
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	40023800 	.word	0x40023800

080090f8 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8009104:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <RCC_PCLK2Config+0x38>)
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009110:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800911c:	4a04      	ldr	r2, [pc, #16]	; (8009130 <RCC_PCLK2Config+0x38>)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6093      	str	r3, [r2, #8]
}
 8009122:	bf00      	nop
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	40023800 	.word	0x40023800

08009134 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8009134:	b480      	push	{r7}
 8009136:	b089      	sub	sp, #36	; 0x24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800913c:	2300      	movs	r3, #0
 800913e:	61bb      	str	r3, [r7, #24]
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	2300      	movs	r3, #0
 8009146:	61fb      	str	r3, [r7, #28]
 8009148:	2302      	movs	r3, #2
 800914a:	613b      	str	r3, [r7, #16]
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	2302      	movs	r3, #2
 8009152:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009154:	4b47      	ldr	r3, [pc, #284]	; (8009274 <RCC_GetClocksFreq+0x140>)
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f003 030c 	and.w	r3, r3, #12
 800915c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	2b04      	cmp	r3, #4
 8009162:	d007      	beq.n	8009174 <RCC_GetClocksFreq+0x40>
 8009164:	2b08      	cmp	r3, #8
 8009166:	d009      	beq.n	800917c <RCC_GetClocksFreq+0x48>
 8009168:	2b00      	cmp	r3, #0
 800916a:	d13d      	bne.n	80091e8 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a42      	ldr	r2, [pc, #264]	; (8009278 <RCC_GetClocksFreq+0x144>)
 8009170:	601a      	str	r2, [r3, #0]
      break;
 8009172:	e03d      	b.n	80091f0 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a41      	ldr	r2, [pc, #260]	; (800927c <RCC_GetClocksFreq+0x148>)
 8009178:	601a      	str	r2, [r3, #0]
      break;
 800917a:	e039      	b.n	80091f0 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800917c:	4b3d      	ldr	r3, [pc, #244]	; (8009274 <RCC_GetClocksFreq+0x140>)
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	0d9b      	lsrs	r3, r3, #22
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009188:	4b3a      	ldr	r3, [pc, #232]	; (8009274 <RCC_GetClocksFreq+0x140>)
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009190:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00c      	beq.n	80091b2 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8009198:	4a38      	ldr	r2, [pc, #224]	; (800927c <RCC_GetClocksFreq+0x148>)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a0:	4a34      	ldr	r2, [pc, #208]	; (8009274 <RCC_GetClocksFreq+0x140>)
 80091a2:	6852      	ldr	r2, [r2, #4]
 80091a4:	0992      	lsrs	r2, r2, #6
 80091a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091aa:	fb02 f303 	mul.w	r3, r2, r3
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	e00b      	b.n	80091ca <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80091b2:	4a31      	ldr	r2, [pc, #196]	; (8009278 <RCC_GetClocksFreq+0x144>)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ba:	4a2e      	ldr	r2, [pc, #184]	; (8009274 <RCC_GetClocksFreq+0x140>)
 80091bc:	6852      	ldr	r2, [r2, #4]
 80091be:	0992      	lsrs	r2, r2, #6
 80091c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091c4:	fb02 f303 	mul.w	r3, r2, r3
 80091c8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80091ca:	4b2a      	ldr	r3, [pc, #168]	; (8009274 <RCC_GetClocksFreq+0x140>)
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	0c1b      	lsrs	r3, r3, #16
 80091d0:	f003 0303 	and.w	r3, r3, #3
 80091d4:	3301      	adds	r3, #1
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80091da:	69fa      	ldr	r2, [r7, #28]
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	fbb2 f2f3 	udiv	r2, r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
      break;
 80091e6:	e003      	b.n	80091f0 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a23      	ldr	r2, [pc, #140]	; (8009278 <RCC_GetClocksFreq+0x144>)
 80091ec:	601a      	str	r2, [r3, #0]
      break;
 80091ee:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80091f0:	4b20      	ldr	r3, [pc, #128]	; (8009274 <RCC_GetClocksFreq+0x140>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	091b      	lsrs	r3, r3, #4
 80091fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009200:	4a1f      	ldr	r2, [pc, #124]	; (8009280 <RCC_GetClocksFreq+0x14c>)
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	4413      	add	r3, r2
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	b2db      	uxtb	r3, r3
 800920a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	40da      	lsrs	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8009218:	4b16      	ldr	r3, [pc, #88]	; (8009274 <RCC_GetClocksFreq+0x140>)
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009220:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	0a9b      	lsrs	r3, r3, #10
 8009226:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009228:	4a15      	ldr	r2, [pc, #84]	; (8009280 <RCC_GetClocksFreq+0x14c>)
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	4413      	add	r3, r2
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	40da      	lsrs	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8009240:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <RCC_GetClocksFreq+0x140>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009248:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	0b5b      	lsrs	r3, r3, #13
 800924e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009250:	4a0b      	ldr	r2, [pc, #44]	; (8009280 <RCC_GetClocksFreq+0x14c>)
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	4413      	add	r3, r2
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	40da      	lsrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60da      	str	r2, [r3, #12]
}
 8009268:	bf00      	nop
 800926a:	3724      	adds	r7, #36	; 0x24
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	40023800 	.word	0x40023800
 8009278:	00f42400 	.word	0x00f42400
 800927c:	017d7840 	.word	0x017d7840
 8009280:	20000004 	.word	0x20000004

08009284 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800929a:	d111      	bne.n	80092c0 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800929c:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <RCC_RTCCLKConfig+0x58>)
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80092a8:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80092b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80092ba:	4a08      	ldr	r2, [pc, #32]	; (80092dc <RCC_RTCCLKConfig+0x58>)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80092c0:	4906      	ldr	r1, [pc, #24]	; (80092dc <RCC_RTCCLKConfig+0x58>)
 80092c2:	4b06      	ldr	r3, [pc, #24]	; (80092dc <RCC_RTCCLKConfig+0x58>)
 80092c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092cc:	4313      	orrs	r3, r2
 80092ce:	670b      	str	r3, [r1, #112]	; 0x70
}
 80092d0:	bf00      	nop
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	40023800 	.word	0x40023800

080092e0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80092ea:	4a04      	ldr	r2, [pc, #16]	; (80092fc <RCC_RTCCLKCmd+0x1c>)
 80092ec:	79fb      	ldrb	r3, [r7, #7]
 80092ee:	6013      	str	r3, [r2, #0]
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	42470e3c 	.word	0x42470e3c

08009300 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800930a:	4a04      	ldr	r2, [pc, #16]	; (800931c <RCC_BackupResetCmd+0x1c>)
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	6013      	str	r3, [r2, #0]
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	42470e40 	.word	0x42470e40

08009320 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8009328:	4a04      	ldr	r2, [pc, #16]	; (800933c <RCC_I2SCLKConfig+0x1c>)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6013      	str	r3, [r2, #0]
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	4247015c 	.word	0x4247015c

08009340 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8009348:	4a04      	ldr	r2, [pc, #16]	; (800935c <RCC_TIMCLKPresConfig+0x1c>)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6013      	str	r3, [r2, #0]
  
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	424711e0 	.word	0x424711e0

08009360 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d006      	beq.n	8009380 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8009372:	490a      	ldr	r1, [pc, #40]	; (800939c <RCC_AHB1PeriphClockCmd+0x3c>)
 8009374:	4b09      	ldr	r3, [pc, #36]	; (800939c <RCC_AHB1PeriphClockCmd+0x3c>)
 8009376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4313      	orrs	r3, r2
 800937c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800937e:	e006      	b.n	800938e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8009380:	4906      	ldr	r1, [pc, #24]	; (800939c <RCC_AHB1PeriphClockCmd+0x3c>)
 8009382:	4b06      	ldr	r3, [pc, #24]	; (800939c <RCC_AHB1PeriphClockCmd+0x3c>)
 8009384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	43db      	mvns	r3, r3
 800938a:	4013      	ands	r3, r2
 800938c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800938e:	bf00      	nop
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	40023800 	.word	0x40023800

080093a0 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80093ac:	78fb      	ldrb	r3, [r7, #3]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d006      	beq.n	80093c0 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80093b2:	490a      	ldr	r1, [pc, #40]	; (80093dc <RCC_AHB2PeriphClockCmd+0x3c>)
 80093b4:	4b09      	ldr	r3, [pc, #36]	; (80093dc <RCC_AHB2PeriphClockCmd+0x3c>)
 80093b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 80093be:	e006      	b.n	80093ce <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80093c0:	4906      	ldr	r1, [pc, #24]	; (80093dc <RCC_AHB2PeriphClockCmd+0x3c>)
 80093c2:	4b06      	ldr	r3, [pc, #24]	; (80093dc <RCC_AHB2PeriphClockCmd+0x3c>)
 80093c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	43db      	mvns	r3, r3
 80093ca:	4013      	ands	r3, r2
 80093cc:	634b      	str	r3, [r1, #52]	; 0x34
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40023800 	.word	0x40023800

080093e0 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d006      	beq.n	8009400 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80093f2:	490a      	ldr	r1, [pc, #40]	; (800941c <RCC_AHB3PeriphClockCmd+0x3c>)
 80093f4:	4b09      	ldr	r3, [pc, #36]	; (800941c <RCC_AHB3PeriphClockCmd+0x3c>)
 80093f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	638b      	str	r3, [r1, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
 80093fe:	e006      	b.n	800940e <RCC_AHB3PeriphClockCmd+0x2e>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8009400:	4906      	ldr	r1, [pc, #24]	; (800941c <RCC_AHB3PeriphClockCmd+0x3c>)
 8009402:	4b06      	ldr	r3, [pc, #24]	; (800941c <RCC_AHB3PeriphClockCmd+0x3c>)
 8009404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	43db      	mvns	r3, r3
 800940a:	4013      	ands	r3, r2
 800940c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800940e:	bf00      	nop
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	40023800 	.word	0x40023800

08009420 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800942c:	78fb      	ldrb	r3, [r7, #3]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d006      	beq.n	8009440 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8009432:	490a      	ldr	r1, [pc, #40]	; (800945c <RCC_APB1PeriphClockCmd+0x3c>)
 8009434:	4b09      	ldr	r3, [pc, #36]	; (800945c <RCC_APB1PeriphClockCmd+0x3c>)
 8009436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4313      	orrs	r3, r2
 800943c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800943e:	e006      	b.n	800944e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8009440:	4906      	ldr	r1, [pc, #24]	; (800945c <RCC_APB1PeriphClockCmd+0x3c>)
 8009442:	4b06      	ldr	r3, [pc, #24]	; (800945c <RCC_APB1PeriphClockCmd+0x3c>)
 8009444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	43db      	mvns	r3, r3
 800944a:	4013      	ands	r3, r2
 800944c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800944e:	bf00      	nop
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	40023800 	.word	0x40023800

08009460 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d006      	beq.n	8009480 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8009472:	490a      	ldr	r1, [pc, #40]	; (800949c <RCC_APB2PeriphClockCmd+0x3c>)
 8009474:	4b09      	ldr	r3, [pc, #36]	; (800949c <RCC_APB2PeriphClockCmd+0x3c>)
 8009476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4313      	orrs	r3, r2
 800947c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800947e:	e006      	b.n	800948e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8009480:	4906      	ldr	r1, [pc, #24]	; (800949c <RCC_APB2PeriphClockCmd+0x3c>)
 8009482:	4b06      	ldr	r3, [pc, #24]	; (800949c <RCC_APB2PeriphClockCmd+0x3c>)
 8009484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	43db      	mvns	r3, r3
 800948a:	4013      	ands	r3, r2
 800948c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800948e:	bf00      	nop
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40023800 	.word	0x40023800

080094a0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80094ac:	78fb      	ldrb	r3, [r7, #3]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d006      	beq.n	80094c0 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80094b2:	490a      	ldr	r1, [pc, #40]	; (80094dc <RCC_AHB1PeriphResetCmd+0x3c>)
 80094b4:	4b09      	ldr	r3, [pc, #36]	; (80094dc <RCC_AHB1PeriphResetCmd+0x3c>)
 80094b6:	691a      	ldr	r2, [r3, #16]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
 80094be:	e006      	b.n	80094ce <RCC_AHB1PeriphResetCmd+0x2e>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80094c0:	4906      	ldr	r1, [pc, #24]	; (80094dc <RCC_AHB1PeriphResetCmd+0x3c>)
 80094c2:	4b06      	ldr	r3, [pc, #24]	; (80094dc <RCC_AHB1PeriphResetCmd+0x3c>)
 80094c4:	691a      	ldr	r2, [r3, #16]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	43db      	mvns	r3, r3
 80094ca:	4013      	ands	r3, r2
 80094cc:	610b      	str	r3, [r1, #16]
}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	40023800 	.word	0x40023800

080094e0 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d006      	beq.n	8009500 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80094f2:	490a      	ldr	r1, [pc, #40]	; (800951c <RCC_AHB2PeriphResetCmd+0x3c>)
 80094f4:	4b09      	ldr	r3, [pc, #36]	; (800951c <RCC_AHB2PeriphResetCmd+0x3c>)
 80094f6:	695a      	ldr	r2, [r3, #20]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
 80094fe:	e006      	b.n	800950e <RCC_AHB2PeriphResetCmd+0x2e>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8009500:	4906      	ldr	r1, [pc, #24]	; (800951c <RCC_AHB2PeriphResetCmd+0x3c>)
 8009502:	4b06      	ldr	r3, [pc, #24]	; (800951c <RCC_AHB2PeriphResetCmd+0x3c>)
 8009504:	695a      	ldr	r2, [r3, #20]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	43db      	mvns	r3, r3
 800950a:	4013      	ands	r3, r2
 800950c:	614b      	str	r3, [r1, #20]
}
 800950e:	bf00      	nop
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	40023800 	.word	0x40023800

08009520 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d006      	beq.n	8009540 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8009532:	490a      	ldr	r1, [pc, #40]	; (800955c <RCC_AHB3PeriphResetCmd+0x3c>)
 8009534:	4b09      	ldr	r3, [pc, #36]	; (800955c <RCC_AHB3PeriphResetCmd+0x3c>)
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4313      	orrs	r3, r2
 800953c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
 800953e:	e006      	b.n	800954e <RCC_AHB3PeriphResetCmd+0x2e>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8009540:	4906      	ldr	r1, [pc, #24]	; (800955c <RCC_AHB3PeriphResetCmd+0x3c>)
 8009542:	4b06      	ldr	r3, [pc, #24]	; (800955c <RCC_AHB3PeriphResetCmd+0x3c>)
 8009544:	699a      	ldr	r2, [r3, #24]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	43db      	mvns	r3, r3
 800954a:	4013      	ands	r3, r2
 800954c:	618b      	str	r3, [r1, #24]
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	40023800 	.word	0x40023800

08009560 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d006      	beq.n	8009580 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8009572:	490a      	ldr	r1, [pc, #40]	; (800959c <RCC_APB1PeriphResetCmd+0x3c>)
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <RCC_APB1PeriphResetCmd+0x3c>)
 8009576:	6a1a      	ldr	r2, [r3, #32]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4313      	orrs	r3, r2
 800957c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800957e:	e006      	b.n	800958e <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8009580:	4906      	ldr	r1, [pc, #24]	; (800959c <RCC_APB1PeriphResetCmd+0x3c>)
 8009582:	4b06      	ldr	r3, [pc, #24]	; (800959c <RCC_APB1PeriphResetCmd+0x3c>)
 8009584:	6a1a      	ldr	r2, [r3, #32]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	43db      	mvns	r3, r3
 800958a:	4013      	ands	r3, r2
 800958c:	620b      	str	r3, [r1, #32]
}
 800958e:	bf00      	nop
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	40023800 	.word	0x40023800

080095a0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d006      	beq.n	80095c0 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80095b2:	490a      	ldr	r1, [pc, #40]	; (80095dc <RCC_APB2PeriphResetCmd+0x3c>)
 80095b4:	4b09      	ldr	r3, [pc, #36]	; (80095dc <RCC_APB2PeriphResetCmd+0x3c>)
 80095b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80095be:	e006      	b.n	80095ce <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80095c0:	4906      	ldr	r1, [pc, #24]	; (80095dc <RCC_APB2PeriphResetCmd+0x3c>)
 80095c2:	4b06      	ldr	r3, [pc, #24]	; (80095dc <RCC_APB2PeriphResetCmd+0x3c>)
 80095c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	43db      	mvns	r3, r3
 80095ca:	4013      	ands	r3, r2
 80095cc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	40023800 	.word	0x40023800

080095e0 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d006      	beq.n	8009600 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 80095f2:	490a      	ldr	r1, [pc, #40]	; (800961c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 80095f4:	4b09      	ldr	r3, [pc, #36]	; (800961c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 80095f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	650b      	str	r3, [r1, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
 80095fe:	e006      	b.n	800960e <RCC_AHB1PeriphClockLPModeCmd+0x2e>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8009600:	4906      	ldr	r1, [pc, #24]	; (800961c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8009602:	4b06      	ldr	r3, [pc, #24]	; (800961c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8009604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	43db      	mvns	r3, r3
 800960a:	4013      	ands	r3, r2
 800960c:	650b      	str	r3, [r1, #80]	; 0x50
}
 800960e:	bf00      	nop
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	40023800 	.word	0x40023800

08009620 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d006      	beq.n	8009640 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8009632:	490a      	ldr	r1, [pc, #40]	; (800965c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8009634:	4b09      	ldr	r3, [pc, #36]	; (800965c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8009636:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4313      	orrs	r3, r2
 800963c:	654b      	str	r3, [r1, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
 800963e:	e006      	b.n	800964e <RCC_AHB2PeriphClockLPModeCmd+0x2e>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8009640:	4906      	ldr	r1, [pc, #24]	; (800965c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8009642:	4b06      	ldr	r3, [pc, #24]	; (800965c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8009644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	43db      	mvns	r3, r3
 800964a:	4013      	ands	r3, r2
 800964c:	654b      	str	r3, [r1, #84]	; 0x54
}
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	40023800 	.word	0x40023800

08009660 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d006      	beq.n	8009680 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8009672:	490a      	ldr	r1, [pc, #40]	; (800969c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8009674:	4b09      	ldr	r3, [pc, #36]	; (800969c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8009676:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4313      	orrs	r3, r2
 800967c:	658b      	str	r3, [r1, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
 800967e:	e006      	b.n	800968e <RCC_AHB3PeriphClockLPModeCmd+0x2e>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8009680:	4906      	ldr	r1, [pc, #24]	; (800969c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8009682:	4b06      	ldr	r3, [pc, #24]	; (800969c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8009684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	43db      	mvns	r3, r3
 800968a:	4013      	ands	r3, r2
 800968c:	658b      	str	r3, [r1, #88]	; 0x58
}
 800968e:	bf00      	nop
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	40023800 	.word	0x40023800

080096a0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80096ac:	78fb      	ldrb	r3, [r7, #3]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d006      	beq.n	80096c0 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80096b2:	490a      	ldr	r1, [pc, #40]	; (80096dc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 80096b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	660b      	str	r3, [r1, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
 80096be:	e006      	b.n	80096ce <RCC_APB1PeriphClockLPModeCmd+0x2e>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80096c0:	4906      	ldr	r1, [pc, #24]	; (80096dc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 80096c2:	4b06      	ldr	r3, [pc, #24]	; (80096dc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 80096c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	43db      	mvns	r3, r3
 80096ca:	4013      	ands	r3, r2
 80096cc:	660b      	str	r3, [r1, #96]	; 0x60
}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	40023800 	.word	0x40023800

080096e0 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d006      	beq.n	8009700 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80096f2:	490a      	ldr	r1, [pc, #40]	; (800971c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 80096f4:	4b09      	ldr	r3, [pc, #36]	; (800971c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 80096f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	664b      	str	r3, [r1, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
 80096fe:	e006      	b.n	800970e <RCC_APB2PeriphClockLPModeCmd+0x2e>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8009700:	4906      	ldr	r1, [pc, #24]	; (800971c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8009702:	4b06      	ldr	r3, [pc, #24]	; (800971c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8009704:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	43db      	mvns	r3, r3
 800970a:	4013      	ands	r3, r2
 800970c:	664b      	str	r3, [r1, #100]	; 0x64
}
 800970e:	bf00      	nop
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	40023800 	.word	0x40023800

08009720 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	460a      	mov	r2, r1
 800972a:	71fb      	strb	r3, [r7, #7]
 800972c:	4613      	mov	r3, r2
 800972e:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009730:	79bb      	ldrb	r3, [r7, #6]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d008      	beq.n	8009748 <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8009736:	490c      	ldr	r1, [pc, #48]	; (8009768 <RCC_ITConfig+0x48>)
 8009738:	4b0b      	ldr	r3, [pc, #44]	; (8009768 <RCC_ITConfig+0x48>)
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	b2da      	uxtb	r2, r3
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	4313      	orrs	r3, r2
 8009742:	b2db      	uxtb	r3, r3
 8009744:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
 8009746:	e009      	b.n	800975c <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8009748:	4907      	ldr	r1, [pc, #28]	; (8009768 <RCC_ITConfig+0x48>)
 800974a:	4b07      	ldr	r3, [pc, #28]	; (8009768 <RCC_ITConfig+0x48>)
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	b2da      	uxtb	r2, r3
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	43db      	mvns	r3, r3
 8009754:	b2db      	uxtb	r3, r3
 8009756:	4013      	ands	r3, r2
 8009758:	b2db      	uxtb	r3, r3
 800975a:	700b      	strb	r3, [r1, #0]
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	4002380d 	.word	0x4002380d

0800976c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800977e:	2300      	movs	r3, #0
 8009780:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8009782:	79fb      	ldrb	r3, [r7, #7]
 8009784:	095b      	lsrs	r3, r3, #5
 8009786:	b2db      	uxtb	r3, r3
 8009788:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d103      	bne.n	8009798 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8009790:	4b12      	ldr	r3, [pc, #72]	; (80097dc <RCC_GetFlagStatus+0x70>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	e009      	b.n	80097ac <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b02      	cmp	r3, #2
 800979c:	d103      	bne.n	80097a6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800979e:	4b0f      	ldr	r3, [pc, #60]	; (80097dc <RCC_GetFlagStatus+0x70>)
 80097a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a2:	617b      	str	r3, [r7, #20]
 80097a4:	e002      	b.n	80097ac <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80097a6:	4b0d      	ldr	r3, [pc, #52]	; (80097dc <RCC_GetFlagStatus+0x70>)
 80097a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097aa:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80097ac:	79fb      	ldrb	r3, [r7, #7]
 80097ae:	f003 031f 	and.w	r3, r3, #31
 80097b2:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	fa22 f303 	lsr.w	r3, r2, r3
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80097c4:	2301      	movs	r3, #1
 80097c6:	74fb      	strb	r3, [r7, #19]
 80097c8:	e001      	b.n	80097ce <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80097ca:	2300      	movs	r3, #0
 80097cc:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80097ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	371c      	adds	r7, #28
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	40023800 	.word	0x40023800

080097e0 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80097e0:	b480      	push	{r7}
 80097e2:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80097e4:	4a05      	ldr	r2, [pc, #20]	; (80097fc <RCC_ClearFlag+0x1c>)
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <RCC_ClearFlag+0x1c>)
 80097e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097ee:	6753      	str	r3, [r2, #116]	; 0x74
}
 80097f0:	bf00      	nop
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	40023800 	.word	0x40023800

08009800 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt             
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800980e:	4b09      	ldr	r3, [pc, #36]	; (8009834 <RCC_GetITStatus+0x34>)
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	4013      	ands	r3, r2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 800981a:	2301      	movs	r3, #1
 800981c:	73fb      	strb	r3, [r7, #15]
 800981e:	e001      	b.n	8009824 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8009824:	7bfb      	ldrb	r3, [r7, #15]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	40023800 	.word	0x40023800

08009838 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	4603      	mov	r3, r0
 8009840:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8009842:	4a04      	ldr	r2, [pc, #16]	; (8009854 <RCC_ClearITPendingBit+0x1c>)
 8009844:	79fb      	ldrb	r3, [r7, #7]
 8009846:	7013      	strb	r3, [r2, #0]
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	4002380e 	.word	0x4002380e

08009858 <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800985c:	2101      	movs	r1, #1
 800985e:	2040      	movs	r0, #64	; 0x40
 8009860:	f7ff fe3e 	bl	80094e0 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8009864:	2100      	movs	r1, #0
 8009866:	2040      	movs	r0, #64	; 0x40
 8009868:	f7ff fe3a 	bl	80094e0 <RCC_AHB2PeriphResetCmd>
}
 800986c:	bf00      	nop
 800986e:	bd80      	pop	{r7, pc}

08009870 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d006      	beq.n	800988e <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8009880:	4a09      	ldr	r2, [pc, #36]	; (80098a8 <RNG_Cmd+0x38>)
 8009882:	4b09      	ldr	r3, [pc, #36]	; (80098a8 <RNG_Cmd+0x38>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f043 0304 	orr.w	r3, r3, #4
 800988a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
 800988c:	e005      	b.n	800989a <RNG_Cmd+0x2a>
    RNG->CR &= ~RNG_CR_RNGEN;
 800988e:	4a06      	ldr	r2, [pc, #24]	; (80098a8 <RNG_Cmd+0x38>)
 8009890:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <RNG_Cmd+0x38>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f023 0304 	bic.w	r3, r3, #4
 8009898:	6013      	str	r3, [r2, #0]
}
 800989a:	bf00      	nop
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	50060800 	.word	0x50060800

080098ac <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 80098ac:	b480      	push	{r7}
 80098ae:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 80098b0:	4b03      	ldr	r3, [pc, #12]	; (80098c0 <RNG_GetRandomNumber+0x14>)
 80098b2:	689b      	ldr	r3, [r3, #8]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	50060800 	.word	0x50060800

080098c4 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d006      	beq.n	80098e2 <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 80098d4:	4a09      	ldr	r2, [pc, #36]	; (80098fc <RNG_ITConfig+0x38>)
 80098d6:	4b09      	ldr	r3, [pc, #36]	; (80098fc <RNG_ITConfig+0x38>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f043 0308 	orr.w	r3, r3, #8
 80098de:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
  }
}
 80098e0:	e005      	b.n	80098ee <RNG_ITConfig+0x2a>
    RNG->CR &= ~RNG_CR_IE;
 80098e2:	4a06      	ldr	r2, [pc, #24]	; (80098fc <RNG_ITConfig+0x38>)
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <RNG_ITConfig+0x38>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f023 0308 	bic.w	r3, r3, #8
 80098ec:	6013      	str	r3, [r2, #0]
}
 80098ee:	bf00      	nop
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	50060800 	.word	0x50060800

08009900 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 800990e:	4b09      	ldr	r3, [pc, #36]	; (8009934 <RNG_GetFlagStatus+0x34>)
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	4013      	ands	r3, r2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 800991a:	2301      	movs	r3, #1
 800991c:	73fb      	strb	r3, [r7, #15]
 800991e:	e001      	b.n	8009924 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 8009920:	2300      	movs	r3, #0
 8009922:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 8009924:	7bfb      	ldrb	r3, [r7, #15]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	50060800 	.word	0x50060800

08009938 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 8009942:	4a05      	ldr	r2, [pc, #20]	; (8009958 <RNG_ClearFlag+0x20>)
 8009944:	79fb      	ldrb	r3, [r7, #7]
 8009946:	011b      	lsls	r3, r3, #4
 8009948:	43db      	mvns	r3, r3
 800994a:	6053      	str	r3, [r2, #4]
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	50060800 	.word	0x50060800

0800995c <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <RNG_GetITStatus+0x34>)
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	4013      	ands	r3, r2
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8009976:	2301      	movs	r3, #1
 8009978:	73fb      	strb	r3, [r7, #15]
 800997a:	e001      	b.n	8009980 <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	50060800 	.word	0x50060800

08009994 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	4603      	mov	r3, r0
 800999c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 800999e:	4a05      	ldr	r2, [pc, #20]	; (80099b4 <RNG_ClearITPendingBit+0x20>)
 80099a0:	79fb      	ldrb	r3, [r7, #7]
 80099a2:	43db      	mvns	r3, r3
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	6053      	str	r3, [r2, #4]
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	50060800 	.word	0x50060800

080099b8 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 80099be:	2300      	movs	r3, #0
 80099c0:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80099ca:	4b36      	ldr	r3, [pc, #216]	; (8009aa4 <RTC_DeInit+0xec>)
 80099cc:	22ca      	movs	r2, #202	; 0xca
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80099d0:	4b34      	ldr	r3, [pc, #208]	; (8009aa4 <RTC_DeInit+0xec>)
 80099d2:	2253      	movs	r2, #83	; 0x53
 80099d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80099d6:	f000 f8d3 	bl	8009b80 <RTC_EnterInitMode>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d102      	bne.n	80099e6 <RTC_DeInit+0x2e>
  {
    status = ERROR;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]
 80099e4:	e055      	b.n	8009a92 <RTC_DeInit+0xda>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 80099e6:	4b2f      	ldr	r3, [pc, #188]	; (8009aa4 <RTC_DeInit+0xec>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 80099ec:	4b2d      	ldr	r3, [pc, #180]	; (8009aa4 <RTC_DeInit+0xec>)
 80099ee:	f242 1201 	movw	r2, #8449	; 0x2101
 80099f2:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 80099f4:	4a2b      	ldr	r2, [pc, #172]	; (8009aa4 <RTC_DeInit+0xec>)
 80099f6:	4b2b      	ldr	r3, [pc, #172]	; (8009aa4 <RTC_DeInit+0xec>)
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f003 0307 	and.w	r3, r3, #7
 80099fe:	6093      	str	r3, [r2, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a16:	d002      	beq.n	8009a1e <RTC_DeInit+0x66>
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d0f0      	beq.n	8009a00 <RTC_DeInit+0x48>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8009a1e:	4b21      	ldr	r3, [pc, #132]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f003 0304 	and.w	r3, r3, #4
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d102      	bne.n	8009a30 <RTC_DeInit+0x78>
    {
      status = ERROR;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]
 8009a2e:	e030      	b.n	8009a92 <RTC_DeInit+0xda>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 8009a30:	4b1c      	ldr	r3, [pc, #112]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	4b1b      	ldr	r3, [pc, #108]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 8009a3a:	4b1a      	ldr	r3, [pc, #104]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a40:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 8009a42:	4b18      	ldr	r3, [pc, #96]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a44:	4a18      	ldr	r2, [pc, #96]	; (8009aa8 <RTC_DeInit+0xf0>)
 8009a46:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 8009a48:	4b16      	ldr	r3, [pc, #88]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 8009a4e:	4b15      	ldr	r3, [pc, #84]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 8009a54:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 8009a5a:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 8009a60:	4b10      	ldr	r3, [pc, #64]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 8009a66:	4b0f      	ldr	r3, [pc, #60]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 8009a6c:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 8009a72:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 8009a78:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 8009a7e:	f000 f8c9 	bl	8009c14 <RTC_WaitForSynchro>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d102      	bne.n	8009a8e <RTC_DeInit+0xd6>
      {
        status = ERROR;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]
 8009a8c:	e001      	b.n	8009a92 <RTC_DeInit+0xda>
      }
      else
      {
        status = SUCCESS;      
 8009a8e:	2301      	movs	r3, #1
 8009a90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8009a92:	4b04      	ldr	r3, [pc, #16]	; (8009aa4 <RTC_DeInit+0xec>)
 8009a94:	22ff      	movs	r2, #255	; 0xff
 8009a96:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	40002800 	.word	0x40002800
 8009aa8:	007f00ff 	.word	0x007f00ff

08009aac <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009ab8:	4b19      	ldr	r3, [pc, #100]	; (8009b20 <RTC_Init+0x74>)
 8009aba:	22ca      	movs	r2, #202	; 0xca
 8009abc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009abe:	4b18      	ldr	r3, [pc, #96]	; (8009b20 <RTC_Init+0x74>)
 8009ac0:	2253      	movs	r2, #83	; 0x53
 8009ac2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009ac4:	f000 f85c 	bl	8009b80 <RTC_EnterInitMode>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <RTC_Init+0x28>
  {
    status = ERROR;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]
 8009ad2:	e01c      	b.n	8009b0e <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8009ad4:	4a12      	ldr	r2, [pc, #72]	; (8009b20 <RTC_Init+0x74>)
 8009ad6:	4b12      	ldr	r3, [pc, #72]	; (8009b20 <RTC_Init+0x74>)
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ade:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8009ae0:	490f      	ldr	r1, [pc, #60]	; (8009b20 <RTC_Init+0x74>)
 8009ae2:	4b0f      	ldr	r3, [pc, #60]	; (8009b20 <RTC_Init+0x74>)
 8009ae4:	689a      	ldr	r2, [r3, #8]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	608b      	str	r3, [r1, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8009aee:	4a0c      	ldr	r2, [pc, #48]	; (8009b20 <RTC_Init+0x74>)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	6113      	str	r3, [r2, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8009af6:	490a      	ldr	r1, [pc, #40]	; (8009b20 <RTC_Init+0x74>)
 8009af8:	4b09      	ldr	r3, [pc, #36]	; (8009b20 <RTC_Init+0x74>)
 8009afa:	691a      	ldr	r2, [r3, #16]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	4313      	orrs	r3, r2
 8009b04:	610b      	str	r3, [r1, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8009b06:	f000 f875 	bl	8009bf4 <RTC_ExitInitMode>

    status = SUCCESS;    
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009b0e:	4b04      	ldr	r3, [pc, #16]	; (8009b20 <RTC_Init+0x74>)
 8009b10:	22ff      	movs	r2, #255	; 0xff
 8009b12:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	40002800 	.word	0x40002800

08009b24 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	227f      	movs	r2, #127	; 0x7f
 8009b36:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	22ff      	movs	r2, #255	; 0xff
 8009b3c:	609a      	str	r2, [r3, #8]
}
 8009b3e:	bf00      	nop
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	4603      	mov	r3, r0
 8009b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <RTC_WriteProtectionCmd+0x18>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8009b5a:	4b08      	ldr	r3, [pc, #32]	; (8009b7c <RTC_WriteProtectionCmd+0x32>)
 8009b5c:	22ff      	movs	r2, #255	; 0xff
 8009b5e:	625a      	str	r2, [r3, #36]	; 0x24
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
    RTC->WPR = 0x53;    
  }
}
 8009b60:	e005      	b.n	8009b6e <RTC_WriteProtectionCmd+0x24>
    RTC->WPR = 0xCA;
 8009b62:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <RTC_WriteProtectionCmd+0x32>)
 8009b64:	22ca      	movs	r2, #202	; 0xca
 8009b66:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8009b68:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <RTC_WriteProtectionCmd+0x32>)
 8009b6a:	2253      	movs	r2, #83	; 0x53
 8009b6c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009b6e:	bf00      	nop
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	40002800 	.word	0x40002800

08009b80 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 8009b86:	2300      	movs	r3, #0
 8009b88:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009b92:	4b17      	ldr	r3, [pc, #92]	; (8009bf0 <RTC_EnterInitMode+0x70>)
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d11e      	bne.n	8009bdc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8009b9e:	4b14      	ldr	r3, [pc, #80]	; (8009bf0 <RTC_EnterInitMode+0x70>)
 8009ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ba4:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8009ba6:	4b12      	ldr	r3, [pc, #72]	; (8009bf0 <RTC_EnterInitMode+0x70>)
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bae:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bbc:	d002      	beq.n	8009bc4 <RTC_EnterInitMode+0x44>
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0f0      	beq.n	8009ba6 <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8009bc4:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <RTC_EnterInitMode+0x70>)
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	73fb      	strb	r3, [r7, #15]
 8009bd4:	e004      	b.n	8009be0 <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73fb      	strb	r3, [r7, #15]
 8009bda:	e001      	b.n	8009be0 <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 8009bdc:	2301      	movs	r3, #1
 8009bde:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 8009be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	40002800 	.word	0x40002800

08009bf4 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8009bf8:	4a05      	ldr	r2, [pc, #20]	; (8009c10 <RTC_ExitInitMode+0x1c>)
 8009bfa:	4b05      	ldr	r3, [pc, #20]	; (8009c10 <RTC_ExitInitMode+0x1c>)
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c02:	60d3      	str	r3, [r2, #12]
}
 8009c04:	bf00      	nop
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	40002800 	.word	0x40002800

08009c14 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009c26:	4b18      	ldr	r3, [pc, #96]	; (8009c88 <RTC_WaitForSynchro+0x74>)
 8009c28:	22ca      	movs	r2, #202	; 0xca
 8009c2a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009c2c:	4b16      	ldr	r3, [pc, #88]	; (8009c88 <RTC_WaitForSynchro+0x74>)
 8009c2e:	2253      	movs	r2, #83	; 0x53
 8009c30:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8009c32:	4a15      	ldr	r2, [pc, #84]	; (8009c88 <RTC_WaitForSynchro+0x74>)
 8009c34:	4b14      	ldr	r3, [pc, #80]	; (8009c88 <RTC_WaitForSynchro+0x74>)
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c3c:	60d3      	str	r3, [r2, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8009c3e:	4b12      	ldr	r3, [pc, #72]	; (8009c88 <RTC_WaitForSynchro+0x74>)
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f003 0320 	and.w	r3, r3, #32
 8009c46:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c54:	d002      	beq.n	8009c5c <RTC_WaitForSynchro+0x48>
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0f0      	beq.n	8009c3e <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8009c5c:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <RTC_WaitForSynchro+0x74>)
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f003 0320 	and.w	r3, r3, #32
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	73fb      	strb	r3, [r7, #15]
 8009c6c:	e001      	b.n	8009c72 <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009c72:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <RTC_WaitForSynchro+0x74>)
 8009c74:	22ff      	movs	r2, #255	; 0xff
 8009c76:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	40002800 	.word	0x40002800

08009c8c <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4603      	mov	r3, r0
 8009c94:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009c9a:	4b15      	ldr	r3, [pc, #84]	; (8009cf0 <RTC_RefClockCmd+0x64>)
 8009c9c:	22ca      	movs	r2, #202	; 0xca
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009ca0:	4b13      	ldr	r3, [pc, #76]	; (8009cf0 <RTC_RefClockCmd+0x64>)
 8009ca2:	2253      	movs	r2, #83	; 0x53
 8009ca4:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009ca6:	f7ff ff6b 	bl	8009b80 <RTC_EnterInitMode>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d102      	bne.n	8009cb6 <RTC_RefClockCmd+0x2a>
  {
    status = ERROR;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73fb      	strb	r3, [r7, #15]
 8009cb4:	e013      	b.n	8009cde <RTC_RefClockCmd+0x52>
  } 
  else
  {  
    if (NewState != DISABLE)
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d006      	beq.n	8009cca <RTC_RefClockCmd+0x3e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8009cbc:	4a0c      	ldr	r2, [pc, #48]	; (8009cf0 <RTC_RefClockCmd+0x64>)
 8009cbe:	4b0c      	ldr	r3, [pc, #48]	; (8009cf0 <RTC_RefClockCmd+0x64>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f043 0310 	orr.w	r3, r3, #16
 8009cc6:	6093      	str	r3, [r2, #8]
 8009cc8:	e005      	b.n	8009cd6 <RTC_RefClockCmd+0x4a>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 8009cca:	4a09      	ldr	r2, [pc, #36]	; (8009cf0 <RTC_RefClockCmd+0x64>)
 8009ccc:	4b08      	ldr	r3, [pc, #32]	; (8009cf0 <RTC_RefClockCmd+0x64>)
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f023 0310 	bic.w	r3, r3, #16
 8009cd4:	6093      	str	r3, [r2, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8009cd6:	f7ff ff8d 	bl	8009bf4 <RTC_ExitInitMode>
    
    status = SUCCESS;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8009cde:	4b04      	ldr	r3, [pc, #16]	; (8009cf0 <RTC_RefClockCmd+0x64>)
 8009ce0:	22ff      	movs	r2, #255	; 0xff
 8009ce2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	40002800 	.word	0x40002800

08009cf4 <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <RTC_BypassShadowCmd+0x48>)
 8009d00:	22ca      	movs	r2, #202	; 0xca
 8009d02:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009d04:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <RTC_BypassShadowCmd+0x48>)
 8009d06:	2253      	movs	r2, #83	; 0x53
 8009d08:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8009d0a:	79fb      	ldrb	r3, [r7, #7]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d006      	beq.n	8009d1e <RTC_BypassShadowCmd+0x2a>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009d10:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <RTC_BypassShadowCmd+0x48>)
 8009d12:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <RTC_BypassShadowCmd+0x48>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f043 0320 	orr.w	r3, r3, #32
 8009d1a:	6093      	str	r3, [r2, #8]
 8009d1c:	e005      	b.n	8009d2a <RTC_BypassShadowCmd+0x36>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8009d1e:	4a07      	ldr	r2, [pc, #28]	; (8009d3c <RTC_BypassShadowCmd+0x48>)
 8009d20:	4b06      	ldr	r3, [pc, #24]	; (8009d3c <RTC_BypassShadowCmd+0x48>)
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d28:	6093      	str	r3, [r2, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8009d2a:	4b04      	ldr	r3, [pc, #16]	; (8009d3c <RTC_BypassShadowCmd+0x48>)
 8009d2c:	22ff      	movs	r2, #255	; 0xff
 8009d2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	40002800 	.word	0x40002800

08009d40 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009d40:	b590      	push	{r4, r7, lr}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d109      	bne.n	8009d6c <RTC_SetTime+0x2c>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009d58:	4b3d      	ldr	r3, [pc, #244]	; (8009e50 <RTC_SetTime+0x110>)
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d114      	bne.n	8009d8e <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2200      	movs	r2, #0
 8009d68:	70da      	strb	r2, [r3, #3]
 8009d6a:	e010      	b.n	8009d8e <RTC_SetTime+0x4e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009d6c:	4b38      	ldr	r3, [pc, #224]	; (8009e50 <RTC_SetTime+0x110>)
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d007      	beq.n	8009d88 <RTC_SetTime+0x48>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f001 f8a6 	bl	800aece <RTC_Bcd2ToByte>
 8009d82:	4603      	mov	r3, r0
 8009d84:	60fb      	str	r3, [r7, #12]
 8009d86:	e002      	b.n	8009d8e <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00f      	beq.n	8009db4 <RTC_SetTime+0x74>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	041a      	lsls	r2, r3, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	785b      	ldrb	r3, [r3, #1]
 8009d9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009da0:	4313      	orrs	r3, r2
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	7892      	ldrb	r2, [r2, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009da6:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	78db      	ldrb	r3, [r3, #3]
 8009dac:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	e01b      	b.n	8009dec <RTC_SetTime+0xac>
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 f86b 	bl	800ae94 <RTC_ByteToBcd2>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	041c      	lsls	r4, r3, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f001 f864 	bl	800ae94 <RTC_ByteToBcd2>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009dd0:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	789b      	ldrb	r3, [r3, #2]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 f85c 	bl	800ae94 <RTC_ByteToBcd2>
 8009ddc:	4603      	mov	r3, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009dde:	ea44 0203 	orr.w	r2, r4, r3
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	78db      	ldrb	r3, [r3, #3]
 8009de6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009de8:	4313      	orrs	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009dec:	4b18      	ldr	r3, [pc, #96]	; (8009e50 <RTC_SetTime+0x110>)
 8009dee:	22ca      	movs	r2, #202	; 0xca
 8009df0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009df2:	4b17      	ldr	r3, [pc, #92]	; (8009e50 <RTC_SetTime+0x110>)
 8009df4:	2253      	movs	r2, #83	; 0x53
 8009df6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009df8:	f7ff fec2 	bl	8009b80 <RTC_EnterInitMode>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d102      	bne.n	8009e08 <RTC_SetTime+0xc8>
  {
    status = ERROR;
 8009e02:	2300      	movs	r3, #0
 8009e04:	72fb      	strb	r3, [r7, #11]
 8009e06:	e01b      	b.n	8009e40 <RTC_SetTime+0x100>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009e08:	4a11      	ldr	r2, [pc, #68]	; (8009e50 <RTC_SetTime+0x110>)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009e10:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009e14:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8009e16:	f7ff feed 	bl	8009bf4 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8009e1a:	4b0d      	ldr	r3, [pc, #52]	; (8009e50 <RTC_SetTime+0x110>)
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10a      	bne.n	8009e3c <RTC_SetTime+0xfc>
    {
    if(RTC_WaitForSynchro() == ERROR)
 8009e26:	f7ff fef5 	bl	8009c14 <RTC_WaitForSynchro>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d102      	bne.n	8009e36 <RTC_SetTime+0xf6>
    {
      status = ERROR;
 8009e30:	2300      	movs	r3, #0
 8009e32:	72fb      	strb	r3, [r7, #11]
 8009e34:	e004      	b.n	8009e40 <RTC_SetTime+0x100>
    }
    else
    {
      status = SUCCESS;
 8009e36:	2301      	movs	r3, #1
 8009e38:	72fb      	strb	r3, [r7, #11]
 8009e3a:	e001      	b.n	8009e40 <RTC_SetTime+0x100>
    }
  }
    else
    {
      status = SUCCESS;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009e40:	4b03      	ldr	r3, [pc, #12]	; (8009e50 <RTC_SetTime+0x110>)
 8009e42:	22ff      	movs	r2, #255	; 0xff
 8009e44:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 8009e46:	7afb      	ldrb	r3, [r7, #11]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd90      	pop	{r4, r7, pc}
 8009e50:	40002800 	.word	0x40002800

08009e54 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	709a      	strb	r2, [r3, #2]
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8009e8e:	4b24      	ldr	r3, [pc, #144]	; (8009f20 <RTC_GetTime+0xa0>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009e96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009e9a:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	0c1b      	lsrs	r3, r3, #16
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	0a1b      	lsrs	r3, r3, #8
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	0c1b      	lsrs	r3, r3, #16
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d11a      	bne.n	8009f16 <RTC_GetTime+0x96>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fff2 	bl	800aece <RTC_Bcd2ToByte>
 8009eea:	4603      	mov	r3, r0
 8009eec:	461a      	mov	r2, r3
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 ffe9 	bl	800aece <RTC_Bcd2ToByte>
 8009efc:	4603      	mov	r3, r0
 8009efe:	461a      	mov	r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	789b      	ldrb	r3, [r3, #2]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 ffe0 	bl	800aece <RTC_Bcd2ToByte>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	461a      	mov	r2, r3
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	709a      	strb	r2, [r3, #2]
  }
}
 8009f16:	bf00      	nop
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	40002800 	.word	0x40002800

08009f24 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Sub seconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	607b      	str	r3, [r7, #4]
  
  /* Get sub seconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 8009f2e:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <RTC_GetSubSecond+0x24>)
 8009f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f32:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 8009f34:	4b04      	ldr	r3, [pc, #16]	; (8009f48 <RTC_GetSubSecond+0x24>)
 8009f36:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 8009f38:	687b      	ldr	r3, [r7, #4]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	40002800 	.word	0x40002800

08009f4c <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8009f4c:	b590      	push	{r4, r7, lr}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10e      	bne.n	8009f82 <RTC_SetDate+0x36>
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	785b      	ldrb	r3, [r3, #1]
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d008      	beq.n	8009f82 <RTC_SetDate+0x36>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	785b      	ldrb	r3, [r3, #1]
 8009f74:	f023 0310 	bic.w	r3, r3, #16
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	330a      	adds	r3, #10
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00d      	beq.n	8009fa4 <RTC_SetDate+0x58>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	785b      	ldrb	r3, [r3, #1]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 ff9e 	bl	800aece <RTC_Bcd2ToByte>
 8009f92:	4603      	mov	r3, r0
 8009f94:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	789b      	ldrb	r3, [r3, #2]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 ff97 	bl	800aece <RTC_Bcd2ToByte>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00f      	beq.n	8009fca <RTC_SetDate+0x7e>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	78db      	ldrb	r3, [r3, #3]
 8009fae:	041a      	lsls	r2, r3, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	785b      	ldrb	r3, [r3, #1]
 8009fb4:	021b      	lsls	r3, r3, #8
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8009fb6:	4313      	orrs	r3, r2
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	7892      	ldrb	r2, [r2, #2]
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8009fbc:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	035b      	lsls	r3, r3, #13
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	e01b      	b.n	800a002 <RTC_SetDate+0xb6>
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	78db      	ldrb	r3, [r3, #3]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 ff60 	bl	800ae94 <RTC_ByteToBcd2>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 ff59 	bl	800ae94 <RTC_ByteToBcd2>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8009fe6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	789b      	ldrb	r3, [r3, #2]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 ff51 	bl	800ae94 <RTC_ByteToBcd2>
 8009ff2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8009ff4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	035b      	lsls	r3, r3, #13
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8009ffe:	4313      	orrs	r3, r2
 800a000:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a002:	4b19      	ldr	r3, [pc, #100]	; (800a068 <RTC_SetDate+0x11c>)
 800a004:	22ca      	movs	r2, #202	; 0xca
 800a006:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a008:	4b17      	ldr	r3, [pc, #92]	; (800a068 <RTC_SetDate+0x11c>)
 800a00a:	2253      	movs	r2, #83	; 0x53
 800a00c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a00e:	f7ff fdb7 	bl	8009b80 <RTC_EnterInitMode>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d102      	bne.n	800a01e <RTC_SetDate+0xd2>
  {
    status = ERROR;
 800a018:	2300      	movs	r3, #0
 800a01a:	72fb      	strb	r3, [r7, #11]
 800a01c:	e01b      	b.n	800a056 <RTC_SetDate+0x10a>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800a01e:	4a12      	ldr	r2, [pc, #72]	; (800a068 <RTC_SetDate+0x11c>)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a026:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a02a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800a02c:	f7ff fde2 	bl	8009bf4 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 800a030:	4b0d      	ldr	r3, [pc, #52]	; (800a068 <RTC_SetDate+0x11c>)
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f003 0320 	and.w	r3, r3, #32
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10a      	bne.n	800a052 <RTC_SetDate+0x106>
    {
    if(RTC_WaitForSynchro() == ERROR)
 800a03c:	f7ff fdea 	bl	8009c14 <RTC_WaitForSynchro>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d102      	bne.n	800a04c <RTC_SetDate+0x100>
    {
      status = ERROR;
 800a046:	2300      	movs	r3, #0
 800a048:	72fb      	strb	r3, [r7, #11]
 800a04a:	e004      	b.n	800a056 <RTC_SetDate+0x10a>
    }
    else
    {
      status = SUCCESS;
 800a04c:	2301      	movs	r3, #1
 800a04e:	72fb      	strb	r3, [r7, #11]
 800a050:	e001      	b.n	800a056 <RTC_SetDate+0x10a>
    }
  }
    else
    {
      status = SUCCESS;
 800a052:	2301      	movs	r3, #1
 800a054:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800a056:	4b04      	ldr	r3, [pc, #16]	; (800a068 <RTC_SetDate+0x11c>)
 800a058:	22ff      	movs	r2, #255	; 0xff
 800a05a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a05c:	7afb      	ldrb	r3, [r7, #11]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3714      	adds	r7, #20
 800a062:	46bd      	mov	sp, r7
 800a064:	bd90      	pop	{r4, r7, pc}
 800a066:	bf00      	nop
 800a068:	40002800 	.word	0x40002800

0800a06c <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	70da      	strb	r2, [r3, #3]
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800a0a6:	4b22      	ldr	r3, [pc, #136]	; (800a130 <RTC_GetDate+0x98>)
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a0ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	0c1b      	lsrs	r3, r3, #16
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	0a1b      	lsrs	r3, r3, #8
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 031f 	and.w	r3, r3, #31
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	0b5b      	lsrs	r3, r3, #13
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	f003 0307 	and.w	r3, r3, #7
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d11a      	bne.n	800a128 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	78db      	ldrb	r3, [r3, #3]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 fee9 	bl	800aece <RTC_Bcd2ToByte>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	461a      	mov	r2, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	785b      	ldrb	r3, [r3, #1]
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fee0 	bl	800aece <RTC_Bcd2ToByte>
 800a10e:	4603      	mov	r3, r0
 800a110:	461a      	mov	r2, r3
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	789b      	ldrb	r3, [r3, #2]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 fed7 	bl	800aece <RTC_Bcd2ToByte>
 800a120:	4603      	mov	r3, r0
 800a122:	461a      	mov	r2, r3
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	709a      	strb	r2, [r3, #2]
  }
}
 800a128:	bf00      	nop
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	40002800 	.word	0x40002800

0800a134 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800a134:	b590      	push	{r4, r7, lr}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d109      	bne.n	800a15e <RTC_SetAlarm+0x2a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a14a:	4b47      	ldr	r3, [pc, #284]	; (800a268 <RTC_SetAlarm+0x134>)
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d127      	bne.n	800a1a6 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	70da      	strb	r2, [r3, #3]
 800a15c:	e023      	b.n	800a1a6 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a15e:	4b42      	ldr	r3, [pc, #264]	; (800a268 <RTC_SetAlarm+0x134>)
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a166:	2b00      	cmp	r3, #0
 800a168:	d007      	beq.n	800a17a <RTC_SetAlarm+0x46>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 fead 	bl	800aece <RTC_Bcd2ToByte>
 800a174:	4603      	mov	r3, r0
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	e002      	b.n	800a180 <RTC_SetAlarm+0x4c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d107      	bne.n	800a198 <RTC_SetAlarm+0x64>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	7b1b      	ldrb	r3, [r3, #12]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 fe9e 	bl	800aece <RTC_Bcd2ToByte>
 800a192:	4603      	mov	r3, r0
 800a194:	617b      	str	r3, [r7, #20]
 800a196:	e006      	b.n	800a1a6 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	7b1b      	ldrb	r3, [r3, #12]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 fe96 	bl	800aece <RTC_Bcd2ToByte>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d019      	beq.n	800a1e0 <RTC_SetAlarm+0xac>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	785b      	ldrb	r3, [r3, #1]
 800a1b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a1b8:	4313      	orrs	r3, r2
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800a1be:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	78db      	ldrb	r3, [r3, #3]
 800a1c4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800a1c6:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7b1b      	ldrb	r3, [r3, #12]
 800a1cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800a1ce:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	689b      	ldr	r3, [r3, #8]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800a1d4:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	617b      	str	r3, [r7, #20]
 800a1de:	e02b      	b.n	800a238 <RTC_SetAlarm+0x104>
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 fe55 	bl	800ae94 <RTC_ByteToBcd2>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fe4e 	bl	800ae94 <RTC_ByteToBcd2>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a1fc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	789b      	ldrb	r3, [r3, #2]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fe46 	bl	800ae94 <RTC_ByteToBcd2>
 800a208:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800a20a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	78db      	ldrb	r3, [r3, #3]
 800a212:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800a214:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	7b1b      	ldrb	r3, [r3, #12]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 fe39 	bl	800ae94 <RTC_ByteToBcd2>
 800a222:	4603      	mov	r3, r0
 800a224:	061b      	lsls	r3, r3, #24
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800a226:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800a22e:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a234:	4313      	orrs	r3, r2
 800a236:	617b      	str	r3, [r7, #20]
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a238:	4b0b      	ldr	r3, [pc, #44]	; (800a268 <RTC_SetAlarm+0x134>)
 800a23a:	22ca      	movs	r2, #202	; 0xca
 800a23c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a23e:	4b0a      	ldr	r3, [pc, #40]	; (800a268 <RTC_SetAlarm+0x134>)
 800a240:	2253      	movs	r2, #83	; 0x53
 800a242:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a24a:	d103      	bne.n	800a254 <RTC_SetAlarm+0x120>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 800a24c:	4a06      	ldr	r2, [pc, #24]	; (800a268 <RTC_SetAlarm+0x134>)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	61d3      	str	r3, [r2, #28]
 800a252:	e002      	b.n	800a25a <RTC_SetAlarm+0x126>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800a254:	4a04      	ldr	r2, [pc, #16]	; (800a268 <RTC_SetAlarm+0x134>)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6213      	str	r3, [r2, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800a25a:	4b03      	ldr	r3, [pc, #12]	; (800a268 <RTC_SetAlarm+0x134>)
 800a25c:	22ff      	movs	r2, #255	; 0xff
 800a25e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a260:	bf00      	nop
 800a262:	371c      	adds	r7, #28
 800a264:	46bd      	mov	sp, r7
 800a266:	bd90      	pop	{r4, r7, pc}
 800a268:	40002800 	.word	0x40002800

0800a26c <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	605a      	str	r2, [r3, #4]
}
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b086      	sub	sp, #24
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2c0:	d103      	bne.n	800a2ca <RTC_GetAlarm+0x20>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 800a2c2:	4b31      	ldr	r3, [pc, #196]	; (800a388 <RTC_GetAlarm+0xde>)
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	617b      	str	r3, [r7, #20]
 800a2c8:	e002      	b.n	800a2d0 <RTC_GetAlarm+0x26>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 800a2ca:	4b2f      	ldr	r3, [pc, #188]	; (800a388 <RTC_GetAlarm+0xde>)
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	0c1b      	lsrs	r3, r3, #16
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	0c1b      	lsrs	r3, r3, #16
 800a302:	b2db      	uxtb	r3, r3
 800a304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	0e1b      	lsrs	r3, r3, #24
 800a312:	b2db      	uxtb	r3, r3
 800a314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d123      	bne.n	800a380 <RTC_GetAlarm+0xd6>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fdc6 	bl	800aece <RTC_Bcd2ToByte>
 800a342:	4603      	mov	r3, r0
 800a344:	461a      	mov	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	785b      	ldrb	r3, [r3, #1]
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 fdbd 	bl	800aece <RTC_Bcd2ToByte>
 800a354:	4603      	mov	r3, r0
 800a356:	461a      	mov	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	789b      	ldrb	r3, [r3, #2]
 800a360:	4618      	mov	r0, r3
 800a362:	f000 fdb4 	bl	800aece <RTC_Bcd2ToByte>
 800a366:	4603      	mov	r3, r0
 800a368:	461a      	mov	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	7b1b      	ldrb	r3, [r3, #12]
 800a372:	4618      	mov	r0, r3
 800a374:	f000 fdab 	bl	800aece <RTC_Bcd2ToByte>
 800a378:	4603      	mov	r3, r0
 800a37a:	461a      	mov	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	731a      	strb	r2, [r3, #12]
  }  
}
 800a380:	bf00      	nop
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	40002800 	.word	0x40002800

0800a38c <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b087      	sub	sp, #28
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 800a39c:	2300      	movs	r3, #0
 800a39e:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a3a4:	4b1f      	ldr	r3, [pc, #124]	; (800a424 <RTC_AlarmCmd+0x98>)
 800a3a6:	22ca      	movs	r2, #202	; 0xca
 800a3a8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a3aa:	4b1e      	ldr	r3, [pc, #120]	; (800a424 <RTC_AlarmCmd+0x98>)
 800a3ac:	2253      	movs	r2, #83	; 0x53
 800a3ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d008      	beq.n	800a3c8 <RTC_AlarmCmd+0x3c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800a3b6:	491b      	ldr	r1, [pc, #108]	; (800a424 <RTC_AlarmCmd+0x98>)
 800a3b8:	4b1a      	ldr	r3, [pc, #104]	; (800a424 <RTC_AlarmCmd+0x98>)
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	608b      	str	r3, [r1, #8]

    status = SUCCESS;    
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	75fb      	strb	r3, [r7, #23]
 800a3c6:	e022      	b.n	800a40e <RTC_AlarmCmd+0x82>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800a3c8:	4916      	ldr	r1, [pc, #88]	; (800a424 <RTC_AlarmCmd+0x98>)
 800a3ca:	4b16      	ldr	r3, [pc, #88]	; (800a424 <RTC_AlarmCmd+0x98>)
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	43db      	mvns	r3, r3
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	608b      	str	r3, [r1, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800a3d6:	4b13      	ldr	r3, [pc, #76]	; (800a424 <RTC_AlarmCmd+0x98>)
 800a3d8:	68da      	ldr	r2, [r3, #12]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	0a1b      	lsrs	r3, r3, #8
 800a3de:	4013      	ands	r3, r2
 800a3e0:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3ee:	d002      	beq.n	800a3f6 <RTC_AlarmCmd+0x6a>
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0ef      	beq.n	800a3d6 <RTC_AlarmCmd+0x4a>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800a3f6:	4b0b      	ldr	r3, [pc, #44]	; (800a424 <RTC_AlarmCmd+0x98>)
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	0a1b      	lsrs	r3, r3, #8
 800a3fe:	4013      	ands	r3, r2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <RTC_AlarmCmd+0x7e>
    {
      status = ERROR;
 800a404:	2300      	movs	r3, #0
 800a406:	75fb      	strb	r3, [r7, #23]
 800a408:	e001      	b.n	800a40e <RTC_AlarmCmd+0x82>
    } 
    else
    {
      status = SUCCESS;
 800a40a:	2301      	movs	r3, #1
 800a40c:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a40e:	4b05      	ldr	r3, [pc, #20]	; (800a424 <RTC_AlarmCmd+0x98>)
 800a410:	22ff      	movs	r2, #255	; 0xff
 800a412:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a414:	7dfb      	ldrb	r3, [r7, #23]
}
 800a416:	4618      	mov	r0, r3
 800a418:	371c      	adds	r7, #28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	40002800 	.word	0x40002800

0800a428 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a438:	4b0e      	ldr	r3, [pc, #56]	; (800a474 <RTC_AlarmSubSecondConfig+0x4c>)
 800a43a:	22ca      	movs	r2, #202	; 0xca
 800a43c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a43e:	4b0d      	ldr	r3, [pc, #52]	; (800a474 <RTC_AlarmSubSecondConfig+0x4c>)
 800a440:	2253      	movs	r2, #83	; 0x53
 800a442:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B Sub Second registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4313      	orrs	r3, r2
 800a44a:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a452:	d103      	bne.n	800a45c <RTC_AlarmSubSecondConfig+0x34>
  {
    /* Configure the Alarm A Sub Second register */
    RTC->ALRMASSR = tmpreg;
 800a454:	4a07      	ldr	r2, [pc, #28]	; (800a474 <RTC_AlarmSubSecondConfig+0x4c>)
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	6453      	str	r3, [r2, #68]	; 0x44
 800a45a:	e002      	b.n	800a462 <RTC_AlarmSubSecondConfig+0x3a>
  }
  else
  {
    /* Configure the Alarm B Sub Second register */
    RTC->ALRMBSSR = tmpreg;
 800a45c:	4a05      	ldr	r2, [pc, #20]	; (800a474 <RTC_AlarmSubSecondConfig+0x4c>)
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800a462:	4b04      	ldr	r3, [pc, #16]	; (800a474 <RTC_AlarmSubSecondConfig+0x4c>)
 800a464:	22ff      	movs	r2, #255	; 0xff
 800a466:	625a      	str	r2, [r3, #36]	; 0x24

}
 800a468:	bf00      	nop
 800a46a:	371c      	adds	r7, #28
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	40002800 	.word	0x40002800

0800a478 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Sub seconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a48a:	d105      	bne.n	800a498 <RTC_GetAlarmSubSecond+0x20>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 800a48c:	4b08      	ldr	r3, [pc, #32]	; (800a4b0 <RTC_GetAlarmSubSecond+0x38>)
 800a48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a490:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a494:	60fb      	str	r3, [r7, #12]
 800a496:	e004      	b.n	800a4a2 <RTC_GetAlarmSubSecond+0x2a>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800a498:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <RTC_GetAlarmSubSecond+0x38>)
 800a49a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a49c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a4a0:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr
 800a4b0:	40002800 	.word	0x40002800

0800a4b4 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a4bc:	4b0d      	ldr	r3, [pc, #52]	; (800a4f4 <RTC_WakeUpClockConfig+0x40>)
 800a4be:	22ca      	movs	r2, #202	; 0xca
 800a4c0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a4c2:	4b0c      	ldr	r3, [pc, #48]	; (800a4f4 <RTC_WakeUpClockConfig+0x40>)
 800a4c4:	2253      	movs	r2, #83	; 0x53
 800a4c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a4c8:	4a0a      	ldr	r2, [pc, #40]	; (800a4f4 <RTC_WakeUpClockConfig+0x40>)
 800a4ca:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <RTC_WakeUpClockConfig+0x40>)
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	f023 0307 	bic.w	r3, r3, #7
 800a4d2:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 800a4d4:	4907      	ldr	r1, [pc, #28]	; (800a4f4 <RTC_WakeUpClockConfig+0x40>)
 800a4d6:	4b07      	ldr	r3, [pc, #28]	; (800a4f4 <RTC_WakeUpClockConfig+0x40>)
 800a4d8:	689a      	ldr	r2, [r3, #8]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	608b      	str	r3, [r1, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a4e0:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <RTC_WakeUpClockConfig+0x40>)
 800a4e2:	22ff      	movs	r2, #255	; 0xff
 800a4e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	40002800 	.word	0x40002800

0800a4f8 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a500:	4b08      	ldr	r3, [pc, #32]	; (800a524 <RTC_SetWakeUpCounter+0x2c>)
 800a502:	22ca      	movs	r2, #202	; 0xca
 800a504:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a506:	4b07      	ldr	r3, [pc, #28]	; (800a524 <RTC_SetWakeUpCounter+0x2c>)
 800a508:	2253      	movs	r2, #83	; 0x53
 800a50a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800a50c:	4a05      	ldr	r2, [pc, #20]	; (800a524 <RTC_SetWakeUpCounter+0x2c>)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6153      	str	r3, [r2, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a512:	4b04      	ldr	r3, [pc, #16]	; (800a524 <RTC_SetWakeUpCounter+0x2c>)
 800a514:	22ff      	movs	r2, #255	; 0xff
 800a516:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	40002800 	.word	0x40002800

0800a528 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 800a528:	b480      	push	{r7}
 800a52a:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 800a52c:	4b03      	ldr	r3, [pc, #12]	; (800a53c <RTC_GetWakeUpCounter+0x14>)
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	b29b      	uxth	r3, r3
}
 800a532:	4618      	mov	r0, r3
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	40002800 	.word	0x40002800

0800a540 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 800a540:	b480      	push	{r7}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	4603      	mov	r3, r0
 800a548:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 800a54a:	2300      	movs	r3, #0
 800a54c:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 800a54e:	2300      	movs	r3, #0
 800a550:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800a552:	2300      	movs	r3, #0
 800a554:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a556:	4b1e      	ldr	r3, [pc, #120]	; (800a5d0 <RTC_WakeUpCmd+0x90>)
 800a558:	22ca      	movs	r2, #202	; 0xca
 800a55a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a55c:	4b1c      	ldr	r3, [pc, #112]	; (800a5d0 <RTC_WakeUpCmd+0x90>)
 800a55e:	2253      	movs	r2, #83	; 0x53
 800a560:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d008      	beq.n	800a57a <RTC_WakeUpCmd+0x3a>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 800a568:	4a19      	ldr	r2, [pc, #100]	; (800a5d0 <RTC_WakeUpCmd+0x90>)
 800a56a:	4b19      	ldr	r3, [pc, #100]	; (800a5d0 <RTC_WakeUpCmd+0x90>)
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a572:	6093      	str	r3, [r2, #8]
    status = SUCCESS;    
 800a574:	2301      	movs	r3, #1
 800a576:	75fb      	strb	r3, [r7, #23]
 800a578:	e01f      	b.n	800a5ba <RTC_WakeUpCmd+0x7a>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800a57a:	4a15      	ldr	r2, [pc, #84]	; (800a5d0 <RTC_WakeUpCmd+0x90>)
 800a57c:	4b14      	ldr	r3, [pc, #80]	; (800a5d0 <RTC_WakeUpCmd+0x90>)
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a584:	6093      	str	r3, [r2, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800a586:	4b12      	ldr	r3, [pc, #72]	; (800a5d0 <RTC_WakeUpCmd+0x90>)
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	f003 0304 	and.w	r3, r3, #4
 800a58e:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	3301      	adds	r3, #1
 800a594:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a59c:	d002      	beq.n	800a5a4 <RTC_WakeUpCmd+0x64>
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d0f0      	beq.n	800a586 <RTC_WakeUpCmd+0x46>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800a5a4:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <RTC_WakeUpCmd+0x90>)
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	f003 0304 	and.w	r3, r3, #4
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d102      	bne.n	800a5b6 <RTC_WakeUpCmd+0x76>
    {
      status = ERROR;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	75fb      	strb	r3, [r7, #23]
 800a5b4:	e001      	b.n	800a5ba <RTC_WakeUpCmd+0x7a>
    }
    else
    {
      status = SUCCESS;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a5ba:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <RTC_WakeUpCmd+0x90>)
 800a5bc:	22ff      	movs	r2, #255	; 0xff
 800a5be:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	40002800 	.word	0x40002800

0800a5d4 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a5de:	4b0e      	ldr	r3, [pc, #56]	; (800a618 <RTC_DayLightSavingConfig+0x44>)
 800a5e0:	22ca      	movs	r2, #202	; 0xca
 800a5e2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a5e4:	4b0c      	ldr	r3, [pc, #48]	; (800a618 <RTC_DayLightSavingConfig+0x44>)
 800a5e6:	2253      	movs	r2, #83	; 0x53
 800a5e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 800a5ea:	4a0b      	ldr	r2, [pc, #44]	; (800a618 <RTC_DayLightSavingConfig+0x44>)
 800a5ec:	4b0a      	ldr	r3, [pc, #40]	; (800a618 <RTC_DayLightSavingConfig+0x44>)
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5f4:	6093      	str	r3, [r2, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 800a5f6:	4808      	ldr	r0, [pc, #32]	; (800a618 <RTC_DayLightSavingConfig+0x44>)
 800a5f8:	4b07      	ldr	r3, [pc, #28]	; (800a618 <RTC_DayLightSavingConfig+0x44>)
 800a5fa:	689a      	ldr	r2, [r3, #8]
 800a5fc:	6879      	ldr	r1, [r7, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	430b      	orrs	r3, r1
 800a602:	4313      	orrs	r3, r2
 800a604:	6083      	str	r3, [r0, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a606:	4b04      	ldr	r3, [pc, #16]	; (800a618 <RTC_DayLightSavingConfig+0x44>)
 800a608:	22ff      	movs	r2, #255	; 0xff
 800a60a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	40002800 	.word	0x40002800

0800a61c <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 800a61c:	b480      	push	{r7}
 800a61e:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 800a620:	4b04      	ldr	r3, [pc, #16]	; (800a634 <RTC_GetStoreOperation+0x18>)
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 800a628:	4618      	mov	r0, r3
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	40002800 	.word	0x40002800

0800a638 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a642:	4b0e      	ldr	r3, [pc, #56]	; (800a67c <RTC_OutputConfig+0x44>)
 800a644:	22ca      	movs	r2, #202	; 0xca
 800a646:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a648:	4b0c      	ldr	r3, [pc, #48]	; (800a67c <RTC_OutputConfig+0x44>)
 800a64a:	2253      	movs	r2, #83	; 0x53
 800a64c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800a64e:	4a0b      	ldr	r2, [pc, #44]	; (800a67c <RTC_OutputConfig+0x44>)
 800a650:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <RTC_OutputConfig+0x44>)
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a658:	6093      	str	r3, [r2, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 800a65a:	4808      	ldr	r0, [pc, #32]	; (800a67c <RTC_OutputConfig+0x44>)
 800a65c:	4b07      	ldr	r3, [pc, #28]	; (800a67c <RTC_OutputConfig+0x44>)
 800a65e:	689a      	ldr	r2, [r3, #8]
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	430b      	orrs	r3, r1
 800a666:	4313      	orrs	r3, r2
 800a668:	6083      	str	r3, [r0, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a66a:	4b04      	ldr	r3, [pc, #16]	; (800a67c <RTC_OutputConfig+0x44>)
 800a66c:	22ff      	movs	r2, #255	; 0xff
 800a66e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	40002800 	.word	0x40002800

0800a680 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a68a:	2300      	movs	r3, #0
 800a68c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a68e:	4b0f      	ldr	r3, [pc, #60]	; (800a6cc <RTC_CoarseCalibConfig+0x4c>)
 800a690:	22ca      	movs	r2, #202	; 0xca
 800a692:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a694:	4b0d      	ldr	r3, [pc, #52]	; (800a6cc <RTC_CoarseCalibConfig+0x4c>)
 800a696:	2253      	movs	r2, #83	; 0x53
 800a698:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a69a:	f7ff fa71 	bl	8009b80 <RTC_EnterInitMode>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d102      	bne.n	800a6aa <RTC_CoarseCalibConfig+0x2a>
  {
    status = ERROR;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73fb      	strb	r3, [r7, #15]
 800a6a8:	e008      	b.n	800a6bc <RTC_CoarseCalibConfig+0x3c>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800a6aa:	4908      	ldr	r1, [pc, #32]	; (800a6cc <RTC_CoarseCalibConfig+0x4c>)
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	618b      	str	r3, [r1, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800a6b4:	f7ff fa9e 	bl	8009bf4 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a6bc:	4b03      	ldr	r3, [pc, #12]	; (800a6cc <RTC_CoarseCalibConfig+0x4c>)
 800a6be:	22ff      	movs	r2, #255	; 0xff
 800a6c0:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	40002800 	.word	0x40002800

0800a6d0 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a6de:	4b15      	ldr	r3, [pc, #84]	; (800a734 <RTC_CoarseCalibCmd+0x64>)
 800a6e0:	22ca      	movs	r2, #202	; 0xca
 800a6e2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a6e4:	4b13      	ldr	r3, [pc, #76]	; (800a734 <RTC_CoarseCalibCmd+0x64>)
 800a6e6:	2253      	movs	r2, #83	; 0x53
 800a6e8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a6ea:	f7ff fa49 	bl	8009b80 <RTC_EnterInitMode>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <RTC_CoarseCalibCmd+0x2a>
  {
    status =  ERROR;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73fb      	strb	r3, [r7, #15]
 800a6f8:	e013      	b.n	800a722 <RTC_CoarseCalibCmd+0x52>
  }
  else
  {
    if (NewState != DISABLE)
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d006      	beq.n	800a70e <RTC_CoarseCalibCmd+0x3e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 800a700:	4a0c      	ldr	r2, [pc, #48]	; (800a734 <RTC_CoarseCalibCmd+0x64>)
 800a702:	4b0c      	ldr	r3, [pc, #48]	; (800a734 <RTC_CoarseCalibCmd+0x64>)
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a70a:	6093      	str	r3, [r2, #8]
 800a70c:	e005      	b.n	800a71a <RTC_CoarseCalibCmd+0x4a>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 800a70e:	4a09      	ldr	r2, [pc, #36]	; (800a734 <RTC_CoarseCalibCmd+0x64>)
 800a710:	4b08      	ldr	r3, [pc, #32]	; (800a734 <RTC_CoarseCalibCmd+0x64>)
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a718:	6093      	str	r3, [r2, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800a71a:	f7ff fa6b 	bl	8009bf4 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800a71e:	2301      	movs	r3, #1
 800a720:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a722:	4b04      	ldr	r3, [pc, #16]	; (800a734 <RTC_CoarseCalibCmd+0x64>)
 800a724:	22ff      	movs	r2, #255	; 0xff
 800a726:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a728:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	40002800 	.word	0x40002800

0800a738 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a742:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <RTC_CalibOutputCmd+0x48>)
 800a744:	22ca      	movs	r2, #202	; 0xca
 800a746:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a748:	4b0d      	ldr	r3, [pc, #52]	; (800a780 <RTC_CalibOutputCmd+0x48>)
 800a74a:	2253      	movs	r2, #83	; 0x53
 800a74c:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800a74e:	79fb      	ldrb	r3, [r7, #7]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d006      	beq.n	800a762 <RTC_CalibOutputCmd+0x2a>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800a754:	4a0a      	ldr	r2, [pc, #40]	; (800a780 <RTC_CalibOutputCmd+0x48>)
 800a756:	4b0a      	ldr	r3, [pc, #40]	; (800a780 <RTC_CalibOutputCmd+0x48>)
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a75e:	6093      	str	r3, [r2, #8]
 800a760:	e005      	b.n	800a76e <RTC_CalibOutputCmd+0x36>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 800a762:	4a07      	ldr	r2, [pc, #28]	; (800a780 <RTC_CalibOutputCmd+0x48>)
 800a764:	4b06      	ldr	r3, [pc, #24]	; (800a780 <RTC_CalibOutputCmd+0x48>)
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a76c:	6093      	str	r3, [r2, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a76e:	4b04      	ldr	r3, [pc, #16]	; (800a780 <RTC_CalibOutputCmd+0x48>)
 800a770:	22ff      	movs	r2, #255	; 0xff
 800a772:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr
 800a780:	40002800 	.word	0x40002800

0800a784 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a78c:	4b0d      	ldr	r3, [pc, #52]	; (800a7c4 <RTC_CalibOutputConfig+0x40>)
 800a78e:	22ca      	movs	r2, #202	; 0xca
 800a790:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a792:	4b0c      	ldr	r3, [pc, #48]	; (800a7c4 <RTC_CalibOutputConfig+0x40>)
 800a794:	2253      	movs	r2, #83	; 0x53
 800a796:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before configuration */
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 800a798:	4a0a      	ldr	r2, [pc, #40]	; (800a7c4 <RTC_CalibOutputConfig+0x40>)
 800a79a:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <RTC_CalibOutputConfig+0x40>)
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a7a2:	6093      	str	r3, [r2, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 800a7a4:	4907      	ldr	r1, [pc, #28]	; (800a7c4 <RTC_CalibOutputConfig+0x40>)
 800a7a6:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <RTC_CalibOutputConfig+0x40>)
 800a7a8:	689a      	ldr	r2, [r3, #8]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	608b      	str	r3, [r1, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800a7b0:	4b04      	ldr	r3, [pc, #16]	; (800a7c4 <RTC_CalibOutputConfig+0x40>)
 800a7b2:	22ff      	movs	r2, #255	; 0xff
 800a7b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a7b6:	bf00      	nop
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	40002800 	.word	0x40002800

0800a7c8 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a7dc:	4b1a      	ldr	r3, [pc, #104]	; (800a848 <RTC_SmoothCalibConfig+0x80>)
 800a7de:	22ca      	movs	r2, #202	; 0xca
 800a7e0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a7e2:	4b19      	ldr	r3, [pc, #100]	; (800a848 <RTC_SmoothCalibConfig+0x80>)
 800a7e4:	2253      	movs	r2, #83	; 0x53
 800a7e6:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 800a7e8:	4b17      	ldr	r3, [pc, #92]	; (800a848 <RTC_SmoothCalibConfig+0x80>)
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00d      	beq.n	800a810 <RTC_SmoothCalibConfig+0x48>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800a7f4:	e002      	b.n	800a7fc <RTC_SmoothCalibConfig+0x34>
    {
      recalpfcount++;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	613b      	str	r3, [r7, #16]
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800a7fc:	4b12      	ldr	r3, [pc, #72]	; (800a848 <RTC_SmoothCalibConfig+0x80>)
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d003      	beq.n	800a810 <RTC_SmoothCalibConfig+0x48>
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a80e:	d1f2      	bne.n	800a7f6 <RTC_SmoothCalibConfig+0x2e>
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 800a810:	4b0d      	ldr	r3, [pc, #52]	; (800a848 <RTC_SmoothCalibConfig+0x80>)
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d109      	bne.n	800a830 <RTC_SmoothCalibConfig+0x68>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 800a81c:	490a      	ldr	r1, [pc, #40]	; (800a848 <RTC_SmoothCalibConfig+0x80>)
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	431a      	orrs	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4313      	orrs	r3, r2
 800a828:	63cb      	str	r3, [r1, #60]	; 0x3c

    status = SUCCESS;
 800a82a:	2301      	movs	r3, #1
 800a82c:	75fb      	strb	r3, [r7, #23]
 800a82e:	e001      	b.n	800a834 <RTC_SmoothCalibConfig+0x6c>
  }
  else
  {
    status = ERROR;
 800a830:	2300      	movs	r3, #0
 800a832:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800a834:	4b04      	ldr	r3, [pc, #16]	; (800a848 <RTC_SmoothCalibConfig+0x80>)
 800a836:	22ff      	movs	r2, #255	; 0xff
 800a838:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	371c      	adds	r7, #28
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	40002800 	.word	0x40002800

0800a84c <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a85c:	4b13      	ldr	r3, [pc, #76]	; (800a8ac <RTC_TimeStampCmd+0x60>)
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a864:	f023 0308 	bic.w	r3, r3, #8
 800a868:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 800a86a:	78fb      	ldrb	r3, [r7, #3]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d006      	beq.n	800a87e <RTC_TimeStampCmd+0x32>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	4313      	orrs	r3, r2
 800a876:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	e003      	b.n	800a886 <RTC_TimeStampCmd+0x3a>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4313      	orrs	r3, r2
 800a884:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a886:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <RTC_TimeStampCmd+0x60>)
 800a888:	22ca      	movs	r2, #202	; 0xca
 800a88a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a88c:	4b07      	ldr	r3, [pc, #28]	; (800a8ac <RTC_TimeStampCmd+0x60>)
 800a88e:	2253      	movs	r2, #83	; 0x53
 800a890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800a892:	4a06      	ldr	r2, [pc, #24]	; (800a8ac <RTC_TimeStampCmd+0x60>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a898:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <RTC_TimeStampCmd+0x60>)
 800a89a:	22ff      	movs	r2, #255	; 0xff
 800a89c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a89e:	bf00      	nop
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	40002800 	.word	0x40002800

0800a8b0 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 800a8c4:	4b41      	ldr	r3, [pc, #260]	; (800a9cc <RTC_GetTimeStamp+0x11c>)
 800a8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a8cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a8d0:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 800a8d2:	4b3e      	ldr	r3, [pc, #248]	; (800a9cc <RTC_GetTimeStamp+0x11c>)
 800a8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a8da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a8de:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	0c1b      	lsrs	r3, r3, #16
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	0a1b      	lsrs	r3, r3, #8
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	0c1b      	lsrs	r3, r3, #16
 800a912:	b2db      	uxtb	r3, r3
 800a914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	0a1b      	lsrs	r3, r3, #8
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	f003 031f 	and.w	r3, r3, #31
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	0b5b      	lsrs	r3, r3, #13
 800a946:	b2db      	uxtb	r3, r3
 800a948:	f003 0307 	and.w	r3, r3, #7
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d135      	bne.n	800a9c4 <RTC_GetTimeStamp+0x114>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 fab6 	bl	800aece <RTC_Bcd2ToByte>
 800a962:	4603      	mov	r3, r0
 800a964:	461a      	mov	r2, r3
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	785b      	ldrb	r3, [r3, #1]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 faad 	bl	800aece <RTC_Bcd2ToByte>
 800a974:	4603      	mov	r3, r0
 800a976:	461a      	mov	r2, r3
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	789b      	ldrb	r3, [r3, #2]
 800a980:	4618      	mov	r0, r3
 800a982:	f000 faa4 	bl	800aece <RTC_Bcd2ToByte>
 800a986:	4603      	mov	r3, r0
 800a988:	461a      	mov	r2, r3
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	4618      	mov	r0, r3
 800a994:	f000 fa9b 	bl	800aece <RTC_Bcd2ToByte>
 800a998:	4603      	mov	r3, r0
 800a99a:	461a      	mov	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	789b      	ldrb	r3, [r3, #2]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 fa92 	bl	800aece <RTC_Bcd2ToByte>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 fa89 	bl	800aece <RTC_Bcd2ToByte>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	461a      	mov	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	701a      	strb	r2, [r3, #0]
  }
}
 800a9c4:	bf00      	nop
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	40002800 	.word	0x40002800

0800a9d0 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Sub seconds value.
  * @param  None
  * @retval RTC current timestamp Sub seconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	af00      	add	r7, sp, #0
  /* Get timestamp sub seconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 800a9d4:	4b03      	ldr	r3, [pc, #12]	; (800a9e4 <RTC_GetTimeStampSubSecond+0x14>)
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	40002800 	.word	0x40002800

0800a9e8 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d108      	bne.n	800aa0a <RTC_TamperTriggerConfig+0x22>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 800a9f8:	490a      	ldr	r1, [pc, #40]	; (800aa24 <RTC_TamperTriggerConfig+0x3c>)
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <RTC_TamperTriggerConfig+0x3c>)
 800a9fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	43db      	mvns	r3, r3
 800aa04:	4013      	ands	r3, r2
 800aa06:	640b      	str	r3, [r1, #64]	; 0x40
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
  }  
}
 800aa08:	e006      	b.n	800aa18 <RTC_TamperTriggerConfig+0x30>
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 800aa0a:	4906      	ldr	r1, [pc, #24]	; (800aa24 <RTC_TamperTriggerConfig+0x3c>)
 800aa0c:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <RTC_TamperTriggerConfig+0x3c>)
 800aa0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	005b      	lsls	r3, r3, #1
 800aa14:	4313      	orrs	r3, r2
 800aa16:	640b      	str	r3, [r1, #64]	; 0x40
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	40002800 	.word	0x40002800

0800aa28 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800aa34:	78fb      	ldrb	r3, [r7, #3]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d006      	beq.n	800aa48 <RTC_TamperCmd+0x20>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 800aa3a:	490a      	ldr	r1, [pc, #40]	; (800aa64 <RTC_TamperCmd+0x3c>)
 800aa3c:	4b09      	ldr	r3, [pc, #36]	; (800aa64 <RTC_TamperCmd+0x3c>)
 800aa3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	640b      	str	r3, [r1, #64]	; 0x40
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
  }  
}
 800aa46:	e006      	b.n	800aa56 <RTC_TamperCmd+0x2e>
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800aa48:	4906      	ldr	r1, [pc, #24]	; (800aa64 <RTC_TamperCmd+0x3c>)
 800aa4a:	4b06      	ldr	r3, [pc, #24]	; (800aa64 <RTC_TamperCmd+0x3c>)
 800aa4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	43db      	mvns	r3, r3
 800aa52:	4013      	ands	r3, r2
 800aa54:	640b      	str	r3, [r1, #64]	; 0x40
}
 800aa56:	bf00      	nop
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	40002800 	.word	0x40002800

0800aa68 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 800aa70:	4a08      	ldr	r2, [pc, #32]	; (800aa94 <RTC_TamperFilterConfig+0x2c>)
 800aa72:	4b08      	ldr	r3, [pc, #32]	; (800aa94 <RTC_TamperFilterConfig+0x2c>)
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800aa7a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 800aa7c:	4905      	ldr	r1, [pc, #20]	; (800aa94 <RTC_TamperFilterConfig+0x2c>)
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <RTC_TamperFilterConfig+0x2c>)
 800aa80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	640b      	str	r3, [r1, #64]	; 0x40
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	40002800 	.word	0x40002800

0800aa98 <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 800aaa0:	4a08      	ldr	r2, [pc, #32]	; (800aac4 <RTC_TamperSamplingFreqConfig+0x2c>)
 800aaa2:	4b08      	ldr	r3, [pc, #32]	; (800aac4 <RTC_TamperSamplingFreqConfig+0x2c>)
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800aaaa:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800aaac:	4905      	ldr	r1, [pc, #20]	; (800aac4 <RTC_TamperSamplingFreqConfig+0x2c>)
 800aaae:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <RTC_TamperSamplingFreqConfig+0x2c>)
 800aab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	640b      	str	r3, [r1, #64]	; 0x40
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	40002800 	.word	0x40002800

0800aac8 <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 800aad0:	4a08      	ldr	r2, [pc, #32]	; (800aaf4 <RTC_TamperPinsPrechargeDuration+0x2c>)
 800aad2:	4b08      	ldr	r3, [pc, #32]	; (800aaf4 <RTC_TamperPinsPrechargeDuration+0x2c>)
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800aada:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 800aadc:	4905      	ldr	r1, [pc, #20]	; (800aaf4 <RTC_TamperPinsPrechargeDuration+0x2c>)
 800aade:	4b05      	ldr	r3, [pc, #20]	; (800aaf4 <RTC_TamperPinsPrechargeDuration+0x2c>)
 800aae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	640b      	str	r3, [r1, #64]	; 0x40
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	40002800 	.word	0x40002800

0800aaf8 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	4603      	mov	r3, r0
 800ab00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d006      	beq.n	800ab16 <RTC_TimeStampOnTamperDetectionCmd+0x1e>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 800ab08:	4a09      	ldr	r2, [pc, #36]	; (800ab30 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800ab0a:	4b09      	ldr	r3, [pc, #36]	; (800ab30 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab12:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
  }
}
 800ab14:	e005      	b.n	800ab22 <RTC_TimeStampOnTamperDetectionCmd+0x2a>
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800ab16:	4a06      	ldr	r2, [pc, #24]	; (800ab30 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800ab18:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab20:	6413      	str	r3, [r2, #64]	; 0x40
}
 800ab22:	bf00      	nop
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40002800 	.word	0x40002800

0800ab34 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 800ab3e:	79fb      	ldrb	r3, [r7, #7]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d006      	beq.n	800ab52 <RTC_TamperPullUpCmd+0x1e>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800ab44:	4a09      	ldr	r2, [pc, #36]	; (800ab6c <RTC_TamperPullUpCmd+0x38>)
 800ab46:	4b09      	ldr	r3, [pc, #36]	; (800ab6c <RTC_TamperPullUpCmd+0x38>)
 800ab48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab4e:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
  } 
}
 800ab50:	e005      	b.n	800ab5e <RTC_TamperPullUpCmd+0x2a>
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 800ab52:	4a06      	ldr	r2, [pc, #24]	; (800ab6c <RTC_TamperPullUpCmd+0x38>)
 800ab54:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <RTC_TamperPullUpCmd+0x38>)
 800ab56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab5c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800ab5e:	bf00      	nop
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	40002800 	.word	0x40002800

0800ab70 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800ab7e:	4b08      	ldr	r3, [pc, #32]	; (800aba0 <RTC_WriteBackupRegister+0x30>)
 800ab80:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	009a      	lsls	r2, r3, #2
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	4413      	add	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	6013      	str	r3, [r2, #0]
}
 800ab94:	bf00      	nop
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	40002850 	.word	0x40002850

0800aba4 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800abb0:	4b07      	ldr	r3, [pc, #28]	; (800abd0 <RTC_ReadBackupRegister+0x2c>)
 800abb2:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	009a      	lsls	r2, r3, #2
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	40002850 	.word	0x40002850

0800abd4 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800abdc:	4a08      	ldr	r2, [pc, #32]	; (800ac00 <RTC_TamperPinSelection+0x2c>)
 800abde:	4b08      	ldr	r3, [pc, #32]	; (800ac00 <RTC_TamperPinSelection+0x2c>)
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abe6:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800abe8:	4905      	ldr	r1, [pc, #20]	; (800ac00 <RTC_TamperPinSelection+0x2c>)
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <RTC_TamperPinSelection+0x2c>)
 800abec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	640b      	str	r3, [r1, #64]	; 0x40
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	40002800 	.word	0x40002800

0800ac04 <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800ac0c:	4a08      	ldr	r2, [pc, #32]	; (800ac30 <RTC_TimeStampPinSelection+0x2c>)
 800ac0e:	4b08      	ldr	r3, [pc, #32]	; (800ac30 <RTC_TimeStampPinSelection+0x2c>)
 800ac10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac12:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ac16:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800ac18:	4905      	ldr	r1, [pc, #20]	; (800ac30 <RTC_TimeStampPinSelection+0x2c>)
 800ac1a:	4b05      	ldr	r3, [pc, #20]	; (800ac30 <RTC_TimeStampPinSelection+0x2c>)
 800ac1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	640b      	str	r3, [r1, #64]	; 0x40
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	40002800 	.word	0x40002800

0800ac34 <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800ac3c:	4a08      	ldr	r2, [pc, #32]	; (800ac60 <RTC_OutputTypeConfig+0x2c>)
 800ac3e:	4b08      	ldr	r3, [pc, #32]	; (800ac60 <RTC_OutputTypeConfig+0x2c>)
 800ac40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac46:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800ac48:	4905      	ldr	r1, [pc, #20]	; (800ac60 <RTC_OutputTypeConfig+0x2c>)
 800ac4a:	4b05      	ldr	r3, [pc, #20]	; (800ac60 <RTC_OutputTypeConfig+0x2c>)
 800ac4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	640b      	str	r3, [r1, #64]	; 0x40
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	40002800 	.word	0x40002800

0800ac64 <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ac76:	4b21      	ldr	r3, [pc, #132]	; (800acfc <RTC_SynchroShiftConfig+0x98>)
 800ac78:	22ca      	movs	r2, #202	; 0xca
 800ac7a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ac7c:	4b1f      	ldr	r3, [pc, #124]	; (800acfc <RTC_SynchroShiftConfig+0x98>)
 800ac7e:	2253      	movs	r2, #83	; 0x53
 800ac80:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 800ac82:	4b1e      	ldr	r3, [pc, #120]	; (800acfc <RTC_SynchroShiftConfig+0x98>)
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f003 0308 	and.w	r3, r3, #8
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00d      	beq.n	800acaa <RTC_SynchroShiftConfig+0x46>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800ac8e:	e002      	b.n	800ac96 <RTC_SynchroShiftConfig+0x32>
    {
      shpfcount++;
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	3301      	adds	r3, #1
 800ac94:	60bb      	str	r3, [r7, #8]
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800ac96:	4b19      	ldr	r3, [pc, #100]	; (800acfc <RTC_SynchroShiftConfig+0x98>)
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	f003 0308 	and.w	r3, r3, #8
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <RTC_SynchroShiftConfig+0x46>
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca8:	d1f2      	bne.n	800ac90 <RTC_SynchroShiftConfig+0x2c>
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800acaa:	4b14      	ldr	r3, [pc, #80]	; (800acfc <RTC_SynchroShiftConfig+0x98>)
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	f003 0308 	and.w	r3, r3, #8
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d118      	bne.n	800ace8 <RTC_SynchroShiftConfig+0x84>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 800acb6:	4b11      	ldr	r3, [pc, #68]	; (800acfc <RTC_SynchroShiftConfig+0x98>)
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f003 0310 	and.w	r3, r3, #16
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10f      	bne.n	800ace2 <RTC_SynchroShiftConfig+0x7e>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800acc2:	490e      	ldr	r1, [pc, #56]	; (800acfc <RTC_SynchroShiftConfig+0x98>)
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4313      	orrs	r3, r2
 800acca:	62cb      	str	r3, [r1, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 800accc:	f7fe ffa2 	bl	8009c14 <RTC_WaitForSynchro>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d102      	bne.n	800acdc <RTC_SynchroShiftConfig+0x78>
      {
        status = ERROR;
 800acd6:	2300      	movs	r3, #0
 800acd8:	73fb      	strb	r3, [r7, #15]
 800acda:	e007      	b.n	800acec <RTC_SynchroShiftConfig+0x88>
      }
      else
      {
        status = SUCCESS;
 800acdc:	2301      	movs	r3, #1
 800acde:	73fb      	strb	r3, [r7, #15]
 800ace0:	e004      	b.n	800acec <RTC_SynchroShiftConfig+0x88>
      }
    }
    else
    {
      status = ERROR;
 800ace2:	2300      	movs	r3, #0
 800ace4:	73fb      	strb	r3, [r7, #15]
 800ace6:	e001      	b.n	800acec <RTC_SynchroShiftConfig+0x88>
    }
  }
  else
  {
    status = ERROR;
 800ace8:	2300      	movs	r3, #0
 800acea:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800acec:	4b03      	ldr	r3, [pc, #12]	; (800acfc <RTC_SynchroShiftConfig+0x98>)
 800acee:	22ff      	movs	r2, #255	; 0xff
 800acf0:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	40002800 	.word	0x40002800

0800ad00 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ad0c:	4b1a      	ldr	r3, [pc, #104]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad0e:	22ca      	movs	r2, #202	; 0xca
 800ad10:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ad12:	4b19      	ldr	r3, [pc, #100]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad14:	2253      	movs	r2, #83	; 0x53
 800ad16:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800ad18:	78fb      	ldrb	r3, [r7, #3]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d010      	beq.n	800ad40 <RTC_ITConfig+0x40>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800ad1e:	4916      	ldr	r1, [pc, #88]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad20:	4b15      	ldr	r3, [pc, #84]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad22:	689a      	ldr	r2, [r3, #8]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f023 0304 	bic.w	r3, r3, #4
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	608b      	str	r3, [r1, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800ad2e:	4912      	ldr	r1, [pc, #72]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad30:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f003 0304 	and.w	r3, r3, #4
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	640b      	str	r3, [r1, #64]	; 0x40
 800ad3e:	e011      	b.n	800ad64 <RTC_ITConfig+0x64>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800ad40:	490d      	ldr	r1, [pc, #52]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad42:	4b0d      	ldr	r3, [pc, #52]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad44:	689a      	ldr	r2, [r3, #8]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f023 0304 	bic.w	r3, r3, #4
 800ad4c:	43db      	mvns	r3, r3
 800ad4e:	4013      	ands	r3, r2
 800ad50:	608b      	str	r3, [r1, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800ad52:	4909      	ldr	r1, [pc, #36]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad54:	4b08      	ldr	r3, [pc, #32]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	43db      	mvns	r3, r3
 800ad60:	4013      	ands	r3, r2
 800ad62:	640b      	str	r3, [r1, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ad64:	4b04      	ldr	r3, [pc, #16]	; (800ad78 <RTC_ITConfig+0x78>)
 800ad66:	22ff      	movs	r2, #255	; 0xff
 800ad68:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ad6a:	bf00      	nop
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	40002800 	.word	0x40002800

0800ad7c <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800ad84:	2300      	movs	r3, #0
 800ad86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800ad8c:	4b0a      	ldr	r3, [pc, #40]	; (800adb8 <RTC_GetFlagStatus+0x3c>)
 800ad8e:	68da      	ldr	r2, [r3, #12]
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <RTC_GetFlagStatus+0x40>)
 800ad92:	4013      	ands	r3, r2
 800ad94:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800ada0:	2301      	movs	r3, #1
 800ada2:	73fb      	strb	r3, [r7, #15]
 800ada4:	e001      	b.n	800adaa <RTC_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800ada6:	2300      	movs	r3, #0
 800ada8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	40002800 	.word	0x40002800
 800adbc:	00013f7f 	.word	0x00013f7f

0800adc0 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800adc8:	4908      	ldr	r1, [pc, #32]	; (800adec <RTC_ClearFlag+0x2c>)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	b29b      	uxth	r3, r3
 800adce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add2:	43da      	mvns	r2, r3
 800add4:	4b05      	ldr	r3, [pc, #20]	; (800adec <RTC_ClearFlag+0x2c>)
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800addc:	4313      	orrs	r3, r2
 800adde:	60cb      	str	r3, [r1, #12]
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	40002800 	.word	0x40002800

0800adf0 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b087      	sub	sp, #28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800adf8:	2300      	movs	r3, #0
 800adfa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	613b      	str	r3, [r7, #16]
 800ae00:	2300      	movs	r3, #0
 800ae02:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800ae04:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <RTC_GetITStatus+0x64>)
 800ae06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800ae0e:	4b11      	ldr	r3, [pc, #68]	; (800ae54 <RTC_GetITStatus+0x64>)
 800ae10:	689a      	ldr	r2, [r3, #8]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	401a      	ands	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	0bd9      	lsrs	r1, r3, #15
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	400b      	ands	r3, r1
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800ae22:	4b0c      	ldr	r3, [pc, #48]	; (800ae54 <RTC_GetITStatus+0x64>)
 800ae24:	68da      	ldr	r2, [r3, #12]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	091b      	lsrs	r3, r3, #4
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d006      	beq.n	800ae42 <RTC_GetITStatus+0x52>
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d002      	beq.n	800ae42 <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	75fb      	strb	r3, [r7, #23]
 800ae40:	e001      	b.n	800ae46 <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 800ae42:	2300      	movs	r3, #0
 800ae44:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	371c      	adds	r7, #28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	40002800 	.word	0x40002800

0800ae58 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	091b      	lsrs	r3, r3, #4
 800ae68:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800ae6a:	4909      	ldr	r1, [pc, #36]	; (800ae90 <RTC_ClearITPendingBit+0x38>)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae74:	43da      	mvns	r2, r3
 800ae76:	4b06      	ldr	r3, [pc, #24]	; (800ae90 <RTC_ClearITPendingBit+0x38>)
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	60cb      	str	r3, [r1, #12]
}
 800ae82:	bf00      	nop
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	40002800 	.word	0x40002800

0800ae94 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800aea2:	e005      	b.n	800aeb0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
 800aea6:	3301      	adds	r3, #1
 800aea8:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	3b0a      	subs	r3, #10
 800aeae:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 800aeb0:	79fb      	ldrb	r3, [r7, #7]
 800aeb2:	2b09      	cmp	r3, #9
 800aeb4:	d8f6      	bhi.n	800aea4 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
 800aeb8:	011b      	lsls	r3, r3, #4
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	79fb      	ldrb	r3, [r7, #7]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	b2db      	uxtb	r3, r3
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800aece:	b480      	push	{r7}
 800aed0:	b085      	sub	sp, #20
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	4603      	mov	r3, r0
 800aed6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	091b      	lsrs	r3, r3, #4
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	461a      	mov	r2, r3
 800aee4:	0092      	lsls	r2, r2, #2
 800aee6:	4413      	add	r3, r2
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800aeec:	79fb      	ldrb	r3, [r7, #7]
 800aeee:	f003 030f 	and.w	r3, r3, #15
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
 800aef6:	4413      	add	r3, r2
 800aef8:	b2db      	uxtb	r3, r3
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop

0800af08 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800af0c:	2101      	movs	r1, #1
 800af0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af12:	f7fe fb45 	bl	80095a0 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800af16:	2100      	movs	r1, #0
 800af18:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af1c:	f7fe fb40 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 800af20:	bf00      	nop
 800af22:	bd80      	pop	{r7, pc}

0800af24 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800af30:	4b13      	ldr	r3, [pc, #76]	; (800af80 <SDIO_Init+0x5c>)
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800af3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af40:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	7d1b      	ldrb	r3, [r3, #20]
 800af46:	461a      	mov	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800af52:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800af5e:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	4313      	orrs	r3, r2
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	4313      	orrs	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800af6c:	4a04      	ldr	r2, [pc, #16]	; (800af80 <SDIO_Init+0x5c>)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6053      	str	r3, [r2, #4]
}
 800af72:	bf00      	nop
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	40012c00 	.word	0x40012c00

0800af84 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	611a      	str	r2, [r3, #16]
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800afc6:	4a04      	ldr	r2, [pc, #16]	; (800afd8 <SDIO_ClockCmd+0x1c>)
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	6013      	str	r3, [r2, #0]
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	422580a0 	.word	0x422580a0

0800afdc <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800afe4:	4a04      	ldr	r2, [pc, #16]	; (800aff8 <SDIO_SetPowerState+0x1c>)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6013      	str	r3, [r2, #0]
}
 800afea:	bf00      	nop
 800afec:	370c      	adds	r7, #12
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	40012c00 	.word	0x40012c00

0800affc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800b000:	4b04      	ldr	r3, [pc, #16]	; (800b014 <SDIO_GetPowerState+0x18>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0303 	and.w	r3, r3, #3
}
 800b008:	4618      	mov	r0, r3
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	40012c00 	.word	0x40012c00

0800b018 <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800b024:	4a11      	ldr	r2, [pc, #68]	; (800b06c <SDIO_SendCommand+0x54>)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	6093      	str	r3, [r2, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800b02c:	4b0f      	ldr	r3, [pc, #60]	; (800b06c <SDIO_SendCommand+0x54>)
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b038:	f023 0307 	bic.w	r3, r3, #7
 800b03c:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	431a      	orrs	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	4313      	orrs	r3, r2
 800b058:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800b05a:	4a04      	ldr	r2, [pc, #16]	; (800b06c <SDIO_SendCommand+0x54>)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	60d3      	str	r3, [r2, #12]
}
 800b060:	bf00      	nop
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	40012c00 	.word	0x40012c00

0800b070 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	611a      	str	r2, [r3, #16]
}
 800b096:	bf00      	nop
 800b098:	370c      	adds	r7, #12
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800b0a2:	b480      	push	{r7}
 800b0a4:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800b0a6:	4b04      	ldr	r3, [pc, #16]	; (800b0b8 <SDIO_GetCommandResponse+0x16>)
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	b2db      	uxtb	r3, r3
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	40012c00 	.word	0x40012c00

0800b0bc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	4b05      	ldr	r3, [pc, #20]	; (800b0e0 <SDIO_GetResponse+0x24>)
 800b0cc:	4413      	add	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	40012c14 	.word	0x40012c14

0800b0e4 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800b0f0:	4a12      	ldr	r2, [pc, #72]	; (800b13c <SDIO_DataConfig+0x58>)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6253      	str	r3, [r2, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800b0f8:	4a10      	ldr	r2, [pc, #64]	; (800b13c <SDIO_DataConfig+0x58>)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	6293      	str	r3, [r2, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800b100:	4b0e      	ldr	r3, [pc, #56]	; (800b13c <SDIO_DataConfig+0x58>)
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800b10c:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	689a      	ldr	r2, [r3, #8]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	431a      	orrs	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	695b      	ldr	r3, [r3, #20]
 800b122:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	4313      	orrs	r3, r2
 800b128:	60fb      	str	r3, [r7, #12]

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800b12a:	4a04      	ldr	r2, [pc, #16]	; (800b13c <SDIO_DataConfig+0x58>)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b130:	bf00      	nop
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	40012c00 	.word	0x40012c00

0800b140 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b14e:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	615a      	str	r2, [r3, #20]
}
 800b16e:	bf00      	nop
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800b17a:	b480      	push	{r7}
 800b17c:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800b17e:	4b03      	ldr	r3, [pc, #12]	; (800b18c <SDIO_GetDataCounter+0x12>)
 800b180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800b182:	4618      	mov	r0, r3
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	40012c00 	.word	0x40012c00

0800b190 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800b190:	b480      	push	{r7}
 800b192:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800b194:	4b03      	ldr	r3, [pc, #12]	; (800b1a4 <SDIO_ReadData+0x14>)
 800b196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr
 800b1a4:	40012c00 	.word	0x40012c00

0800b1a8 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800b1b0:	4a04      	ldr	r2, [pc, #16]	; (800b1c4 <SDIO_WriteData+0x1c>)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	40012c00 	.word	0x40012c00

0800b1c8 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800b1c8:	b480      	push	{r7}
 800b1ca:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800b1cc:	4b03      	ldr	r3, [pc, #12]	; (800b1dc <SDIO_GetFIFOCount+0x14>)
 800b1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	40012c00 	.word	0x40012c00

0800b1e0 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800b1ea:	4a04      	ldr	r2, [pc, #16]	; (800b1fc <SDIO_StartSDIOReadWait+0x1c>)
 800b1ec:	79fb      	ldrb	r3, [r7, #7]
 800b1ee:	6013      	str	r3, [r2, #0]
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	422585a0 	.word	0x422585a0

0800b200 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800b20a:	4a04      	ldr	r2, [pc, #16]	; (800b21c <SDIO_StopSDIOReadWait+0x1c>)
 800b20c:	79fb      	ldrb	r3, [r7, #7]
 800b20e:	6013      	str	r3, [r2, #0]
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	422585a4 	.word	0x422585a4

0800b220 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800b228:	4a04      	ldr	r2, [pc, #16]	; (800b23c <SDIO_SetSDIOReadWaitMode+0x1c>)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6013      	str	r3, [r2, #0]
}
 800b22e:	bf00      	nop
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	422585a8 	.word	0x422585a8

0800b240 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	4603      	mov	r3, r0
 800b248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800b24a:	4a04      	ldr	r2, [pc, #16]	; (800b25c <SDIO_SetSDIOOperation+0x1c>)
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	6013      	str	r3, [r2, #0]
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	422585ac 	.word	0x422585ac

0800b260 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800b26a:	4a04      	ldr	r2, [pc, #16]	; (800b27c <SDIO_SendSDIOSuspendCmd+0x1c>)
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	6013      	str	r3, [r2, #0]
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	422581ac 	.word	0x422581ac

0800b280 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	4603      	mov	r3, r0
 800b288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800b28a:	4a04      	ldr	r2, [pc, #16]	; (800b29c <SDIO_CommandCompletionCmd+0x1c>)
 800b28c:	79fb      	ldrb	r3, [r7, #7]
 800b28e:	6013      	str	r3, [r2, #0]
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	422581b0 	.word	0x422581b0

0800b2a0 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800b2aa:	4a08      	ldr	r2, [pc, #32]	; (800b2cc <SDIO_CEATAITCmd+0x2c>)
 800b2ac:	79fb      	ldrb	r3, [r7, #7]
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	bf0c      	ite	eq
 800b2b6:	2301      	moveq	r3, #1
 800b2b8:	2300      	movne	r3, #0
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	6013      	str	r3, [r2, #0]
}
 800b2be:	bf00      	nop
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	422581b4 	.word	0x422581b4

0800b2d0 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800b2da:	4a04      	ldr	r2, [pc, #16]	; (800b2ec <SDIO_SendCEATACmd+0x1c>)
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
 800b2de:	6013      	str	r3, [r2, #0]
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	422581b8 	.word	0x422581b8

0800b2f0 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800b2fa:	4a04      	ldr	r2, [pc, #16]	; (800b30c <SDIO_DMACmd+0x1c>)
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	6013      	str	r3, [r2, #0]
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	4225858c 	.word	0x4225858c

0800b310 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800b31c:	78fb      	ldrb	r3, [r7, #3]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d006      	beq.n	800b330 <SDIO_ITConfig+0x20>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800b322:	490a      	ldr	r1, [pc, #40]	; (800b34c <SDIO_ITConfig+0x3c>)
 800b324:	4b09      	ldr	r3, [pc, #36]	; (800b34c <SDIO_ITConfig+0x3c>)
 800b326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	63cb      	str	r3, [r1, #60]	; 0x3c
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
  } 
}
 800b32e:	e006      	b.n	800b33e <SDIO_ITConfig+0x2e>
    SDIO->MASK &= ~SDIO_IT;
 800b330:	4906      	ldr	r1, [pc, #24]	; (800b34c <SDIO_ITConfig+0x3c>)
 800b332:	4b06      	ldr	r3, [pc, #24]	; (800b34c <SDIO_ITConfig+0x3c>)
 800b334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	43db      	mvns	r3, r3
 800b33a:	4013      	ands	r3, r2
 800b33c:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	40012c00 	.word	0x40012c00

0800b350 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800b35c:	4b08      	ldr	r3, [pc, #32]	; (800b380 <SDIO_GetFlagStatus+0x30>)
 800b35e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4013      	ands	r3, r2
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <SDIO_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800b368:	2301      	movs	r3, #1
 800b36a:	73fb      	strb	r3, [r7, #15]
 800b36c:	e001      	b.n	800b372 <SDIO_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800b36e:	2300      	movs	r3, #0
 800b370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	40012c00 	.word	0x40012c00

0800b384 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800b38c:	4a04      	ldr	r2, [pc, #16]	; (800b3a0 <SDIO_ClearFlag+0x1c>)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6393      	str	r3, [r2, #56]	; 0x38
}
 800b392:	bf00      	nop
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	40012c00 	.word	0x40012c00

0800b3a4 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800b3b0:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <SDIO_GetITStatus+0x30>)
 800b3b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <SDIO_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	73fb      	strb	r3, [r7, #15]
 800b3c0:	e001      	b.n	800b3c6 <SDIO_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	40012c00 	.word	0x40012c00

0800b3d8 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800b3e0:	4a04      	ldr	r2, [pc, #16]	; (800b3f4 <SDIO_ClearITPendingBit+0x1c>)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 800b3e6:	bf00      	nop
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	40012c00 	.word	0x40012c00

0800b3f8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a2e      	ldr	r2, [pc, #184]	; (800b4bc <SPI_I2S_DeInit+0xc4>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d10a      	bne.n	800b41e <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800b408:	2101      	movs	r1, #1
 800b40a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b40e:	f7fe f8c7 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800b412:	2100      	movs	r1, #0
 800b414:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b418:	f7fe f8c2 	bl	80095a0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800b41c:	e049      	b.n	800b4b2 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a27      	ldr	r2, [pc, #156]	; (800b4c0 <SPI_I2S_DeInit+0xc8>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d10a      	bne.n	800b43c <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800b426:	2101      	movs	r1, #1
 800b428:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b42c:	f7fe f898 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800b430:	2100      	movs	r1, #0
 800b432:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b436:	f7fe f893 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800b43a:	e03a      	b.n	800b4b2 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a21      	ldr	r2, [pc, #132]	; (800b4c4 <SPI_I2S_DeInit+0xcc>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d10a      	bne.n	800b45a <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800b444:	2101      	movs	r1, #1
 800b446:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b44a:	f7fe f889 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800b44e:	2100      	movs	r1, #0
 800b450:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b454:	f7fe f884 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800b458:	e02b      	b.n	800b4b2 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a1a      	ldr	r2, [pc, #104]	; (800b4c8 <SPI_I2S_DeInit+0xd0>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d10a      	bne.n	800b478 <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 800b462:	2101      	movs	r1, #1
 800b464:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b468:	f7fe f89a 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 800b46c:	2100      	movs	r1, #0
 800b46e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b472:	f7fe f895 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 800b476:	e01c      	b.n	800b4b2 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a14      	ldr	r2, [pc, #80]	; (800b4cc <SPI_I2S_DeInit+0xd4>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d10a      	bne.n	800b496 <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 800b480:	2101      	movs	r1, #1
 800b482:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b486:	f7fe f88b 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 800b48a:	2100      	movs	r1, #0
 800b48c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b490:	f7fe f886 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 800b494:	e00d      	b.n	800b4b2 <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a0d      	ldr	r2, [pc, #52]	; (800b4d0 <SPI_I2S_DeInit+0xd8>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d109      	bne.n	800b4b2 <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 800b49e:	2101      	movs	r1, #1
 800b4a0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b4a4:	f7fe f87c 	bl	80095a0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b4ae:	f7fe f877 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 800b4b2:	bf00      	nop
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	40013000 	.word	0x40013000
 800b4c0:	40003800 	.word	0x40003800
 800b4c4:	40003c00 	.word	0x40003c00
 800b4c8:	40013400 	.word	0x40013400
 800b4cc:	40015000 	.word	0x40015000
 800b4d0:	40015400 	.word	0x40015400

0800b4d4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	881b      	ldrh	r3, [r3, #0]
 800b4e6:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800b4e8:	89fb      	ldrh	r3, [r7, #14]
 800b4ea:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800b4ee:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	881a      	ldrh	r2, [r3, #0]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	885b      	ldrh	r3, [r3, #2]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b500:	4313      	orrs	r3, r2
 800b502:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b508:	4313      	orrs	r3, r2
 800b50a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b510:	4313      	orrs	r3, r2
 800b512:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b518:	4313      	orrs	r3, r2
 800b51a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b520:	4313      	orrs	r3, r2
 800b522:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b528:	4313      	orrs	r3, r2
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	89fb      	ldrh	r3, [r7, #14]
 800b52e:	4313      	orrs	r3, r2
 800b530:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	89fa      	ldrh	r2, [r7, #14]
 800b536:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	8b9b      	ldrh	r3, [r3, #28]
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b542:	b29a      	uxth	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	8a1a      	ldrh	r2, [r3, #16]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	821a      	strh	r2, [r3, #16]
}
 800b550:	bf00      	nop
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b08b      	sub	sp, #44	; 0x2c
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800b566:	2300      	movs	r3, #0
 800b568:	837b      	strh	r3, [r7, #26]
 800b56a:	2302      	movs	r3, #2
 800b56c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b56e:	2300      	movs	r3, #0
 800b570:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b572:	2301      	movs	r3, #1
 800b574:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	61fb      	str	r3, [r7, #28]
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	613b      	str	r3, [r7, #16]
 800b582:	2300      	movs	r3, #0
 800b584:	60fb      	str	r3, [r7, #12]
 800b586:	2300      	movs	r3, #0
 800b588:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	8b9b      	ldrh	r3, [r3, #28]
 800b58e:	b29b      	uxth	r3, r3
 800b590:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b594:	f023 030f 	bic.w	r3, r3, #15
 800b598:	b29a      	uxth	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	8b9b      	ldrh	r3, [r3, #28]
 800b5a8:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d104      	bne.n	800b5bc <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800b5b6:	2302      	movs	r3, #2
 800b5b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b5ba:	e06d      	b.n	800b698 <I2S_Init+0x13c>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	889b      	ldrh	r3, [r3, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	847b      	strh	r3, [r7, #34]	; 0x22
 800b5c8:	e001      	b.n	800b5ce <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800b5ca:	2302      	movs	r3, #2
 800b5cc:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800b5ce:	4b4b      	ldr	r3, [pc, #300]	; (800b6fc <I2S_Init+0x1a0>)
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d005      	beq.n	800b5e6 <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800b5da:	4a48      	ldr	r2, [pc, #288]	; (800b6fc <I2S_Init+0x1a0>)
 800b5dc:	4b47      	ldr	r3, [pc, #284]	; (800b6fc <I2S_Init+0x1a0>)
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b5e4:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800b5e6:	4b45      	ldr	r3, [pc, #276]	; (800b6fc <I2S_Init+0x1a0>)
 800b5e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5ec:	099b      	lsrs	r3, r3, #6
 800b5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f2:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800b5f4:	4b41      	ldr	r3, [pc, #260]	; (800b6fc <I2S_Init+0x1a0>)
 800b5f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5fa:	0f1b      	lsrs	r3, r3, #28
 800b5fc:	f003 0307 	and.w	r3, r3, #7
 800b600:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800b602:	4b3e      	ldr	r3, [pc, #248]	; (800b6fc <I2S_Init+0x1a0>)
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b60a:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800b60c:	4a3c      	ldr	r2, [pc, #240]	; (800b700 <I2S_Init+0x1a4>)
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	fbb2 f3f3 	udiv	r3, r2, r3
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	fb02 f203 	mul.w	r2, r2, r3
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b620:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	88db      	ldrh	r3, [r3, #6]
 800b626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b62a:	d10f      	bne.n	800b64c <I2S_Init+0xf0>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	0a1a      	lsrs	r2, r3, #8
 800b630:	4613      	mov	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4413      	add	r3, r2
 800b636:	005b      	lsls	r3, r3, #1
 800b638:	461a      	mov	r2, r3
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b642:	b29b      	uxth	r3, r3
 800b644:	3305      	adds	r3, #5
 800b646:	b29b      	uxth	r3, r3
 800b648:	61fb      	str	r3, [r7, #28]
 800b64a:	e012      	b.n	800b672 <I2S_Init+0x116>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800b64c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b64e:	015b      	lsls	r3, r3, #5
 800b650:	461a      	mov	r2, r3
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	fbb3 f2f2 	udiv	r2, r3, r2
 800b658:	4613      	mov	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4413      	add	r3, r2
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	461a      	mov	r2, r3
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	fbb2 f3f3 	udiv	r3, r2, r3
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	3305      	adds	r3, #5
 800b66e:	b29b      	uxth	r3, r3
 800b670:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	4a23      	ldr	r2, [pc, #140]	; (800b704 <I2S_Init+0x1a8>)
 800b676:	fba2 2303 	umull	r2, r3, r2, r3
 800b67a:	08db      	lsrs	r3, r3, #3
 800b67c:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	b29b      	uxth	r3, r3
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800b688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b68a:	69fa      	ldr	r2, [r7, #28]
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	085b      	lsrs	r3, r3, #1
 800b690:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800b692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b694:	021b      	lsls	r3, r3, #8
 800b696:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800b698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d902      	bls.n	800b6a4 <I2S_Init+0x148>
 800b69e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b6a0:	2bff      	cmp	r3, #255	; 0xff
 800b6a2:	d903      	bls.n	800b6ac <I2S_Init+0x150>
  {
    /* Set the default values */
    i2sdiv = 2;
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	88da      	ldrh	r2, [r3, #6]
 800b6b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	8859      	ldrh	r1, [r3, #2]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b6d0:	4303      	orrs	r3, r0
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	430b      	orrs	r3, r1
 800b6d6:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	8b7b      	ldrh	r3, [r7, #26]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b6e6:	837b      	strh	r3, [r7, #26]
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	8b7a      	ldrh	r2, [r7, #26]
 800b6ec:	839a      	strh	r2, [r3, #28]
}
 800b6ee:	bf00      	nop
 800b6f0:	372c      	adds	r7, #44	; 0x2c
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	40023800 	.word	0x40023800
 800b700:	017d7840 	.word	0x017d7840
 800b704:	cccccccd 	.word	0xcccccccd

0800b708 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2207      	movs	r2, #7
 800b744:	821a      	strh	r2, [r3, #16]
}
 800b746:	bf00      	nop
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800b752:	b480      	push	{r7}
 800b754:	b083      	sub	sp, #12
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2202      	movs	r2, #2
 800b776:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	819a      	strh	r2, [r3, #12]
}
 800b77e:	bf00      	nop
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b083      	sub	sp, #12
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	460b      	mov	r3, r1
 800b794:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b796:	78fb      	ldrb	r3, [r7, #3]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d008      	beq.n	800b7ae <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 800b7ac:	e007      	b.n	800b7be <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	801a      	strh	r2, [r3, #0]
}
 800b7be:	bf00      	nop
 800b7c0:	370c      	adds	r7, #12
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800b7d6:	78fb      	ldrb	r3, [r7, #3]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d008      	beq.n	800b7ee <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	8b9b      	ldrh	r3, [r3, #28]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 800b7ec:	e007      	b.n	800b7fe <I2S_Cmd+0x34>
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	8b9b      	ldrh	r3, [r3, #28]
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	839a      	strh	r2, [r3, #28]
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	460b      	mov	r3, r1
 800b814:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b820:	b29a      	uxth	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	881b      	ldrh	r3, [r3, #0]
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	887b      	ldrh	r3, [r7, #2]
 800b82e:	4313      	orrs	r3, r2
 800b830:	b29a      	uxth	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	801a      	strh	r2, [r3, #0]
}
 800b836:	bf00      	nop
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800b842:	b480      	push	{r7}
 800b844:	b083      	sub	sp, #12
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	460b      	mov	r3, r1
 800b84c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800b84e:	887b      	ldrh	r3, [r7, #2]
 800b850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b854:	d108      	bne.n	800b868 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b860:	b29a      	uxth	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
  }
}
 800b866:	e007      	b.n	800b878 <SPI_BiDirectionalLineConfig+0x36>
    SPIx->CR1 &= SPI_Direction_Rx;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	881b      	ldrh	r3, [r3, #0]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b872:	b29a      	uxth	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	801a      	strh	r2, [r3, #0]
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800b890:	887b      	ldrh	r3, [r7, #2]
 800b892:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800b896:	4293      	cmp	r3, r2
 800b898:	d008      	beq.n	800b8ac <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
  }
}
 800b8aa:	e007      	b.n	800b8bc <SPI_NSSInternalSoftwareConfig+0x38>
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	801a      	strh	r2, [r3, #0]
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d008      	beq.n	800b8ec <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	889b      	ldrh	r3, [r3, #4]
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	f043 0304 	orr.w	r3, r3, #4
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
  }
}
 800b8ea:	e007      	b.n	800b8fc <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	889b      	ldrh	r3, [r3, #4]
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	f023 0304 	bic.w	r3, r3, #4
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	809a      	strh	r2, [r3, #4]
}
 800b8fc:	bf00      	nop
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	460b      	mov	r3, r1
 800b912:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d008      	beq.n	800b92c <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	889b      	ldrh	r3, [r3, #4]
 800b91e:	b29b      	uxth	r3, r3
 800b920:	f043 0310 	orr.w	r3, r3, #16
 800b924:	b29a      	uxth	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
  }
}
 800b92a:	e007      	b.n	800b93c <SPI_TIModeCmd+0x34>
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	889b      	ldrh	r3, [r3, #4]
 800b930:	b29b      	uxth	r3, r3
 800b932:	f023 0310 	bic.w	r3, r3, #16
 800b936:	b29a      	uxth	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	809a      	strh	r2, [r3, #4]
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	81bb      	strh	r3, [r7, #12]
 800b956:	2300      	movs	r3, #0
 800b958:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8b9b      	ldrh	r3, [r3, #28]
 800b95e:	b29b      	uxth	r3, r3
 800b960:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b964:	f023 030f 	bic.w	r3, r3, #15
 800b968:	b29a      	uxth	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2202      	movs	r2, #2
 800b972:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	8b9b      	ldrh	r3, [r3, #28]
 800b978:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b982:	d003      	beq.n	800b98c <I2S_FullDuplexConfig+0x44>
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d103      	bne.n	800b994 <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 800b98c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b990:	81fb      	strh	r3, [r7, #14]
 800b992:	e00b      	b.n	800b9ac <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	881b      	ldrh	r3, [r3, #0]
 800b998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b99c:	d004      	beq.n	800b9a8 <I2S_FullDuplexConfig+0x60>
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9a6:	d101      	bne.n	800b9ac <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	885a      	ldrh	r2, [r3, #2]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800b9b8:	430b      	orrs	r3, r1
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	b29a      	uxth	r2, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800b9c0:	89fb      	ldrh	r3, [r7, #14]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	89bb      	ldrh	r3, [r7, #12]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b9d0:	81bb      	strh	r3, [r7, #12]
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	89ba      	ldrh	r2, [r7, #12]
 800b9d6:	839a      	strh	r2, [r3, #28]
}
 800b9d8:	bf00      	nop
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	899b      	ldrh	r3, [r3, #12]
 800b9f0:	b29b      	uxth	r3, r3
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b083      	sub	sp, #12
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	460b      	mov	r3, r1
 800ba08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	887a      	ldrh	r2, [r7, #2]
 800ba0e:	819a      	strh	r2, [r3, #12]
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ba28:	78fb      	ldrb	r3, [r7, #3]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d008      	beq.n	800ba40 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
  }
}
 800ba3e:	e007      	b.n	800ba50 <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	801a      	strh	r2, [r3, #0]
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	881b      	ldrh	r3, [r3, #0]
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	801a      	strh	r2, [r3, #0]
}
 800ba74:	bf00      	nop
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d003      	beq.n	800ba9e <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	8b1b      	ldrh	r3, [r3, #24]
 800ba9a:	81fb      	strh	r3, [r7, #14]
 800ba9c:	e002      	b.n	800baa4 <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	8a9b      	ldrh	r3, [r3, #20]
 800baa2:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800baa4:	89fb      	ldrh	r3, [r7, #14]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b083      	sub	sp, #12
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	8a1b      	ldrh	r3, [r3, #16]
 800babe:	b29b      	uxth	r3, r3
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	460b      	mov	r3, r1
 800bad6:	807b      	strh	r3, [r7, #2]
 800bad8:	4613      	mov	r3, r2
 800bada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800badc:	787b      	ldrb	r3, [r7, #1]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d008      	beq.n	800baf4 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	889b      	ldrh	r3, [r3, #4]
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	887b      	ldrh	r3, [r7, #2]
 800baea:	4313      	orrs	r3, r2
 800baec:	b29a      	uxth	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800baf2:	e009      	b.n	800bb08 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	889b      	ldrh	r3, [r3, #4]
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	887b      	ldrh	r3, [r7, #2]
 800bafc:	43db      	mvns	r3, r3
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	4013      	ands	r3, r2
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	809a      	strh	r2, [r3, #4]
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70fb      	strb	r3, [r7, #3]
 800bb20:	4613      	mov	r3, r2
 800bb22:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800bb24:	2300      	movs	r3, #0
 800bb26:	81fb      	strh	r3, [r7, #14]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800bb2c:	78fb      	ldrb	r3, [r7, #3]
 800bb2e:	091b      	lsrs	r3, r3, #4
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800bb34:	89fb      	ldrh	r3, [r7, #14]
 800bb36:	2201      	movs	r2, #1
 800bb38:	fa02 f303 	lsl.w	r3, r2, r3
 800bb3c:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800bb3e:	78bb      	ldrb	r3, [r7, #2]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d008      	beq.n	800bb56 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	889b      	ldrh	r3, [r3, #4]
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	89bb      	ldrh	r3, [r7, #12]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 800bb54:	e009      	b.n	800bb6a <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	889b      	ldrh	r3, [r3, #4]
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	89bb      	ldrh	r3, [r7, #12]
 800bb5e:	43db      	mvns	r3, r3
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	4013      	ands	r3, r2
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	809a      	strh	r2, [r3, #4]
}
 800bb6a:	bf00      	nop
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b085      	sub	sp, #20
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	460b      	mov	r3, r1
 800bb80:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	891b      	ldrh	r3, [r3, #8]
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	887b      	ldrh	r3, [r7, #2]
 800bb8e:	4013      	ands	r3, r2
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800bb96:	2301      	movs	r3, #1
 800bb98:	73fb      	strb	r3, [r7, #15]
 800bb9a:	e001      	b.n	800bba0 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b083      	sub	sp, #12
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800bbba:	887b      	ldrh	r3, [r7, #2]
 800bbbc:	43db      	mvns	r3, r3
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	811a      	strh	r2, [r3, #8]
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	81bb      	strh	r3, [r7, #12]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	817b      	strh	r3, [r7, #10]
 800bbe8:	2300      	movs	r3, #0
 800bbea:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800bbec:	78fb      	ldrb	r3, [r7, #3]
 800bbee:	f003 030f 	and.w	r3, r3, #15
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf8:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800bbfa:	78fb      	ldrb	r3, [r7, #3]
 800bbfc:	091b      	lsrs	r3, r3, #4
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800bc02:	897b      	ldrh	r3, [r7, #10]
 800bc04:	2201      	movs	r2, #1
 800bc06:	fa02 f303 	lsl.w	r3, r2, r3
 800bc0a:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	889b      	ldrh	r3, [r3, #4]
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	897b      	ldrh	r3, [r7, #10]
 800bc14:	4013      	ands	r3, r2
 800bc16:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	891b      	ldrh	r3, [r3, #8]
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	89bb      	ldrh	r3, [r7, #12]
 800bc20:	4013      	ands	r3, r2
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d005      	beq.n	800bc34 <SPI_I2S_GetITStatus+0x64>
 800bc28:	893b      	ldrh	r3, [r7, #8]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	73fb      	strb	r3, [r7, #15]
 800bc32:	e001      	b.n	800bc38 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr

0800bc46 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800bc46:	b480      	push	{r7}
 800bc48:	b085      	sub	sp, #20
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	460b      	mov	r3, r1
 800bc50:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800bc52:	2300      	movs	r3, #0
 800bc54:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800bc56:	78fb      	ldrb	r3, [r7, #3]
 800bc58:	f003 030f 	and.w	r3, r3, #15
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc62:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800bc64:	89fb      	ldrh	r3, [r7, #14]
 800bc66:	43db      	mvns	r3, r3
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	811a      	strh	r2, [r3, #8]
}
 800bc6e:	bf00      	nop
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop

0800bc7c <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800bc80:	2101      	movs	r1, #1
 800bc82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bc86:	f7fd fc8b 	bl	80095a0 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bc90:	f7fd fc86 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 800bc94:	bf00      	nop
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000   
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000          
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800bca2:	4a04      	ldr	r2, [pc, #16]	; (800bcb4 <SYSCFG_MemoryRemapConfig+0x1c>)
 800bca4:	79fb      	ldrb	r3, [r7, #7]
 800bca6:	6013      	str	r3, [r2, #0]
}
 800bca8:	bf00      	nop
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr
 800bcb4:	40013800 	.word	0x40013800

0800bcb8 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800bcb8:	b490      	push	{r4, r7}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	460a      	mov	r2, r1
 800bcc2:	71fb      	strb	r3, [r7, #7]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800bccc:	79bb      	ldrb	r3, [r7, #6]
 800bcce:	f003 0303 	and.w	r3, r3, #3
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	220f      	movs	r2, #15
 800bcd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcda:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800bcdc:	4916      	ldr	r1, [pc, #88]	; (800bd38 <SYSCFG_EXTILineConfig+0x80>)
 800bcde:	79bb      	ldrb	r3, [r7, #6]
 800bce0:	089b      	lsrs	r3, r3, #2
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	4618      	mov	r0, r3
 800bce6:	4a14      	ldr	r2, [pc, #80]	; (800bd38 <SYSCFG_EXTILineConfig+0x80>)
 800bce8:	79bb      	ldrb	r3, [r7, #6]
 800bcea:	089b      	lsrs	r3, r3, #2
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	3302      	adds	r3, #2
 800bcf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	43db      	mvns	r3, r3
 800bcf8:	401a      	ands	r2, r3
 800bcfa:	1c83      	adds	r3, r0, #2
 800bcfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800bd00:	480d      	ldr	r0, [pc, #52]	; (800bd38 <SYSCFG_EXTILineConfig+0x80>)
 800bd02:	79bb      	ldrb	r3, [r7, #6]
 800bd04:	089b      	lsrs	r3, r3, #2
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	461c      	mov	r4, r3
 800bd0a:	4a0b      	ldr	r2, [pc, #44]	; (800bd38 <SYSCFG_EXTILineConfig+0x80>)
 800bd0c:	79bb      	ldrb	r3, [r7, #6]
 800bd0e:	089b      	lsrs	r3, r3, #2
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	3302      	adds	r3, #2
 800bd14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bd18:	79f9      	ldrb	r1, [r7, #7]
 800bd1a:	79bb      	ldrb	r3, [r7, #6]
 800bd1c:	f003 0303 	and.w	r3, r3, #3
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	fa01 f303 	lsl.w	r3, r1, r3
 800bd26:	431a      	orrs	r2, r3
 800bd28:	1ca3      	adds	r3, r4, #2
 800bd2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800bd2e:	bf00      	nop
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bc90      	pop	{r4, r7}
 800bd36:	4770      	bx	lr
 800bd38:	40013800 	.word	0x40013800

0800bd3c <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800bd44:	4a04      	ldr	r2, [pc, #16]	; (800bd58 <SYSCFG_ETH_MediaInterfaceConfig+0x1c>)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6013      	str	r3, [r2, #0]
}
 800bd4a:	bf00      	nop
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	422700dc 	.word	0x422700dc

0800bd5c <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800bd66:	4a04      	ldr	r2, [pc, #16]	; (800bd78 <SYSCFG_CompensationCellCmd+0x1c>)
 800bd68:	79fb      	ldrb	r3, [r7, #7]
 800bd6a:	6013      	str	r3, [r2, #0]
}
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	42270400 	.word	0x42270400

0800bd7c <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800bd82:	2300      	movs	r3, #0
 800bd84:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800bd86:	4b09      	ldr	r3, [pc, #36]	; (800bdac <SYSCFG_GetCompensationCellStatus+0x30>)
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d002      	beq.n	800bd98 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 800bd92:	2301      	movs	r3, #1
 800bd94:	71fb      	strb	r3, [r7, #7]
 800bd96:	e001      	b.n	800bd9c <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800bd9c:	79fb      	ldrb	r3, [r7, #7]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	40013800 	.word	0x40013800

0800bdb0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a60      	ldr	r2, [pc, #384]	; (800bf3c <TIM_DeInit+0x18c>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d108      	bne.n	800bdd2 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	2001      	movs	r0, #1
 800bdc4:	f7fd fbec 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800bdc8:	2100      	movs	r1, #0
 800bdca:	2001      	movs	r0, #1
 800bdcc:	f7fd fbe8 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800bdd0:	e0af      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdd8:	d108      	bne.n	800bdec <TIM_DeInit+0x3c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800bdda:	2101      	movs	r1, #1
 800bddc:	2001      	movs	r0, #1
 800bdde:	f7fd fbbf 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800bde2:	2100      	movs	r1, #0
 800bde4:	2001      	movs	r0, #1
 800bde6:	f7fd fbbb 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800bdea:	e0a2      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a54      	ldr	r2, [pc, #336]	; (800bf40 <TIM_DeInit+0x190>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d108      	bne.n	800be06 <TIM_DeInit+0x56>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800bdf4:	2101      	movs	r1, #1
 800bdf6:	2002      	movs	r0, #2
 800bdf8:	f7fd fbb2 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	2002      	movs	r0, #2
 800be00:	f7fd fbae 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800be04:	e095      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a4e      	ldr	r2, [pc, #312]	; (800bf44 <TIM_DeInit+0x194>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d108      	bne.n	800be20 <TIM_DeInit+0x70>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800be0e:	2101      	movs	r1, #1
 800be10:	2004      	movs	r0, #4
 800be12:	f7fd fba5 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800be16:	2100      	movs	r1, #0
 800be18:	2004      	movs	r0, #4
 800be1a:	f7fd fba1 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800be1e:	e088      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4a49      	ldr	r2, [pc, #292]	; (800bf48 <TIM_DeInit+0x198>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d108      	bne.n	800be3a <TIM_DeInit+0x8a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800be28:	2101      	movs	r1, #1
 800be2a:	2008      	movs	r0, #8
 800be2c:	f7fd fb98 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800be30:	2100      	movs	r1, #0
 800be32:	2008      	movs	r0, #8
 800be34:	f7fd fb94 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800be38:	e07b      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a43      	ldr	r2, [pc, #268]	; (800bf4c <TIM_DeInit+0x19c>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d108      	bne.n	800be54 <TIM_DeInit+0xa4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800be42:	2101      	movs	r1, #1
 800be44:	2010      	movs	r0, #16
 800be46:	f7fd fb8b 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800be4a:	2100      	movs	r1, #0
 800be4c:	2010      	movs	r0, #16
 800be4e:	f7fd fb87 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800be52:	e06e      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a3e      	ldr	r2, [pc, #248]	; (800bf50 <TIM_DeInit+0x1a0>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d108      	bne.n	800be6e <TIM_DeInit+0xbe>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800be5c:	2101      	movs	r1, #1
 800be5e:	2020      	movs	r0, #32
 800be60:	f7fd fb7e 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800be64:	2100      	movs	r1, #0
 800be66:	2020      	movs	r0, #32
 800be68:	f7fd fb7a 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800be6c:	e061      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a38      	ldr	r2, [pc, #224]	; (800bf54 <TIM_DeInit+0x1a4>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d108      	bne.n	800be88 <TIM_DeInit+0xd8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800be76:	2101      	movs	r1, #1
 800be78:	2002      	movs	r0, #2
 800be7a:	f7fd fb91 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800be7e:	2100      	movs	r1, #0
 800be80:	2002      	movs	r0, #2
 800be82:	f7fd fb8d 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 800be86:	e054      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a33      	ldr	r2, [pc, #204]	; (800bf58 <TIM_DeInit+0x1a8>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d10a      	bne.n	800bea6 <TIM_DeInit+0xf6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800be90:	2101      	movs	r1, #1
 800be92:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800be96:	f7fd fb83 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800be9a:	2100      	movs	r1, #0
 800be9c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bea0:	f7fd fb7e 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 800bea4:	e045      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a2c      	ldr	r2, [pc, #176]	; (800bf5c <TIM_DeInit+0x1ac>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d10a      	bne.n	800bec4 <TIM_DeInit+0x114>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800beae:	2101      	movs	r1, #1
 800beb0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800beb4:	f7fd fb74 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800beb8:	2100      	movs	r1, #0
 800beba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bebe:	f7fd fb6f 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 800bec2:	e036      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a26      	ldr	r2, [pc, #152]	; (800bf60 <TIM_DeInit+0x1b0>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d10a      	bne.n	800bee2 <TIM_DeInit+0x132>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800becc:	2101      	movs	r1, #1
 800bece:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bed2:	f7fd fb65 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800bed6:	2100      	movs	r1, #0
 800bed8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bedc:	f7fd fb60 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 800bee0:	e027      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a1f      	ldr	r2, [pc, #124]	; (800bf64 <TIM_DeInit+0x1b4>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d108      	bne.n	800befc <TIM_DeInit+0x14c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800beea:	2101      	movs	r1, #1
 800beec:	2040      	movs	r0, #64	; 0x40
 800beee:	f7fd fb37 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800bef2:	2100      	movs	r1, #0
 800bef4:	2040      	movs	r0, #64	; 0x40
 800bef6:	f7fd fb33 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800befa:	e01a      	b.n	800bf32 <TIM_DeInit+0x182>
  else if (TIMx == TIM13) 
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a1a      	ldr	r2, [pc, #104]	; (800bf68 <TIM_DeInit+0x1b8>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d108      	bne.n	800bf16 <TIM_DeInit+0x166>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800bf04:	2101      	movs	r1, #1
 800bf06:	2080      	movs	r0, #128	; 0x80
 800bf08:	f7fd fb2a 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	2080      	movs	r0, #128	; 0x80
 800bf10:	f7fd fb26 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800bf14:	e00d      	b.n	800bf32 <TIM_DeInit+0x182>
    if (TIMx == TIM14) 
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a14      	ldr	r2, [pc, #80]	; (800bf6c <TIM_DeInit+0x1bc>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d109      	bne.n	800bf32 <TIM_DeInit+0x182>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800bf1e:	2101      	movs	r1, #1
 800bf20:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bf24:	f7fd fb1c 	bl	8009560 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800bf28:	2100      	movs	r1, #0
 800bf2a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bf2e:	f7fd fb17 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800bf32:	bf00      	nop
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	40010000 	.word	0x40010000
 800bf40:	40000400 	.word	0x40000400
 800bf44:	40000800 	.word	0x40000800
 800bf48:	40000c00 	.word	0x40000c00
 800bf4c:	40001000 	.word	0x40001000
 800bf50:	40001400 	.word	0x40001400
 800bf54:	40010400 	.word	0x40010400
 800bf58:	40014000 	.word	0x40014000
 800bf5c:	40014400 	.word	0x40014400
 800bf60:	40014800 	.word	0x40014800
 800bf64:	40001800 	.word	0x40001800
 800bf68:	40001c00 	.word	0x40001c00
 800bf6c:	40002000 	.word	0x40002000

0800bf70 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a29      	ldr	r2, [pc, #164]	; (800c02c <TIM_TimeBaseInit+0xbc>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d013      	beq.n	800bfb4 <TIM_TimeBaseInit+0x44>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a28      	ldr	r2, [pc, #160]	; (800c030 <TIM_TimeBaseInit+0xc0>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d00f      	beq.n	800bfb4 <TIM_TimeBaseInit+0x44>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf9a:	d00b      	beq.n	800bfb4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4a25      	ldr	r2, [pc, #148]	; (800c034 <TIM_TimeBaseInit+0xc4>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d007      	beq.n	800bfb4 <TIM_TimeBaseInit+0x44>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4a24      	ldr	r2, [pc, #144]	; (800c038 <TIM_TimeBaseInit+0xc8>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d003      	beq.n	800bfb4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4a23      	ldr	r2, [pc, #140]	; (800c03c <TIM_TimeBaseInit+0xcc>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d108      	bne.n	800bfc6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800bfb4:	89fb      	ldrh	r3, [r7, #14]
 800bfb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfba:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	885a      	ldrh	r2, [r3, #2]
 800bfc0:	89fb      	ldrh	r3, [r7, #14]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a1d      	ldr	r2, [pc, #116]	; (800c040 <TIM_TimeBaseInit+0xd0>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d00c      	beq.n	800bfe8 <TIM_TimeBaseInit+0x78>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a1c      	ldr	r2, [pc, #112]	; (800c044 <TIM_TimeBaseInit+0xd4>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d008      	beq.n	800bfe8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800bfd6:	89fb      	ldrh	r3, [r7, #14]
 800bfd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfdc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	891a      	ldrh	r2, [r3, #8]
 800bfe2:	89fb      	ldrh	r3, [r7, #14]
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	89fa      	ldrh	r2, [r7, #14]
 800bfec:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	881a      	ldrh	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a0a      	ldr	r2, [pc, #40]	; (800c02c <TIM_TimeBaseInit+0xbc>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d003      	beq.n	800c00e <TIM_TimeBaseInit+0x9e>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a09      	ldr	r2, [pc, #36]	; (800c030 <TIM_TimeBaseInit+0xc0>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d104      	bne.n	800c018 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	7a9b      	ldrb	r3, [r3, #10]
 800c012:	b29a      	uxth	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	829a      	strh	r2, [r3, #20]
}
 800c01e:	bf00      	nop
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	40010000 	.word	0x40010000
 800c030:	40010400 	.word	0x40010400
 800c034:	40000400 	.word	0x40000400
 800c038:	40000800 	.word	0x40000800
 800c03c:	40000c00 	.word	0x40000c00
 800c040:	40001000 	.word	0x40001000
 800c044:	40001400 	.word	0x40001400

0800c048 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c056:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	729a      	strb	r2, [r3, #10]
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	807b      	strh	r3, [r7, #2]
 800c088:	4613      	mov	r3, r2
 800c08a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	887a      	ldrh	r2, [r7, #2]
 800c090:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	883a      	ldrh	r2, [r7, #0]
 800c096:	829a      	strh	r2, [r3, #20]
}
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	881b      	ldrh	r3, [r3, #0]
 800c0b8:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0ba:	89fb      	ldrh	r3, [r7, #14]
 800c0bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0c0:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800c0c2:	89fa      	ldrh	r2, [r7, #14]
 800c0c4:	887b      	ldrh	r3, [r7, #2]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	89fa      	ldrh	r2, [r7, #14]
 800c0ce:	801a      	strh	r2, [r3, #0]
}
 800c0d0:	bf00      	nop
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800c120:	4618      	mov	r0, r3
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c138:	b29b      	uxth	r3, r3
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr

0800c146 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800c146:	b480      	push	{r7}
 800c148:	b083      	sub	sp, #12
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	460b      	mov	r3, r1
 800c150:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c152:	78fb      	ldrb	r3, [r7, #3]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d008      	beq.n	800c16a <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	881b      	ldrh	r3, [r3, #0]
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	f043 0302 	orr.w	r3, r3, #2
 800c162:	b29a      	uxth	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
  }
}
 800c168:	e007      	b.n	800c17a <TIM_UpdateDisableConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	f023 0302 	bic.w	r3, r3, #2
 800c174:	b29a      	uxth	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	801a      	strh	r2, [r3, #0]
}
 800c17a:	bf00      	nop
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800c186:	b480      	push	{r7}
 800c188:	b083      	sub	sp, #12
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	460b      	mov	r3, r1
 800c190:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800c192:	887b      	ldrh	r3, [r7, #2]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d008      	beq.n	800c1aa <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	f043 0304 	orr.w	r3, r3, #4
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
 800c1a8:	e007      	b.n	800c1ba <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	881b      	ldrh	r3, [r3, #0]
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	f023 0304 	bic.w	r3, r3, #4
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	801a      	strh	r2, [r3, #0]
}
 800c1ba:	bf00      	nop
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b083      	sub	sp, #12
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c1d2:	78fb      	ldrb	r3, [r7, #3]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d008      	beq.n	800c1ea <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 800c1e8:	e007      	b.n	800c1fa <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	801a      	strh	r2, [r3, #0]
}
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	460b      	mov	r3, r1
 800c210:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	b29b      	uxth	r3, r3
 800c218:	f023 0308 	bic.w	r3, r3, #8
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	b29a      	uxth	r2, r3
 800c228:	887b      	ldrh	r3, [r7, #2]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	801a      	strh	r2, [r3, #0]
}
 800c232:	bf00      	nop
 800c234:	370c      	adds	r7, #12
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr

0800c23e <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 800c23e:	b480      	push	{r7}
 800c240:	b083      	sub	sp, #12
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	460b      	mov	r3, r1
 800c248:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	881b      	ldrh	r3, [r3, #0]
 800c24e:	b29b      	uxth	r3, r3
 800c250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c254:	b29a      	uxth	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	b29a      	uxth	r2, r3
 800c260:	887b      	ldrh	r3, [r7, #2]
 800c262:	4313      	orrs	r3, r2
 800c264:	b29a      	uxth	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	801a      	strh	r2, [r3, #0]
}
 800c26a:	bf00      	nop
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr

0800c276 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800c276:	b480      	push	{r7}
 800c278:	b083      	sub	sp, #12
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	460b      	mov	r3, r1
 800c280:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c282:	78fb      	ldrb	r3, [r7, #3]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d008      	beq.n	800c29a <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	f043 0301 	orr.w	r3, r3, #1
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800c298:	e007      	b.n	800c2aa <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	f023 0301 	bic.w	r3, r3, #1
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	801a      	strh	r2, [r3, #0]
}
 800c2aa:	bf00      	nop
 800c2ac:	370c      	adds	r7, #12
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b085      	sub	sp, #20
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	817b      	strh	r3, [r7, #10]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	81fb      	strh	r3, [r7, #14]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	8c1b      	ldrh	r3, [r3, #32]
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	f023 0301 	bic.w	r3, r3, #1
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	8c1b      	ldrh	r3, [r3, #32]
 800c2e0:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	889b      	ldrh	r3, [r3, #4]
 800c2e6:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	8b1b      	ldrh	r3, [r3, #24]
 800c2ec:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800c2ee:	897b      	ldrh	r3, [r7, #10]
 800c2f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2f4:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800c2f6:	897b      	ldrh	r3, [r7, #10]
 800c2f8:	f023 0303 	bic.w	r3, r3, #3
 800c2fc:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	881a      	ldrh	r2, [r3, #0]
 800c302:	897b      	ldrh	r3, [r7, #10]
 800c304:	4313      	orrs	r3, r2
 800c306:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800c308:	89fb      	ldrh	r3, [r7, #14]
 800c30a:	f023 0302 	bic.w	r3, r3, #2
 800c30e:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	899a      	ldrh	r2, [r3, #12]
 800c314:	89fb      	ldrh	r3, [r7, #14]
 800c316:	4313      	orrs	r3, r2
 800c318:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	885a      	ldrh	r2, [r3, #2]
 800c31e:	89fb      	ldrh	r3, [r7, #14]
 800c320:	4313      	orrs	r3, r2
 800c322:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4a1f      	ldr	r2, [pc, #124]	; (800c3a4 <TIM_OC1Init+0xee>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d003      	beq.n	800c334 <TIM_OC1Init+0x7e>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a1e      	ldr	r2, [pc, #120]	; (800c3a8 <TIM_OC1Init+0xf2>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d123      	bne.n	800c37c <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800c334:	89fb      	ldrh	r3, [r7, #14]
 800c336:	f023 0308 	bic.w	r3, r3, #8
 800c33a:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	89da      	ldrh	r2, [r3, #14]
 800c340:	89fb      	ldrh	r3, [r7, #14]
 800c342:	4313      	orrs	r3, r2
 800c344:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800c346:	89fb      	ldrh	r3, [r7, #14]
 800c348:	f023 0304 	bic.w	r3, r3, #4
 800c34c:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	889a      	ldrh	r2, [r3, #4]
 800c352:	89fb      	ldrh	r3, [r7, #14]
 800c354:	4313      	orrs	r3, r2
 800c356:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800c358:	89bb      	ldrh	r3, [r7, #12]
 800c35a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c35e:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800c360:	89bb      	ldrh	r3, [r7, #12]
 800c362:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c366:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	8a1a      	ldrh	r2, [r3, #16]
 800c36c:	89bb      	ldrh	r3, [r7, #12]
 800c36e:	4313      	orrs	r3, r2
 800c370:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	8a5a      	ldrh	r2, [r3, #18]
 800c376:	89bb      	ldrh	r3, [r7, #12]
 800c378:	4313      	orrs	r3, r2
 800c37a:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	89ba      	ldrh	r2, [r7, #12]
 800c380:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	897a      	ldrh	r2, [r7, #10]
 800c386:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	689a      	ldr	r2, [r3, #8]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	89fa      	ldrh	r2, [r7, #14]
 800c394:	841a      	strh	r2, [r3, #32]
}
 800c396:	bf00      	nop
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	40010000 	.word	0x40010000
 800c3a8:	40010400 	.word	0x40010400

0800c3ac <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	817b      	strh	r3, [r7, #10]
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	81fb      	strh	r3, [r7, #14]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	8c1b      	ldrh	r3, [r3, #32]
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	f023 0310 	bic.w	r3, r3, #16
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	8c1b      	ldrh	r3, [r3, #32]
 800c3d6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	889b      	ldrh	r3, [r3, #4]
 800c3dc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	8b1b      	ldrh	r3, [r3, #24]
 800c3e2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800c3e4:	897b      	ldrh	r3, [r7, #10]
 800c3e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3ea:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800c3ec:	897b      	ldrh	r3, [r7, #10]
 800c3ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3f2:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	881b      	ldrh	r3, [r3, #0]
 800c3f8:	021b      	lsls	r3, r3, #8
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	897b      	ldrh	r3, [r7, #10]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800c402:	89fb      	ldrh	r3, [r7, #14]
 800c404:	f023 0320 	bic.w	r3, r3, #32
 800c408:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	899b      	ldrh	r3, [r3, #12]
 800c40e:	011b      	lsls	r3, r3, #4
 800c410:	b29a      	uxth	r2, r3
 800c412:	89fb      	ldrh	r3, [r7, #14]
 800c414:	4313      	orrs	r3, r2
 800c416:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	885b      	ldrh	r3, [r3, #2]
 800c41c:	011b      	lsls	r3, r3, #4
 800c41e:	b29a      	uxth	r2, r3
 800c420:	89fb      	ldrh	r3, [r7, #14]
 800c422:	4313      	orrs	r3, r2
 800c424:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a22      	ldr	r2, [pc, #136]	; (800c4b4 <TIM_OC2Init+0x108>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d003      	beq.n	800c436 <TIM_OC2Init+0x8a>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a21      	ldr	r2, [pc, #132]	; (800c4b8 <TIM_OC2Init+0x10c>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d12b      	bne.n	800c48e <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800c436:	89fb      	ldrh	r3, [r7, #14]
 800c438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c43c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	89db      	ldrh	r3, [r3, #14]
 800c442:	011b      	lsls	r3, r3, #4
 800c444:	b29a      	uxth	r2, r3
 800c446:	89fb      	ldrh	r3, [r7, #14]
 800c448:	4313      	orrs	r3, r2
 800c44a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800c44c:	89fb      	ldrh	r3, [r7, #14]
 800c44e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c452:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	889b      	ldrh	r3, [r3, #4]
 800c458:	011b      	lsls	r3, r3, #4
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	89fb      	ldrh	r3, [r7, #14]
 800c45e:	4313      	orrs	r3, r2
 800c460:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800c462:	89bb      	ldrh	r3, [r7, #12]
 800c464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c468:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800c46a:	89bb      	ldrh	r3, [r7, #12]
 800c46c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c470:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	8a1b      	ldrh	r3, [r3, #16]
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	b29a      	uxth	r2, r3
 800c47a:	89bb      	ldrh	r3, [r7, #12]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	8a5b      	ldrh	r3, [r3, #18]
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	b29a      	uxth	r2, r3
 800c488:	89bb      	ldrh	r3, [r7, #12]
 800c48a:	4313      	orrs	r3, r2
 800c48c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	89ba      	ldrh	r2, [r7, #12]
 800c492:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	897a      	ldrh	r2, [r7, #10]
 800c498:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	689a      	ldr	r2, [r3, #8]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	89fa      	ldrh	r2, [r7, #14]
 800c4a6:	841a      	strh	r2, [r3, #32]
}
 800c4a8:	bf00      	nop
 800c4aa:	3714      	adds	r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr
 800c4b4:	40010000 	.word	0x40010000
 800c4b8:	40010400 	.word	0x40010400

0800c4bc <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	817b      	strh	r3, [r7, #10]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	81fb      	strh	r3, [r7, #14]
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	8c1b      	ldrh	r3, [r3, #32]
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	8c1b      	ldrh	r3, [r3, #32]
 800c4e6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	889b      	ldrh	r3, [r3, #4]
 800c4ec:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	8b9b      	ldrh	r3, [r3, #28]
 800c4f2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800c4f4:	897b      	ldrh	r3, [r7, #10]
 800c4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4fa:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800c4fc:	897b      	ldrh	r3, [r7, #10]
 800c4fe:	f023 0303 	bic.w	r3, r3, #3
 800c502:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	881a      	ldrh	r2, [r3, #0]
 800c508:	897b      	ldrh	r3, [r7, #10]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800c50e:	89fb      	ldrh	r3, [r7, #14]
 800c510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c514:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	899b      	ldrh	r3, [r3, #12]
 800c51a:	021b      	lsls	r3, r3, #8
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	89fb      	ldrh	r3, [r7, #14]
 800c520:	4313      	orrs	r3, r2
 800c522:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	885b      	ldrh	r3, [r3, #2]
 800c528:	021b      	lsls	r3, r3, #8
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	89fb      	ldrh	r3, [r7, #14]
 800c52e:	4313      	orrs	r3, r2
 800c530:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a22      	ldr	r2, [pc, #136]	; (800c5c0 <TIM_OC3Init+0x104>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d003      	beq.n	800c542 <TIM_OC3Init+0x86>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a21      	ldr	r2, [pc, #132]	; (800c5c4 <TIM_OC3Init+0x108>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d12b      	bne.n	800c59a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800c542:	89fb      	ldrh	r3, [r7, #14]
 800c544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c548:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	89db      	ldrh	r3, [r3, #14]
 800c54e:	021b      	lsls	r3, r3, #8
 800c550:	b29a      	uxth	r2, r3
 800c552:	89fb      	ldrh	r3, [r7, #14]
 800c554:	4313      	orrs	r3, r2
 800c556:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800c558:	89fb      	ldrh	r3, [r7, #14]
 800c55a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c55e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	889b      	ldrh	r3, [r3, #4]
 800c564:	021b      	lsls	r3, r3, #8
 800c566:	b29a      	uxth	r2, r3
 800c568:	89fb      	ldrh	r3, [r7, #14]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800c56e:	89bb      	ldrh	r3, [r7, #12]
 800c570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c574:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800c576:	89bb      	ldrh	r3, [r7, #12]
 800c578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c57c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	8a1b      	ldrh	r3, [r3, #16]
 800c582:	011b      	lsls	r3, r3, #4
 800c584:	b29a      	uxth	r2, r3
 800c586:	89bb      	ldrh	r3, [r7, #12]
 800c588:	4313      	orrs	r3, r2
 800c58a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	8a5b      	ldrh	r3, [r3, #18]
 800c590:	011b      	lsls	r3, r3, #4
 800c592:	b29a      	uxth	r2, r3
 800c594:	89bb      	ldrh	r3, [r7, #12]
 800c596:	4313      	orrs	r3, r2
 800c598:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	89ba      	ldrh	r2, [r7, #12]
 800c59e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	897a      	ldrh	r2, [r7, #10]
 800c5a4:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	689a      	ldr	r2, [r3, #8]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	89fa      	ldrh	r2, [r7, #14]
 800c5b2:	841a      	strh	r2, [r3, #32]
}
 800c5b4:	bf00      	nop
 800c5b6:	3714      	adds	r7, #20
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr
 800c5c0:	40010000 	.word	0x40010000
 800c5c4:	40010400 	.word	0x40010400

0800c5c8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	81bb      	strh	r3, [r7, #12]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	817b      	strh	r3, [r7, #10]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	8c1b      	ldrh	r3, [r3, #32]
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	8c1b      	ldrh	r3, [r3, #32]
 800c5f2:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	889b      	ldrh	r3, [r3, #4]
 800c5f8:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	8b9b      	ldrh	r3, [r3, #28]
 800c5fe:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800c600:	89bb      	ldrh	r3, [r7, #12]
 800c602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c606:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800c608:	89bb      	ldrh	r3, [r7, #12]
 800c60a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c60e:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	021b      	lsls	r3, r3, #8
 800c616:	b29a      	uxth	r2, r3
 800c618:	89bb      	ldrh	r3, [r7, #12]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800c61e:	897b      	ldrh	r3, [r7, #10]
 800c620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c624:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	899b      	ldrh	r3, [r3, #12]
 800c62a:	031b      	lsls	r3, r3, #12
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	897b      	ldrh	r3, [r7, #10]
 800c630:	4313      	orrs	r3, r2
 800c632:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	885b      	ldrh	r3, [r3, #2]
 800c638:	031b      	lsls	r3, r3, #12
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	897b      	ldrh	r3, [r7, #10]
 800c63e:	4313      	orrs	r3, r2
 800c640:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a12      	ldr	r2, [pc, #72]	; (800c690 <TIM_OC4Init+0xc8>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d003      	beq.n	800c652 <TIM_OC4Init+0x8a>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a11      	ldr	r2, [pc, #68]	; (800c694 <TIM_OC4Init+0xcc>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d10a      	bne.n	800c668 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800c652:	89fb      	ldrh	r3, [r7, #14]
 800c654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c658:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	8a1b      	ldrh	r3, [r3, #16]
 800c65e:	019b      	lsls	r3, r3, #6
 800c660:	b29a      	uxth	r2, r3
 800c662:	89fb      	ldrh	r3, [r7, #14]
 800c664:	4313      	orrs	r3, r2
 800c666:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	89fa      	ldrh	r2, [r7, #14]
 800c66c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	89ba      	ldrh	r2, [r7, #12]
 800c672:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	689a      	ldr	r2, [r3, #8]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	897a      	ldrh	r2, [r7, #10]
 800c680:	841a      	strh	r2, [r3, #32]
}
 800c682:	bf00      	nop
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	40010000 	.word	0x40010000
 800c694:	40010400 	.word	0x40010400

0800c698 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	825a      	strh	r2, [r3, #18]
}
 800c6d0:	bf00      	nop
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	807b      	strh	r3, [r7, #2]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	3318      	adds	r3, #24
 800c6fc:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800c6fe:	887b      	ldrh	r3, [r7, #2]
 800c700:	2201      	movs	r2, #1
 800c702:	fa02 f303 	lsl.w	r3, r2, r3
 800c706:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	8c1b      	ldrh	r3, [r3, #32]
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	897b      	ldrh	r3, [r7, #10]
 800c710:	43db      	mvns	r3, r3
 800c712:	b29b      	uxth	r3, r3
 800c714:	4013      	ands	r3, r2
 800c716:	b29a      	uxth	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800c71c:	887b      	ldrh	r3, [r7, #2]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d002      	beq.n	800c728 <TIM_SelectOCxM+0x4c>
 800c722:	887b      	ldrh	r3, [r7, #2]
 800c724:	2b08      	cmp	r3, #8
 800c726:	d114      	bne.n	800c752 <TIM_SelectOCxM+0x76>
  {
    tmp += (TIM_Channel>>1);
 800c728:	887b      	ldrh	r3, [r7, #2]
 800c72a:	085b      	lsrs	r3, r3, #1
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	461a      	mov	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	4413      	add	r3, r2
 800c734:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6819      	ldr	r1, [r3, #0]
 800c73c:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800c740:	400b      	ands	r3, r1
 800c742:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	6811      	ldr	r1, [r2, #0]
 800c74a:	883a      	ldrh	r2, [r7, #0]
 800c74c:	430a      	orrs	r2, r1
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	e017      	b.n	800c782 <TIM_SelectOCxM+0xa6>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800c752:	887b      	ldrh	r3, [r7, #2]
 800c754:	3b04      	subs	r3, #4
 800c756:	b29b      	uxth	r3, r3
 800c758:	085b      	lsrs	r3, r3, #1
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	461a      	mov	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	4413      	add	r3, r2
 800c762:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6819      	ldr	r1, [r3, #0]
 800c76a:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800c76e:	400b      	ands	r3, r1
 800c770:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	6812      	ldr	r2, [r2, #0]
 800c778:	8839      	ldrh	r1, [r7, #0]
 800c77a:	0209      	lsls	r1, r1, #8
 800c77c:	b289      	uxth	r1, r1
 800c77e:	430a      	orrs	r2, r1
 800c780:	601a      	str	r2, [r3, #0]
  }
}
 800c782:	bf00      	nop
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 800c78e:	b480      	push	{r7}
 800c790:	b083      	sub	sp, #12
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	683a      	ldr	r2, [r7, #0]
 800c79c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c79e:	bf00      	nop
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800c7aa:	b480      	push	{r7}
 800c7ac:	b083      	sub	sp, #12
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c7ba:	bf00      	nop
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c7d6:	bf00      	nop
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr

0800c7e2 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	b083      	sub	sp, #12
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c7f2:	bf00      	nop
 800c7f4:	370c      	adds	r7, #12
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c7fe:	b480      	push	{r7}
 800c800:	b085      	sub	sp, #20
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	460b      	mov	r3, r1
 800c808:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	8b1b      	ldrh	r3, [r3, #24]
 800c812:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800c814:	89fb      	ldrh	r3, [r7, #14]
 800c816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c81a:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800c81c:	89fa      	ldrh	r2, [r7, #14]
 800c81e:	887b      	ldrh	r3, [r7, #2]
 800c820:	4313      	orrs	r3, r2
 800c822:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	89fa      	ldrh	r2, [r7, #14]
 800c828:	831a      	strh	r2, [r3, #24]
}
 800c82a:	bf00      	nop
 800c82c:	3714      	adds	r7, #20
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c836:	b480      	push	{r7}
 800c838:	b085      	sub	sp, #20
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
 800c83e:	460b      	mov	r3, r1
 800c840:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	8b1b      	ldrh	r3, [r3, #24]
 800c84a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800c84c:	89fb      	ldrh	r3, [r7, #14]
 800c84e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c852:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800c854:	887b      	ldrh	r3, [r7, #2]
 800c856:	021b      	lsls	r3, r3, #8
 800c858:	b29a      	uxth	r2, r3
 800c85a:	89fb      	ldrh	r3, [r7, #14]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	89fa      	ldrh	r2, [r7, #14]
 800c864:	831a      	strh	r2, [r3, #24]
}
 800c866:	bf00      	nop
 800c868:	3714      	adds	r7, #20
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr

0800c872 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c872:	b480      	push	{r7}
 800c874:	b085      	sub	sp, #20
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	460b      	mov	r3, r1
 800c87c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	8b9b      	ldrh	r3, [r3, #28]
 800c886:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800c888:	89fb      	ldrh	r3, [r7, #14]
 800c88a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c88e:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800c890:	89fa      	ldrh	r2, [r7, #14]
 800c892:	887b      	ldrh	r3, [r7, #2]
 800c894:	4313      	orrs	r3, r2
 800c896:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	89fa      	ldrh	r2, [r7, #14]
 800c89c:	839a      	strh	r2, [r3, #28]
}
 800c89e:	bf00      	nop
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b085      	sub	sp, #20
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	8b9b      	ldrh	r3, [r3, #28]
 800c8be:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800c8c0:	89fb      	ldrh	r3, [r7, #14]
 800c8c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8c6:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800c8c8:	887b      	ldrh	r3, [r7, #2]
 800c8ca:	021b      	lsls	r3, r3, #8
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	89fb      	ldrh	r3, [r7, #14]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	89fa      	ldrh	r2, [r7, #14]
 800c8d8:	839a      	strh	r2, [r3, #28]
}
 800c8da:	bf00      	nop
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b085      	sub	sp, #20
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	8b1b      	ldrh	r3, [r3, #24]
 800c8fa:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800c8fc:	89fb      	ldrh	r3, [r7, #14]
 800c8fe:	f023 0308 	bic.w	r3, r3, #8
 800c902:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800c904:	89fa      	ldrh	r2, [r7, #14]
 800c906:	887b      	ldrh	r3, [r7, #2]
 800c908:	4313      	orrs	r3, r2
 800c90a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	89fa      	ldrh	r2, [r7, #14]
 800c910:	831a      	strh	r2, [r3, #24]
}
 800c912:	bf00      	nop
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr

0800c91e <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c91e:	b480      	push	{r7}
 800c920:	b085      	sub	sp, #20
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	460b      	mov	r3, r1
 800c928:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	8b1b      	ldrh	r3, [r3, #24]
 800c932:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800c934:	89fb      	ldrh	r3, [r7, #14]
 800c936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c93a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800c93c:	887b      	ldrh	r3, [r7, #2]
 800c93e:	021b      	lsls	r3, r3, #8
 800c940:	b29a      	uxth	r2, r3
 800c942:	89fb      	ldrh	r3, [r7, #14]
 800c944:	4313      	orrs	r3, r2
 800c946:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	89fa      	ldrh	r2, [r7, #14]
 800c94c:	831a      	strh	r2, [r3, #24]
}
 800c94e:	bf00      	nop
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c95a:	b480      	push	{r7}
 800c95c:	b085      	sub	sp, #20
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	460b      	mov	r3, r1
 800c964:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8b9b      	ldrh	r3, [r3, #28]
 800c96e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800c970:	89fb      	ldrh	r3, [r7, #14]
 800c972:	f023 0308 	bic.w	r3, r3, #8
 800c976:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800c978:	89fa      	ldrh	r2, [r7, #14]
 800c97a:	887b      	ldrh	r3, [r7, #2]
 800c97c:	4313      	orrs	r3, r2
 800c97e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	89fa      	ldrh	r2, [r7, #14]
 800c984:	839a      	strh	r2, [r3, #28]
}
 800c986:	bf00      	nop
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800c992:	b480      	push	{r7}
 800c994:	b085      	sub	sp, #20
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	460b      	mov	r3, r1
 800c99c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	8b9b      	ldrh	r3, [r3, #28]
 800c9a6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800c9a8:	89fb      	ldrh	r3, [r7, #14]
 800c9aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9ae:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800c9b0:	887b      	ldrh	r3, [r7, #2]
 800c9b2:	021b      	lsls	r3, r3, #8
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	89fb      	ldrh	r3, [r7, #14]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	89fa      	ldrh	r2, [r7, #14]
 800c9c0:	839a      	strh	r2, [r3, #28]
}
 800c9c2:	bf00      	nop
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b085      	sub	sp, #20
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	8b1b      	ldrh	r3, [r3, #24]
 800c9e2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800c9e4:	89fb      	ldrh	r3, [r7, #14]
 800c9e6:	f023 0304 	bic.w	r3, r3, #4
 800c9ea:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800c9ec:	89fa      	ldrh	r2, [r7, #14]
 800c9ee:	887b      	ldrh	r3, [r7, #2]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	89fa      	ldrh	r2, [r7, #14]
 800c9f8:	831a      	strh	r2, [r3, #24]
}
 800c9fa:	bf00      	nop
 800c9fc:	3714      	adds	r7, #20
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr

0800ca06 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800ca06:	b480      	push	{r7}
 800ca08:	b085      	sub	sp, #20
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	8b1b      	ldrh	r3, [r3, #24]
 800ca1a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800ca1c:	89fb      	ldrh	r3, [r7, #14]
 800ca1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca22:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800ca24:	887b      	ldrh	r3, [r7, #2]
 800ca26:	021b      	lsls	r3, r3, #8
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	89fb      	ldrh	r3, [r7, #14]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	89fa      	ldrh	r2, [r7, #14]
 800ca34:	831a      	strh	r2, [r3, #24]
}
 800ca36:	bf00      	nop
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800ca42:	b480      	push	{r7}
 800ca44:	b085      	sub	sp, #20
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	8b9b      	ldrh	r3, [r3, #28]
 800ca56:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800ca58:	89fb      	ldrh	r3, [r7, #14]
 800ca5a:	f023 0304 	bic.w	r3, r3, #4
 800ca5e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800ca60:	89fa      	ldrh	r2, [r7, #14]
 800ca62:	887b      	ldrh	r3, [r7, #2]
 800ca64:	4313      	orrs	r3, r2
 800ca66:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	89fa      	ldrh	r2, [r7, #14]
 800ca6c:	839a      	strh	r2, [r3, #28]
}
 800ca6e:	bf00      	nop
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	b085      	sub	sp, #20
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	460b      	mov	r3, r1
 800ca84:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	8b9b      	ldrh	r3, [r3, #28]
 800ca8e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800ca90:	89fb      	ldrh	r3, [r7, #14]
 800ca92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca96:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800ca98:	887b      	ldrh	r3, [r7, #2]
 800ca9a:	021b      	lsls	r3, r3, #8
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	89fb      	ldrh	r3, [r7, #14]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	89fa      	ldrh	r2, [r7, #14]
 800caa8:	839a      	strh	r2, [r3, #28]
}
 800caaa:	bf00      	nop
 800caac:	3714      	adds	r7, #20
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800cab6:	b480      	push	{r7}
 800cab8:	b085      	sub	sp, #20
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	460b      	mov	r3, r1
 800cac0:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	8b1b      	ldrh	r3, [r3, #24]
 800caca:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800cacc:	89fb      	ldrh	r3, [r7, #14]
 800cace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cad2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800cad4:	89fa      	ldrh	r2, [r7, #14]
 800cad6:	887b      	ldrh	r3, [r7, #2]
 800cad8:	4313      	orrs	r3, r2
 800cada:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	89fa      	ldrh	r2, [r7, #14]
 800cae0:	831a      	strh	r2, [r3, #24]
}
 800cae2:	bf00      	nop
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800caee:	b480      	push	{r7}
 800caf0:	b085      	sub	sp, #20
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	460b      	mov	r3, r1
 800caf8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	8b1b      	ldrh	r3, [r3, #24]
 800cb02:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800cb04:	89fb      	ldrh	r3, [r7, #14]
 800cb06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cb0a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800cb0c:	887b      	ldrh	r3, [r7, #2]
 800cb0e:	021b      	lsls	r3, r3, #8
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	89fb      	ldrh	r3, [r7, #14]
 800cb14:	4313      	orrs	r3, r2
 800cb16:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	89fa      	ldrh	r2, [r7, #14]
 800cb1c:	831a      	strh	r2, [r3, #24]
}
 800cb1e:	bf00      	nop
 800cb20:	3714      	adds	r7, #20
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800cb2a:	b480      	push	{r7}
 800cb2c:	b085      	sub	sp, #20
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	8b9b      	ldrh	r3, [r3, #28]
 800cb3e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800cb40:	89fb      	ldrh	r3, [r7, #14]
 800cb42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb46:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800cb48:	89fa      	ldrh	r2, [r7, #14]
 800cb4a:	887b      	ldrh	r3, [r7, #2]
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	89fa      	ldrh	r2, [r7, #14]
 800cb54:	839a      	strh	r2, [r3, #28]
}
 800cb56:	bf00      	nop
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b085      	sub	sp, #20
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	8b9b      	ldrh	r3, [r3, #28]
 800cb76:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800cb78:	89fb      	ldrh	r3, [r7, #14]
 800cb7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cb7e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800cb80:	887b      	ldrh	r3, [r7, #2]
 800cb82:	021b      	lsls	r3, r3, #8
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	89fb      	ldrh	r3, [r7, #14]
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	89fa      	ldrh	r2, [r7, #14]
 800cb90:	839a      	strh	r2, [r3, #28]
}
 800cb92:	bf00      	nop
 800cb94:	3714      	adds	r7, #20
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr

0800cb9e <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800cb9e:	b480      	push	{r7}
 800cba0:	b085      	sub	sp, #20
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	460b      	mov	r3, r1
 800cba8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8c1b      	ldrh	r3, [r3, #32]
 800cbb2:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800cbb4:	89fb      	ldrh	r3, [r7, #14]
 800cbb6:	f023 0302 	bic.w	r3, r3, #2
 800cbba:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800cbbc:	89fa      	ldrh	r2, [r7, #14]
 800cbbe:	887b      	ldrh	r3, [r7, #2]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	89fa      	ldrh	r2, [r7, #14]
 800cbc8:	841a      	strh	r2, [r3, #32]
}
 800cbca:	bf00      	nop
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b085      	sub	sp, #20
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	8c1b      	ldrh	r3, [r3, #32]
 800cbea:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800cbec:	89fb      	ldrh	r3, [r7, #14]
 800cbee:	f023 0308 	bic.w	r3, r3, #8
 800cbf2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 800cbf4:	89fa      	ldrh	r2, [r7, #14]
 800cbf6:	887b      	ldrh	r3, [r7, #2]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	89fa      	ldrh	r2, [r7, #14]
 800cc00:	841a      	strh	r2, [r3, #32]
}
 800cc02:	bf00      	nop
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800cc0e:	b480      	push	{r7}
 800cc10:	b085      	sub	sp, #20
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	460b      	mov	r3, r1
 800cc18:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	8c1b      	ldrh	r3, [r3, #32]
 800cc22:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800cc24:	89fb      	ldrh	r3, [r7, #14]
 800cc26:	f023 0320 	bic.w	r3, r3, #32
 800cc2a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800cc2c:	887b      	ldrh	r3, [r7, #2]
 800cc2e:	011b      	lsls	r3, r3, #4
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	89fb      	ldrh	r3, [r7, #14]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	89fa      	ldrh	r2, [r7, #14]
 800cc3c:	841a      	strh	r2, [r3, #32]
}
 800cc3e:	bf00      	nop
 800cc40:	3714      	adds	r7, #20
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b085      	sub	sp, #20
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	460b      	mov	r3, r1
 800cc54:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	8c1b      	ldrh	r3, [r3, #32]
 800cc5e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800cc60:	89fb      	ldrh	r3, [r7, #14]
 800cc62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc66:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800cc68:	887b      	ldrh	r3, [r7, #2]
 800cc6a:	011b      	lsls	r3, r3, #4
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	89fb      	ldrh	r3, [r7, #14]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	89fa      	ldrh	r2, [r7, #14]
 800cc78:	841a      	strh	r2, [r3, #32]
}
 800cc7a:	bf00      	nop
 800cc7c:	3714      	adds	r7, #20
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800cc86:	b480      	push	{r7}
 800cc88:	b085      	sub	sp, #20
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	460b      	mov	r3, r1
 800cc90:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	8c1b      	ldrh	r3, [r3, #32]
 800cc9a:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800cc9c:	89fb      	ldrh	r3, [r7, #14]
 800cc9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cca2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800cca4:	887b      	ldrh	r3, [r7, #2]
 800cca6:	021b      	lsls	r3, r3, #8
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	89fb      	ldrh	r3, [r7, #14]
 800ccac:	4313      	orrs	r3, r2
 800ccae:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	89fa      	ldrh	r2, [r7, #14]
 800ccb4:	841a      	strh	r2, [r3, #32]
}
 800ccb6:	bf00      	nop
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b085      	sub	sp, #20
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	460b      	mov	r3, r1
 800cccc:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	8c1b      	ldrh	r3, [r3, #32]
 800ccd6:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800ccd8:	89fb      	ldrh	r3, [r7, #14]
 800ccda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccde:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800cce0:	887b      	ldrh	r3, [r7, #2]
 800cce2:	021b      	lsls	r3, r3, #8
 800cce4:	b29a      	uxth	r2, r3
 800cce6:	89fb      	ldrh	r3, [r7, #14]
 800cce8:	4313      	orrs	r3, r2
 800ccea:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	89fa      	ldrh	r2, [r7, #14]
 800ccf0:	841a      	strh	r2, [r3, #32]
}
 800ccf2:	bf00      	nop
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b085      	sub	sp, #20
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	460b      	mov	r3, r1
 800cd08:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	8c1b      	ldrh	r3, [r3, #32]
 800cd12:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800cd14:	89fb      	ldrh	r3, [r7, #14]
 800cd16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd1a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800cd1c:	887b      	ldrh	r3, [r7, #2]
 800cd1e:	031b      	lsls	r3, r3, #12
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	89fb      	ldrh	r3, [r7, #14]
 800cd24:	4313      	orrs	r3, r2
 800cd26:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	89fa      	ldrh	r2, [r7, #14]
 800cd2c:	841a      	strh	r2, [r3, #32]
}
 800cd2e:	bf00      	nop
 800cd30:	3714      	adds	r7, #20
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800cd3a:	b480      	push	{r7}
 800cd3c:	b085      	sub	sp, #20
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	460b      	mov	r3, r1
 800cd44:	807b      	strh	r3, [r7, #2]
 800cd46:	4613      	mov	r3, r2
 800cd48:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800cd4e:	887b      	ldrh	r3, [r7, #2]
 800cd50:	2201      	movs	r2, #1
 800cd52:	fa02 f303 	lsl.w	r3, r2, r3
 800cd56:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	8c1b      	ldrh	r3, [r3, #32]
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	89fb      	ldrh	r3, [r7, #14]
 800cd60:	43db      	mvns	r3, r3
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	4013      	ands	r3, r2
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	8c1b      	ldrh	r3, [r3, #32]
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	8839      	ldrh	r1, [r7, #0]
 800cd74:	887b      	ldrh	r3, [r7, #2]
 800cd76:	fa01 f303 	lsl.w	r3, r1, r3
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	841a      	strh	r2, [r3, #32]
}
 800cd84:	bf00      	nop
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	807b      	strh	r3, [r7, #2]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800cda4:	887b      	ldrh	r3, [r7, #2]
 800cda6:	2204      	movs	r2, #4
 800cda8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdac:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	8c1b      	ldrh	r3, [r3, #32]
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	89fb      	ldrh	r3, [r7, #14]
 800cdb6:	43db      	mvns	r3, r3
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	4013      	ands	r3, r2
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	8c1b      	ldrh	r3, [r3, #32]
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	8839      	ldrh	r1, [r7, #0]
 800cdca:	887b      	ldrh	r3, [r7, #2]
 800cdcc:	fa01 f303 	lsl.w	r3, r1, r3
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	841a      	strh	r2, [r3, #32]
}
 800cdda:	bf00      	nop
 800cddc:	3714      	adds	r7, #20
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b082      	sub	sp, #8
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10f      	bne.n	800ce18 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	8859      	ldrh	r1, [r3, #2]
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	889a      	ldrh	r2, [r3, #4]
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	891b      	ldrh	r3, [r3, #8]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 fcb7 	bl	800d778 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	88db      	ldrh	r3, [r3, #6]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 f8e1 	bl	800cfd8 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800ce16:	e036      	b.n	800ce86 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	881b      	ldrh	r3, [r3, #0]
 800ce1c:	2b04      	cmp	r3, #4
 800ce1e:	d10f      	bne.n	800ce40 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	8859      	ldrh	r1, [r3, #2]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	889a      	ldrh	r2, [r3, #4]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	891b      	ldrh	r3, [r3, #8]
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fce6 	bl	800d7fe <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	88db      	ldrh	r3, [r3, #6]
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f8e9 	bl	800d010 <TIM_SetIC2Prescaler>
}
 800ce3e:	e022      	b.n	800ce86 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	2b08      	cmp	r3, #8
 800ce46:	d10f      	bne.n	800ce68 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	8859      	ldrh	r1, [r3, #2]
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	889a      	ldrh	r2, [r3, #4]
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	891b      	ldrh	r3, [r3, #8]
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 fd1f 	bl	800d898 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	88db      	ldrh	r3, [r3, #6]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 f8f3 	bl	800d04c <TIM_SetIC3Prescaler>
}
 800ce66:	e00e      	b.n	800ce86 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	8859      	ldrh	r1, [r3, #2]
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	889a      	ldrh	r2, [r3, #4]
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	891b      	ldrh	r3, [r3, #8]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 fd57 	bl	800d928 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	88db      	ldrh	r3, [r3, #6]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f8ff 	bl	800d084 <TIM_SetIC4Prescaler>
}
 800ce86:	bf00      	nop
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800ce8e:	b480      	push	{r7}
 800ce90:	b083      	sub	sp, #12
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2201      	movs	r2, #1
 800cea6:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	811a      	strh	r2, [r3, #8]
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800ceca:	2300      	movs	r3, #0
 800cecc:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800cece:	2301      	movs	r3, #1
 800ced0:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	885b      	ldrh	r3, [r3, #2]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d102      	bne.n	800cee0 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800ceda:	2302      	movs	r3, #2
 800cedc:	81fb      	strh	r3, [r7, #14]
 800cede:	e001      	b.n	800cee4 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800cee0:	2300      	movs	r3, #0
 800cee2:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	889b      	ldrh	r3, [r3, #4]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d102      	bne.n	800cef2 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800ceec:	2302      	movs	r3, #2
 800ceee:	81bb      	strh	r3, [r7, #12]
 800cef0:	e001      	b.n	800cef6 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800cef2:	2301      	movs	r3, #1
 800cef4:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	881b      	ldrh	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d11c      	bne.n	800cf38 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	8859      	ldrh	r1, [r3, #2]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	889a      	ldrh	r2, [r3, #4]
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	891b      	ldrh	r3, [r3, #8]
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fc34 	bl	800d778 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	88db      	ldrh	r3, [r3, #6]
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f85e 	bl	800cfd8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	891b      	ldrh	r3, [r3, #8]
 800cf20:	89ba      	ldrh	r2, [r7, #12]
 800cf22:	89f9      	ldrh	r1, [r7, #14]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 fc6a 	bl	800d7fe <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	88db      	ldrh	r3, [r3, #6]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 f86d 	bl	800d010 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800cf36:	e01b      	b.n	800cf70 <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	8859      	ldrh	r1, [r3, #2]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	889a      	ldrh	r2, [r3, #4]
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	891b      	ldrh	r3, [r3, #8]
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fc5a 	bl	800d7fe <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	88db      	ldrh	r3, [r3, #6]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 f85d 	bl	800d010 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	891b      	ldrh	r3, [r3, #8]
 800cf5a:	89ba      	ldrh	r2, [r7, #12]
 800cf5c:	89f9      	ldrh	r1, [r7, #14]
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fc0a 	bl	800d778 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	88db      	ldrh	r3, [r3, #6]
 800cf68:	4619      	mov	r1, r3
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 f834 	bl	800cfd8 <TIM_SetIC1Prescaler>
}
 800cf70:	bf00      	nop
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	8b1b      	ldrh	r3, [r3, #24]
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	f023 030c 	bic.w	r3, r3, #12
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	8b1b      	ldrh	r3, [r3, #24]
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	887b      	ldrh	r3, [r7, #2]
 800cffc:	4313      	orrs	r3, r2
 800cffe:	b29a      	uxth	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	831a      	strh	r2, [r3, #24]
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	460b      	mov	r3, r1
 800d01a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	8b1b      	ldrh	r3, [r3, #24]
 800d020:	b29b      	uxth	r3, r3
 800d022:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d026:	b29a      	uxth	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	8b1b      	ldrh	r3, [r3, #24]
 800d030:	b29a      	uxth	r2, r3
 800d032:	887b      	ldrh	r3, [r7, #2]
 800d034:	021b      	lsls	r3, r3, #8
 800d036:	b29b      	uxth	r3, r3
 800d038:	4313      	orrs	r3, r2
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	831a      	strh	r2, [r3, #24]
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	460b      	mov	r3, r1
 800d056:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	8b9b      	ldrh	r3, [r3, #28]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	f023 030c 	bic.w	r3, r3, #12
 800d062:	b29a      	uxth	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	8b9b      	ldrh	r3, [r3, #28]
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	887b      	ldrh	r3, [r7, #2]
 800d070:	4313      	orrs	r3, r2
 800d072:	b29a      	uxth	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	839a      	strh	r2, [r3, #28]
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	8b9b      	ldrh	r3, [r3, #28]
 800d094:	b29b      	uxth	r3, r3
 800d096:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	8b9b      	ldrh	r3, [r3, #28]
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	887b      	ldrh	r3, [r7, #2]
 800d0a8:	021b      	lsls	r3, r3, #8
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	839a      	strh	r2, [r3, #28]
}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	881a      	ldrh	r2, [r3, #0]
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	885b      	ldrh	r3, [r3, #2]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	819a      	strh	r2, [r3, #12]
}
 800d142:	bf00      	nop
 800d144:	370c      	adds	r7, #12
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr

0800d14e <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d14e:	b480      	push	{r7}
 800d150:	b083      	sub	sp, #12
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	460b      	mov	r3, r1
 800d158:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d15a:	78fb      	ldrb	r3, [r7, #3]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00c      	beq.n	800d17a <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d166:	b29b      	uxth	r3, r3
 800d168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d170:	b29a      	uxth	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 800d178:	e009      	b.n	800d18e <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d180:	b29b      	uxth	r3, r3
 800d182:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d186:	b29a      	uxth	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800d18e:	bf00      	nop
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d1a6:	78fb      	ldrb	r3, [r7, #3]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d008      	beq.n	800d1be <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	889b      	ldrh	r3, [r3, #4]
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	f043 0304 	orr.w	r3, r3, #4
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
  }
}
 800d1bc:	e007      	b.n	800d1ce <TIM_SelectCOM+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	889b      	ldrh	r3, [r3, #4]
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	f023 0304 	bic.w	r3, r3, #4
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	809a      	strh	r2, [r3, #4]
}
 800d1ce:	bf00      	nop
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr

0800d1da <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800d1da:	b480      	push	{r7}
 800d1dc:	b083      	sub	sp, #12
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d1e6:	78fb      	ldrb	r3, [r7, #3]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d008      	beq.n	800d1fe <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	889b      	ldrh	r3, [r3, #4]
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	f043 0301 	orr.w	r3, r3, #1
 800d1f6:	b29a      	uxth	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
  }
}
 800d1fc:	e007      	b.n	800d20e <TIM_CCPreloadControl+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	889b      	ldrh	r3, [r3, #4]
 800d202:	b29b      	uxth	r3, r3
 800d204:	f023 0301 	bic.w	r3, r3, #1
 800d208:	b29a      	uxth	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	809a      	strh	r2, [r3, #4]
}
 800d20e:	bf00      	nop
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr

0800d21a <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800d21a:	b480      	push	{r7}
 800d21c:	b083      	sub	sp, #12
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
 800d222:	460b      	mov	r3, r1
 800d224:	807b      	strh	r3, [r7, #2]
 800d226:	4613      	mov	r3, r2
 800d228:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d22a:	787b      	ldrb	r3, [r7, #1]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d008      	beq.n	800d242 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	899b      	ldrh	r3, [r3, #12]
 800d234:	b29a      	uxth	r2, r3
 800d236:	887b      	ldrh	r3, [r7, #2]
 800d238:	4313      	orrs	r3, r2
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800d240:	e009      	b.n	800d256 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	899b      	ldrh	r3, [r3, #12]
 800d246:	b29a      	uxth	r2, r3
 800d248:	887b      	ldrh	r3, [r7, #2]
 800d24a:	43db      	mvns	r3, r3
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	4013      	ands	r3, r2
 800d250:	b29a      	uxth	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	819a      	strh	r2, [r3, #12]
}
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800d262:	b480      	push	{r7}
 800d264:	b083      	sub	sp, #12
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	460b      	mov	r3, r1
 800d26c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	887a      	ldrh	r2, [r7, #2]
 800d272:	829a      	strh	r2, [r3, #20]
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	460b      	mov	r3, r1
 800d28a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800d28c:	2300      	movs	r3, #0
 800d28e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	8a1b      	ldrh	r3, [r3, #16]
 800d294:	b29a      	uxth	r2, r3
 800d296:	887b      	ldrh	r3, [r7, #2]
 800d298:	4013      	ands	r3, r2
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	73fb      	strb	r3, [r7, #15]
 800d2a4:	e001      	b.n	800d2aa <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3714      	adds	r7, #20
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800d2c4:	887b      	ldrh	r3, [r7, #2]
 800d2c6:	43db      	mvns	r3, r3
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	821a      	strh	r2, [r3, #16]
}
 800d2ce:	bf00      	nop
 800d2d0:	370c      	adds	r7, #12
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr

0800d2da <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800d2da:	b480      	push	{r7}
 800d2dc:	b085      	sub	sp, #20
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	81bb      	strh	r3, [r7, #12]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	8a1b      	ldrh	r3, [r3, #16]
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	887b      	ldrh	r3, [r7, #2]
 800d2fa:	4013      	ands	r3, r2
 800d2fc:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	899b      	ldrh	r3, [r3, #12]
 800d302:	b29a      	uxth	r2, r3
 800d304:	887b      	ldrh	r3, [r7, #2]
 800d306:	4013      	ands	r3, r2
 800d308:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800d30a:	89bb      	ldrh	r3, [r7, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d005      	beq.n	800d31c <TIM_GetITStatus+0x42>
 800d310:	897b      	ldrh	r3, [r7, #10]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d002      	beq.n	800d31c <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800d316:	2301      	movs	r3, #1
 800d318:	73fb      	strb	r3, [r7, #15]
 800d31a:	e001      	b.n	800d320 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800d31c:	2300      	movs	r3, #0
 800d31e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d320:	7bfb      	ldrb	r3, [r7, #15]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	460b      	mov	r3, r1
 800d338:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800d33a:	887b      	ldrh	r3, [r7, #2]
 800d33c:	43db      	mvns	r3, r3
 800d33e:	b29a      	uxth	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	821a      	strh	r2, [r3, #16]
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	460b      	mov	r3, r1
 800d35a:	807b      	strh	r3, [r7, #2]
 800d35c:	4613      	mov	r3, r2
 800d35e:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800d360:	887a      	ldrh	r2, [r7, #2]
 800d362:	883b      	ldrh	r3, [r7, #0]
 800d364:	4313      	orrs	r3, r2
 800d366:	b29a      	uxth	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800d36e:	bf00      	nop
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr

0800d37a <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800d37a:	b480      	push	{r7}
 800d37c:	b083      	sub	sp, #12
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	460b      	mov	r3, r1
 800d384:	807b      	strh	r3, [r7, #2]
 800d386:	4613      	mov	r3, r2
 800d388:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d38a:	787b      	ldrb	r3, [r7, #1]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d008      	beq.n	800d3a2 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	899b      	ldrh	r3, [r3, #12]
 800d394:	b29a      	uxth	r2, r3
 800d396:	887b      	ldrh	r3, [r7, #2]
 800d398:	4313      	orrs	r3, r2
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 800d3a0:	e009      	b.n	800d3b6 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	899b      	ldrh	r3, [r3, #12]
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	887b      	ldrh	r3, [r7, #2]
 800d3aa:	43db      	mvns	r3, r3
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	819a      	strh	r2, [r3, #12]
}
 800d3b6:	bf00      	nop
 800d3b8:	370c      	adds	r7, #12
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d3c2:	b480      	push	{r7}
 800d3c4:	b083      	sub	sp, #12
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d3ce:	78fb      	ldrb	r3, [r7, #3]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d008      	beq.n	800d3e6 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	889b      	ldrh	r3, [r3, #4]
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	f043 0308 	orr.w	r3, r3, #8
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
  }
}
 800d3e4:	e007      	b.n	800d3f6 <TIM_SelectCCDMA+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	889b      	ldrh	r3, [r3, #4]
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	f023 0308 	bic.w	r3, r3, #8
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	809a      	strh	r2, [r3, #4]
}
 800d3f6:	bf00      	nop
 800d3f8:	370c      	adds	r7, #12
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 800d402:	b480      	push	{r7}
 800d404:	b083      	sub	sp, #12
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	891b      	ldrh	r3, [r3, #8]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	f023 0307 	bic.w	r3, r3, #7
 800d414:	b29a      	uxth	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	811a      	strh	r2, [r3, #8]
}
 800d41a:	bf00      	nop
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800d426:	b580      	push	{r7, lr}
 800d428:	b082      	sub	sp, #8
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
 800d42e:	460b      	mov	r3, r1
 800d430:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800d432:	887b      	ldrh	r3, [r7, #2]
 800d434:	4619      	mov	r1, r3
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 f888 	bl	800d54c <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	891b      	ldrh	r3, [r3, #8]
 800d440:	b29b      	uxth	r3, r3
 800d442:	f043 0307 	orr.w	r3, r3, #7
 800d446:	b29a      	uxth	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	811a      	strh	r2, [r3, #8]
}
 800d44c:	bf00      	nop
 800d44e:	3708      	adds	r7, #8
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	4608      	mov	r0, r1
 800d45e:	4611      	mov	r1, r2
 800d460:	461a      	mov	r2, r3
 800d462:	4603      	mov	r3, r0
 800d464:	817b      	strh	r3, [r7, #10]
 800d466:	460b      	mov	r3, r1
 800d468:	813b      	strh	r3, [r7, #8]
 800d46a:	4613      	mov	r3, r2
 800d46c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800d46e:	897b      	ldrh	r3, [r7, #10]
 800d470:	2b60      	cmp	r3, #96	; 0x60
 800d472:	d106      	bne.n	800d482 <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800d474:	88fb      	ldrh	r3, [r7, #6]
 800d476:	8939      	ldrh	r1, [r7, #8]
 800d478:	2201      	movs	r2, #1
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f000 f9bf 	bl	800d7fe <TI2_Config>
 800d480:	e005      	b.n	800d48e <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800d482:	88fb      	ldrh	r3, [r7, #6]
 800d484:	8939      	ldrh	r1, [r7, #8]
 800d486:	2201      	movs	r2, #1
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f000 f975 	bl	800d778 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800d48e:	897b      	ldrh	r3, [r7, #10]
 800d490:	4619      	mov	r1, r3
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f000 f85a 	bl	800d54c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	891b      	ldrh	r3, [r3, #8]
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	f043 0307 	orr.w	r3, r3, #7
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	811a      	strh	r2, [r3, #8]
}
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	4608      	mov	r0, r1
 800d4ba:	4611      	mov	r1, r2
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4603      	mov	r3, r0
 800d4c0:	817b      	strh	r3, [r7, #10]
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	813b      	strh	r3, [r7, #8]
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800d4ce:	88fb      	ldrh	r3, [r7, #6]
 800d4d0:	893a      	ldrh	r2, [r7, #8]
 800d4d2:	8979      	ldrh	r1, [r7, #10]
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f000 f8a9 	bl	800d62c <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	891b      	ldrh	r3, [r3, #8]
 800d4de:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800d4e0:	8afb      	ldrh	r3, [r7, #22]
 800d4e2:	f023 0307 	bic.w	r3, r3, #7
 800d4e6:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800d4e8:	8afb      	ldrh	r3, [r7, #22]
 800d4ea:	f043 0307 	orr.w	r3, r3, #7
 800d4ee:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800d4f0:	8afb      	ldrh	r3, [r7, #22]
 800d4f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4f6:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800d4f8:	8afb      	ldrh	r3, [r7, #22]
 800d4fa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800d4fe:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	8afa      	ldrh	r2, [r7, #22]
 800d504:	811a      	strh	r2, [r3, #8]
}
 800d506:	bf00      	nop
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	60f8      	str	r0, [r7, #12]
 800d516:	4608      	mov	r0, r1
 800d518:	4611      	mov	r1, r2
 800d51a:	461a      	mov	r2, r3
 800d51c:	4603      	mov	r3, r0
 800d51e:	817b      	strh	r3, [r7, #10]
 800d520:	460b      	mov	r3, r1
 800d522:	813b      	strh	r3, [r7, #8]
 800d524:	4613      	mov	r3, r2
 800d526:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800d528:	88fb      	ldrh	r3, [r7, #6]
 800d52a:	893a      	ldrh	r2, [r7, #8]
 800d52c:	8979      	ldrh	r1, [r7, #10]
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f000 f87c 	bl	800d62c <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	891b      	ldrh	r3, [r3, #8]
 800d538:	b29b      	uxth	r3, r3
 800d53a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d53e:	b29a      	uxth	r2, r3
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	811a      	strh	r2, [r3, #8]
}
 800d544:	bf00      	nop
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b085      	sub	sp, #20
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	460b      	mov	r3, r1
 800d556:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 800d558:	2300      	movs	r3, #0
 800d55a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	891b      	ldrh	r3, [r3, #8]
 800d560:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800d562:	89fb      	ldrh	r3, [r7, #14]
 800d564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d568:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800d56a:	89fa      	ldrh	r2, [r7, #14]
 800d56c:	887b      	ldrh	r3, [r7, #2]
 800d56e:	4313      	orrs	r3, r2
 800d570:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	89fa      	ldrh	r2, [r7, #14]
 800d576:	811a      	strh	r2, [r3, #8]
}
 800d578:	bf00      	nop
 800d57a:	3714      	adds	r7, #20
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	889b      	ldrh	r3, [r3, #4]
 800d594:	b29b      	uxth	r3, r3
 800d596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	889b      	ldrh	r3, [r3, #4]
 800d5a4:	b29a      	uxth	r2, r3
 800d5a6:	887b      	ldrh	r3, [r7, #2]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	809a      	strh	r2, [r3, #4]
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	891b      	ldrh	r3, [r3, #8]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	f023 0307 	bic.w	r3, r3, #7
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	891b      	ldrh	r3, [r3, #8]
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	887b      	ldrh	r3, [r7, #2]
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	811a      	strh	r2, [r3, #8]
}
 800d5e8:	bf00      	nop
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	891b      	ldrh	r3, [r3, #8]
 800d604:	b29b      	uxth	r3, r3
 800d606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	891b      	ldrh	r3, [r3, #8]
 800d614:	b29a      	uxth	r2, r3
 800d616:	887b      	ldrh	r3, [r7, #2]
 800d618:	4313      	orrs	r3, r2
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	811a      	strh	r2, [r3, #8]
}
 800d620:	bf00      	nop
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	4608      	mov	r0, r1
 800d636:	4611      	mov	r1, r2
 800d638:	461a      	mov	r2, r3
 800d63a:	4603      	mov	r3, r0
 800d63c:	817b      	strh	r3, [r7, #10]
 800d63e:	460b      	mov	r3, r1
 800d640:	813b      	strh	r3, [r7, #8]
 800d642:	4613      	mov	r3, r2
 800d644:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	891b      	ldrh	r3, [r3, #8]
 800d64e:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800d650:	8afb      	ldrh	r3, [r7, #22]
 800d652:	b2db      	uxtb	r3, r3
 800d654:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800d656:	88fb      	ldrh	r3, [r7, #6]
 800d658:	021b      	lsls	r3, r3, #8
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	893b      	ldrh	r3, [r7, #8]
 800d65e:	4313      	orrs	r3, r2
 800d660:	b29a      	uxth	r2, r3
 800d662:	897b      	ldrh	r3, [r7, #10]
 800d664:	4313      	orrs	r3, r2
 800d666:	b29a      	uxth	r2, r3
 800d668:	8afb      	ldrh	r3, [r7, #22]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	8afa      	ldrh	r2, [r7, #22]
 800d672:	811a      	strh	r2, [r3, #8]
}
 800d674:	bf00      	nop
 800d676:	371c      	adds	r7, #28
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800d680:	b480      	push	{r7}
 800d682:	b087      	sub	sp, #28
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	4608      	mov	r0, r1
 800d68a:	4611      	mov	r1, r2
 800d68c:	461a      	mov	r2, r3
 800d68e:	4603      	mov	r3, r0
 800d690:	817b      	strh	r3, [r7, #10]
 800d692:	460b      	mov	r3, r1
 800d694:	813b      	strh	r3, [r7, #8]
 800d696:	4613      	mov	r3, r2
 800d698:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800d69a:	2300      	movs	r3, #0
 800d69c:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	891b      	ldrh	r3, [r3, #8]
 800d6aa:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	8b1b      	ldrh	r3, [r3, #24]
 800d6b0:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	8c1b      	ldrh	r3, [r3, #32]
 800d6b6:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800d6b8:	8afb      	ldrh	r3, [r7, #22]
 800d6ba:	f023 0307 	bic.w	r3, r3, #7
 800d6be:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800d6c0:	8afa      	ldrh	r2, [r7, #22]
 800d6c2:	897b      	ldrh	r3, [r7, #10]
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800d6c8:	8abb      	ldrh	r3, [r7, #20]
 800d6ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6ce:	f023 0303 	bic.w	r3, r3, #3
 800d6d2:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800d6d4:	8abb      	ldrh	r3, [r7, #20]
 800d6d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6da:	f043 0301 	orr.w	r3, r3, #1
 800d6de:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800d6e0:	8a7b      	ldrh	r3, [r7, #18]
 800d6e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d6e6:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800d6e8:	88fb      	ldrh	r3, [r7, #6]
 800d6ea:	011b      	lsls	r3, r3, #4
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	893b      	ldrh	r3, [r7, #8]
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	8a7b      	ldrh	r3, [r7, #18]
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	8afa      	ldrh	r2, [r7, #22]
 800d6fe:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	8aba      	ldrh	r2, [r7, #20]
 800d704:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	8a7a      	ldrh	r2, [r7, #18]
 800d70a:	841a      	strh	r2, [r3, #32]
}
 800d70c:	bf00      	nop
 800d70e:	371c      	adds	r7, #28
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	460b      	mov	r3, r1
 800d722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d724:	78fb      	ldrb	r3, [r7, #3]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d008      	beq.n	800d73c <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	889b      	ldrh	r3, [r3, #4]
 800d72e:	b29b      	uxth	r3, r3
 800d730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d734:	b29a      	uxth	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
  }
}
 800d73a:	e007      	b.n	800d74c <TIM_SelectHallSensor+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	889b      	ldrh	r3, [r3, #4]
 800d740:	b29b      	uxth	r3, r3
 800d742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d746:	b29a      	uxth	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	809a      	strh	r2, [r3, #4]
}
 800d74c:	bf00      	nop
 800d74e:	370c      	adds	r7, #12
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr

0800d758 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	887a      	ldrh	r2, [r7, #2]
 800d768:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	4608      	mov	r0, r1
 800d782:	4611      	mov	r1, r2
 800d784:	461a      	mov	r2, r3
 800d786:	4603      	mov	r3, r0
 800d788:	817b      	strh	r3, [r7, #10]
 800d78a:	460b      	mov	r3, r1
 800d78c:	813b      	strh	r3, [r7, #8]
 800d78e:	4613      	mov	r3, r2
 800d790:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	82fb      	strh	r3, [r7, #22]
 800d796:	2300      	movs	r3, #0
 800d798:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	8c1b      	ldrh	r3, [r3, #32]
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	f023 0301 	bic.w	r3, r3, #1
 800d7a4:	b29a      	uxth	r2, r3
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	8b1b      	ldrh	r3, [r3, #24]
 800d7ae:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	8c1b      	ldrh	r3, [r3, #32]
 800d7b4:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800d7b6:	8afb      	ldrh	r3, [r7, #22]
 800d7b8:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800d7bc:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d7be:	88fb      	ldrh	r3, [r7, #6]
 800d7c0:	011b      	lsls	r3, r3, #4
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	893b      	ldrh	r3, [r7, #8]
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	8afb      	ldrh	r3, [r7, #22]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d7d0:	8abb      	ldrh	r3, [r7, #20]
 800d7d2:	f023 030a 	bic.w	r3, r3, #10
 800d7d6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800d7d8:	897a      	ldrh	r2, [r7, #10]
 800d7da:	8abb      	ldrh	r3, [r7, #20]
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	f043 0301 	orr.w	r3, r3, #1
 800d7e4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	8afa      	ldrh	r2, [r7, #22]
 800d7ea:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	8aba      	ldrh	r2, [r7, #20]
 800d7f0:	841a      	strh	r2, [r3, #32]
}
 800d7f2:	bf00      	nop
 800d7f4:	371c      	adds	r7, #28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b087      	sub	sp, #28
 800d802:	af00      	add	r7, sp, #0
 800d804:	60f8      	str	r0, [r7, #12]
 800d806:	4608      	mov	r0, r1
 800d808:	4611      	mov	r1, r2
 800d80a:	461a      	mov	r2, r3
 800d80c:	4603      	mov	r3, r0
 800d80e:	817b      	strh	r3, [r7, #10]
 800d810:	460b      	mov	r3, r1
 800d812:	813b      	strh	r3, [r7, #8]
 800d814:	4613      	mov	r3, r2
 800d816:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	82fb      	strh	r3, [r7, #22]
 800d81c:	2300      	movs	r3, #0
 800d81e:	82bb      	strh	r3, [r7, #20]
 800d820:	2300      	movs	r3, #0
 800d822:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	8c1b      	ldrh	r3, [r3, #32]
 800d828:	b29b      	uxth	r3, r3
 800d82a:	f023 0310 	bic.w	r3, r3, #16
 800d82e:	b29a      	uxth	r2, r3
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	8b1b      	ldrh	r3, [r3, #24]
 800d838:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	8c1b      	ldrh	r3, [r3, #32]
 800d83e:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800d840:	897b      	ldrh	r3, [r7, #10]
 800d842:	011b      	lsls	r3, r3, #4
 800d844:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800d846:	8afb      	ldrh	r3, [r7, #22]
 800d848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d84c:	051b      	lsls	r3, r3, #20
 800d84e:	0d1b      	lsrs	r3, r3, #20
 800d850:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800d852:	88fb      	ldrh	r3, [r7, #6]
 800d854:	031b      	lsls	r3, r3, #12
 800d856:	b29a      	uxth	r2, r3
 800d858:	8afb      	ldrh	r3, [r7, #22]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800d85e:	893b      	ldrh	r3, [r7, #8]
 800d860:	021b      	lsls	r3, r3, #8
 800d862:	b29a      	uxth	r2, r3
 800d864:	8afb      	ldrh	r3, [r7, #22]
 800d866:	4313      	orrs	r3, r2
 800d868:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d86a:	8abb      	ldrh	r3, [r7, #20]
 800d86c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d870:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800d872:	8a7a      	ldrh	r2, [r7, #18]
 800d874:	8abb      	ldrh	r3, [r7, #20]
 800d876:	4313      	orrs	r3, r2
 800d878:	b29b      	uxth	r3, r3
 800d87a:	f043 0310 	orr.w	r3, r3, #16
 800d87e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	8afa      	ldrh	r2, [r7, #22]
 800d884:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	8aba      	ldrh	r2, [r7, #20]
 800d88a:	841a      	strh	r2, [r3, #32]
}
 800d88c:	bf00      	nop
 800d88e:	371c      	adds	r7, #28
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d898:	b480      	push	{r7}
 800d89a:	b087      	sub	sp, #28
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	4608      	mov	r0, r1
 800d8a2:	4611      	mov	r1, r2
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	817b      	strh	r3, [r7, #10]
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	813b      	strh	r3, [r7, #8]
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	82fb      	strh	r3, [r7, #22]
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	82bb      	strh	r3, [r7, #20]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	8c1b      	ldrh	r3, [r3, #32]
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	8b9b      	ldrh	r3, [r3, #28]
 800d8d2:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	8c1b      	ldrh	r3, [r3, #32]
 800d8d8:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800d8da:	897b      	ldrh	r3, [r7, #10]
 800d8dc:	021b      	lsls	r3, r3, #8
 800d8de:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800d8e0:	8afb      	ldrh	r3, [r7, #22]
 800d8e2:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800d8e6:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d8e8:	88fb      	ldrh	r3, [r7, #6]
 800d8ea:	011b      	lsls	r3, r3, #4
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	893b      	ldrh	r3, [r7, #8]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	8afb      	ldrh	r3, [r7, #22]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d8fa:	8abb      	ldrh	r3, [r7, #20]
 800d8fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d900:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800d902:	8a7a      	ldrh	r2, [r7, #18]
 800d904:	8abb      	ldrh	r3, [r7, #20]
 800d906:	4313      	orrs	r3, r2
 800d908:	b29b      	uxth	r3, r3
 800d90a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d90e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	8afa      	ldrh	r2, [r7, #22]
 800d914:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	8aba      	ldrh	r2, [r7, #20]
 800d91a:	841a      	strh	r2, [r3, #32]
}
 800d91c:	bf00      	nop
 800d91e:	371c      	adds	r7, #28
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d928:	b480      	push	{r7}
 800d92a:	b087      	sub	sp, #28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	4608      	mov	r0, r1
 800d932:	4611      	mov	r1, r2
 800d934:	461a      	mov	r2, r3
 800d936:	4603      	mov	r3, r0
 800d938:	817b      	strh	r3, [r7, #10]
 800d93a:	460b      	mov	r3, r1
 800d93c:	813b      	strh	r3, [r7, #8]
 800d93e:	4613      	mov	r3, r2
 800d940:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800d942:	2300      	movs	r3, #0
 800d944:	82fb      	strh	r3, [r7, #22]
 800d946:	2300      	movs	r3, #0
 800d948:	82bb      	strh	r3, [r7, #20]
 800d94a:	2300      	movs	r3, #0
 800d94c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	8c1b      	ldrh	r3, [r3, #32]
 800d952:	b29b      	uxth	r3, r3
 800d954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d958:	b29a      	uxth	r2, r3
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	8b9b      	ldrh	r3, [r3, #28]
 800d962:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	8c1b      	ldrh	r3, [r3, #32]
 800d968:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800d96a:	897b      	ldrh	r3, [r7, #10]
 800d96c:	031b      	lsls	r3, r3, #12
 800d96e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800d970:	8afb      	ldrh	r3, [r7, #22]
 800d972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d976:	051b      	lsls	r3, r3, #20
 800d978:	0d1b      	lsrs	r3, r3, #20
 800d97a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800d97c:	893b      	ldrh	r3, [r7, #8]
 800d97e:	021b      	lsls	r3, r3, #8
 800d980:	b29a      	uxth	r2, r3
 800d982:	8afb      	ldrh	r3, [r7, #22]
 800d984:	4313      	orrs	r3, r2
 800d986:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800d988:	88fb      	ldrh	r3, [r7, #6]
 800d98a:	031b      	lsls	r3, r3, #12
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	8afb      	ldrh	r3, [r7, #22]
 800d990:	4313      	orrs	r3, r2
 800d992:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d994:	8abb      	ldrh	r3, [r7, #20]
 800d996:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d99a:	045b      	lsls	r3, r3, #17
 800d99c:	0c5b      	lsrs	r3, r3, #17
 800d99e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800d9a0:	8a7a      	ldrh	r2, [r7, #18]
 800d9a2:	8abb      	ldrh	r3, [r7, #20]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d9ac:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	8afa      	ldrh	r2, [r7, #22]
 800d9b2:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	8aba      	ldrh	r2, [r7, #20]
 800d9b8:	841a      	strh	r2, [r3, #32]
}
 800d9ba:	bf00      	nop
 800d9bc:	371c      	adds	r7, #28
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop

0800d9c8 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4a3b      	ldr	r2, [pc, #236]	; (800dac0 <USART_DeInit+0xf8>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d108      	bne.n	800d9ea <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800d9d8:	2101      	movs	r1, #1
 800d9da:	2010      	movs	r0, #16
 800d9dc:	f7fb fde0 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	2010      	movs	r0, #16
 800d9e4:	f7fb fddc 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800d9e8:	e065      	b.n	800dab6 <USART_DeInit+0xee>
  else if (USARTx == USART2)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4a35      	ldr	r2, [pc, #212]	; (800dac4 <USART_DeInit+0xfc>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d10a      	bne.n	800da08 <USART_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d9f8:	f7fb fdb2 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800da02:	f7fb fdad 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800da06:	e056      	b.n	800dab6 <USART_DeInit+0xee>
  else if (USARTx == USART3)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a2f      	ldr	r2, [pc, #188]	; (800dac8 <USART_DeInit+0x100>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d10a      	bne.n	800da26 <USART_DeInit+0x5e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800da10:	2101      	movs	r1, #1
 800da12:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800da16:	f7fb fda3 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800da1a:	2100      	movs	r1, #0
 800da1c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800da20:	f7fb fd9e 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800da24:	e047      	b.n	800dab6 <USART_DeInit+0xee>
  else if (USARTx == UART4)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	4a28      	ldr	r2, [pc, #160]	; (800dacc <USART_DeInit+0x104>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d10a      	bne.n	800da44 <USART_DeInit+0x7c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800da2e:	2101      	movs	r1, #1
 800da30:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800da34:	f7fb fd94 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800da38:	2100      	movs	r1, #0
 800da3a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800da3e:	f7fb fd8f 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800da42:	e038      	b.n	800dab6 <USART_DeInit+0xee>
  else if (USARTx == UART5)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a22      	ldr	r2, [pc, #136]	; (800dad0 <USART_DeInit+0x108>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d10a      	bne.n	800da62 <USART_DeInit+0x9a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800da4c:	2101      	movs	r1, #1
 800da4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800da52:	f7fb fd85 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800da56:	2100      	movs	r1, #0
 800da58:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800da5c:	f7fb fd80 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800da60:	e029      	b.n	800dab6 <USART_DeInit+0xee>
  else if (USARTx == USART6)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4a1b      	ldr	r2, [pc, #108]	; (800dad4 <USART_DeInit+0x10c>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d108      	bne.n	800da7c <USART_DeInit+0xb4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800da6a:	2101      	movs	r1, #1
 800da6c:	2020      	movs	r0, #32
 800da6e:	f7fb fd97 	bl	80095a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800da72:	2100      	movs	r1, #0
 800da74:	2020      	movs	r0, #32
 800da76:	f7fb fd93 	bl	80095a0 <RCC_APB2PeriphResetCmd>
}
 800da7a:	e01c      	b.n	800dab6 <USART_DeInit+0xee>
  else if (USARTx == UART7)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	4a16      	ldr	r2, [pc, #88]	; (800dad8 <USART_DeInit+0x110>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d10a      	bne.n	800da9a <USART_DeInit+0xd2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 800da84:	2101      	movs	r1, #1
 800da86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800da8a:	f7fb fd69 	bl	8009560 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 800da8e:	2100      	movs	r1, #0
 800da90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800da94:	f7fb fd64 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800da98:	e00d      	b.n	800dab6 <USART_DeInit+0xee>
    if (USARTx == UART8)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4a0f      	ldr	r2, [pc, #60]	; (800dadc <USART_DeInit+0x114>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d109      	bne.n	800dab6 <USART_DeInit+0xee>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800daa2:	2101      	movs	r1, #1
 800daa4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800daa8:	f7fb fd5a 	bl	8009560 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 800daac:	2100      	movs	r1, #0
 800daae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800dab2:	f7fb fd55 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800dab6:	bf00      	nop
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	40011000 	.word	0x40011000
 800dac4:	40004400 	.word	0x40004400
 800dac8:	40004800 	.word	0x40004800
 800dacc:	40004c00 	.word	0x40004c00
 800dad0:	40005000 	.word	0x40005000
 800dad4:	40011400 	.word	0x40011400
 800dad8:	40007800 	.word	0x40007800
 800dadc:	40007c00 	.word	0x40007c00

0800dae0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b08a      	sub	sp, #40	; 0x28
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800daea:	2300      	movs	r3, #0
 800daec:	627b      	str	r3, [r7, #36]	; 0x24
 800daee:	2300      	movs	r3, #0
 800daf0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800daf2:	2300      	movs	r3, #0
 800daf4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800daf6:	2300      	movs	r3, #0
 800daf8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	8a1b      	ldrh	r3, [r3, #16]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800db02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800db08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	88db      	ldrh	r3, [r3, #6]
 800db0e:	461a      	mov	r2, r3
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	4313      	orrs	r3, r2
 800db14:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	b29a      	uxth	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	899b      	ldrh	r3, [r3, #12]
 800db22:	b29b      	uxth	r3, r3
 800db24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800db26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db28:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800db2c:	f023 030c 	bic.w	r3, r3, #12
 800db30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	889a      	ldrh	r2, [r3, #4]
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	891b      	ldrh	r3, [r3, #8]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800db42:	4313      	orrs	r3, r2
 800db44:	b29b      	uxth	r3, r3
 800db46:	461a      	mov	r2, r3
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	4313      	orrs	r3, r2
 800db4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800db4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db50:	b29a      	uxth	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	8a9b      	ldrh	r3, [r3, #20]
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db64:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	899b      	ldrh	r3, [r3, #12]
 800db6a:	461a      	mov	r2, r3
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	4313      	orrs	r3, r2
 800db70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db74:	b29a      	uxth	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800db7a:	f107 0308 	add.w	r3, r7, #8
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fb fad8 	bl	8009134 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	4a30      	ldr	r2, [pc, #192]	; (800dc48 <USART_Init+0x168>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d003      	beq.n	800db94 <USART_Init+0xb4>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	4a2f      	ldr	r2, [pc, #188]	; (800dc4c <USART_Init+0x16c>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d102      	bne.n	800db9a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	623b      	str	r3, [r7, #32]
 800db98:	e001      	b.n	800db9e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	899b      	ldrh	r3, [r3, #12]
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	b21b      	sxth	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	da0c      	bge.n	800dbc4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800dbaa:	6a3a      	ldr	r2, [r7, #32]
 800dbac:	4613      	mov	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	009a      	lsls	r2, r3, #2
 800dbb4:	441a      	add	r2, r3
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbc0:	61fb      	str	r3, [r7, #28]
 800dbc2:	e00b      	b.n	800dbdc <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800dbc4:	6a3a      	ldr	r2, [r7, #32]
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4413      	add	r3, r2
 800dbcc:	009a      	lsls	r2, r3, #2
 800dbce:	441a      	add	r2, r3
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbda:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	4a1c      	ldr	r2, [pc, #112]	; (800dc50 <USART_Init+0x170>)
 800dbe0:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe4:	095b      	lsrs	r3, r3, #5
 800dbe6:	011b      	lsls	r3, r3, #4
 800dbe8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800dbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbec:	091b      	lsrs	r3, r3, #4
 800dbee:	2264      	movs	r2, #100	; 0x64
 800dbf0:	fb02 f303 	mul.w	r3, r2, r3
 800dbf4:	69fa      	ldr	r2, [r7, #28]
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	899b      	ldrh	r3, [r3, #12]
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	b21b      	sxth	r3, r3
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	da0c      	bge.n	800dc20 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	00db      	lsls	r3, r3, #3
 800dc0a:	3332      	adds	r3, #50	; 0x32
 800dc0c:	4a10      	ldr	r2, [pc, #64]	; (800dc50 <USART_Init+0x170>)
 800dc0e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc12:	095b      	lsrs	r3, r3, #5
 800dc14:	f003 0307 	and.w	r3, r3, #7
 800dc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc1e:	e00b      	b.n	800dc38 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	011b      	lsls	r3, r3, #4
 800dc24:	3332      	adds	r3, #50	; 0x32
 800dc26:	4a0a      	ldr	r2, [pc, #40]	; (800dc50 <USART_Init+0x170>)
 800dc28:	fba2 2303 	umull	r2, r3, r2, r3
 800dc2c:	095b      	lsrs	r3, r3, #5
 800dc2e:	f003 030f 	and.w	r3, r3, #15
 800dc32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc34:	4313      	orrs	r3, r2
 800dc36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	811a      	strh	r2, [r3, #8]
}
 800dc40:	bf00      	nop
 800dc42:	3728      	adds	r7, #40	; 0x28
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	40011000 	.word	0x40011000
 800dc4c:	40011400 	.word	0x40011400
 800dc50:	51eb851f 	.word	0x51eb851f

0800dc54 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800dc62:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	220c      	movs	r2, #12
 800dc7a:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	819a      	strh	r2, [r3, #12]
}
 800dc82:	bf00      	nop
 800dc84:	370c      	adds	r7, #12
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b085      	sub	sp, #20
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
 800dc96:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	8a1b      	ldrh	r3, [r3, #16]
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800dcaa:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	881a      	ldrh	r2, [r3, #0]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	889b      	ldrh	r3, [r3, #4]
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	88db      	ldrh	r3, [r3, #6]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	821a      	strh	r2, [r3, #16]
}
 800dcd8:	bf00      	nop
 800dcda:	3714      	adds	r7, #20
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	80da      	strh	r2, [r3, #6]
}
 800dd04:	bf00      	nop
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr

0800dd10 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b083      	sub	sp, #12
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800dd1c:	78fb      	ldrb	r3, [r7, #3]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d008      	beq.n	800dd34 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	899b      	ldrh	r3, [r3, #12]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800dd32:	e007      	b.n	800dd44 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	899b      	ldrh	r3, [r3, #12]
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dd3e:	b29a      	uxth	r2, r3
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	819a      	strh	r2, [r3, #12]
}
 800dd44:	bf00      	nop
 800dd46:	370c      	adds	r7, #12
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	8b1b      	ldrh	r3, [r3, #24]
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	8b1b      	ldrh	r3, [r3, #24]
 800dd70:	b29a      	uxth	r2, r3
 800dd72:	78fb      	ldrb	r3, [r7, #3]
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	4313      	orrs	r3, r2
 800dd78:	b29a      	uxth	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	831a      	strh	r2, [r3, #24]
}
 800dd7e:	bf00      	nop
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr

0800dd8a <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800dd8a:	b480      	push	{r7}
 800dd8c:	b083      	sub	sp, #12
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	460b      	mov	r3, r1
 800dd94:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800dd96:	78fb      	ldrb	r3, [r7, #3]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d00a      	beq.n	800ddb2 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	899b      	ldrh	r3, [r3, #12]
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dda6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
 800ddb0:	e007      	b.n	800ddc2 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	899b      	ldrh	r3, [r3, #12]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	819a      	strh	r2, [r3, #12]
}  
 800ddc2:	bf00      	nop
 800ddc4:	370c      	adds	r7, #12
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800ddce:	b480      	push	{r7}
 800ddd0:	b083      	sub	sp, #12
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ddda:	78fb      	ldrb	r3, [r7, #3]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d008      	beq.n	800ddf2 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	8a9b      	ldrh	r3, [r3, #20]
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
 800ddf0:	e007      	b.n	800de02 <USART_OneBitMethodCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	8a9b      	ldrh	r3, [r3, #20]
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	829a      	strh	r2, [r3, #20]
}
 800de02:	bf00      	nop
 800de04:	370c      	adds	r7, #12
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr

0800de0e <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800de0e:	b480      	push	{r7}
 800de10:	b083      	sub	sp, #12
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
 800de16:	460b      	mov	r3, r1
 800de18:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800de1a:	887b      	ldrh	r3, [r7, #2]
 800de1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de20:	b29a      	uxth	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	809a      	strh	r2, [r3, #4]
}
 800de26:	bf00      	nop
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800de32:	b480      	push	{r7}
 800de34:	b083      	sub	sp, #12
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	889b      	ldrh	r3, [r3, #4]
 800de3e:	b29b      	uxth	r3, r3
 800de40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de44:	b29b      	uxth	r3, r3
}
 800de46:	4618      	mov	r0, r3
 800de48:	370c      	adds	r7, #12
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr

0800de52 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800de52:	b480      	push	{r7}
 800de54:	b083      	sub	sp, #12
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
 800de5a:	460b      	mov	r3, r1
 800de5c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	8a1b      	ldrh	r3, [r3, #16]
 800de62:	b29b      	uxth	r3, r3
 800de64:	f023 030f 	bic.w	r3, r3, #15
 800de68:	b29a      	uxth	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	8a1b      	ldrh	r3, [r3, #16]
 800de72:	b29a      	uxth	r2, r3
 800de74:	78fb      	ldrb	r3, [r7, #3]
 800de76:	b29b      	uxth	r3, r3
 800de78:	4313      	orrs	r3, r2
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	821a      	strh	r2, [r3, #16]
}
 800de80:	bf00      	nop
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	460b      	mov	r3, r1
 800de96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800de98:	78fb      	ldrb	r3, [r7, #3]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d008      	beq.n	800deb0 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	899b      	ldrh	r3, [r3, #12]
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	f043 0302 	orr.w	r3, r3, #2
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
 800deae:	e007      	b.n	800dec0 <USART_ReceiverWakeUpCmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	899b      	ldrh	r3, [r3, #12]
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	f023 0302 	bic.w	r3, r3, #2
 800deba:	b29a      	uxth	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	819a      	strh	r2, [r3, #12]
}
 800dec0:	bf00      	nop
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	460b      	mov	r3, r1
 800ded6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	899b      	ldrh	r3, [r3, #12]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dee2:	b29a      	uxth	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	899b      	ldrh	r3, [r3, #12]
 800deec:	b29a      	uxth	r2, r3
 800deee:	887b      	ldrh	r3, [r7, #2]
 800def0:	4313      	orrs	r3, r2
 800def2:	b29a      	uxth	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	819a      	strh	r2, [r3, #12]
}
 800def8:	bf00      	nop
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	460b      	mov	r3, r1
 800df0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	8a1b      	ldrh	r3, [r3, #16]
 800df14:	b29b      	uxth	r3, r3
 800df16:	f023 0320 	bic.w	r3, r3, #32
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	8a1b      	ldrh	r3, [r3, #16]
 800df24:	b29a      	uxth	r2, r3
 800df26:	887b      	ldrh	r3, [r7, #2]
 800df28:	4313      	orrs	r3, r2
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	821a      	strh	r2, [r3, #16]
}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	460b      	mov	r3, r1
 800df46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800df48:	78fb      	ldrb	r3, [r7, #3]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d008      	beq.n	800df60 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	8a1b      	ldrh	r3, [r3, #16]
 800df52:	b29b      	uxth	r3, r3
 800df54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800df58:	b29a      	uxth	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
 800df5e:	e007      	b.n	800df70 <USART_LINCmd+0x34>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	8a1b      	ldrh	r3, [r3, #16]
 800df64:	b29b      	uxth	r3, r3
 800df66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	821a      	strh	r2, [r3, #16]
}
 800df70:	bf00      	nop
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	899b      	ldrh	r3, [r3, #12]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	f043 0301 	orr.w	r3, r3, #1
 800df8e:	b29a      	uxth	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	819a      	strh	r2, [r3, #12]
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800dfac:	78fb      	ldrb	r3, [r7, #3]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d008      	beq.n	800dfc4 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	8a9b      	ldrh	r3, [r3, #20]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	f043 0308 	orr.w	r3, r3, #8
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
 800dfc2:	e007      	b.n	800dfd4 <USART_HalfDuplexCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	8a9b      	ldrh	r3, [r3, #20]
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	f023 0308 	bic.w	r3, r3, #8
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	829a      	strh	r2, [r3, #20]
}
 800dfd4:	bf00      	nop
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	8b1b      	ldrh	r3, [r3, #24]
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	8b1b      	ldrh	r3, [r3, #24]
 800dffe:	b29a      	uxth	r2, r3
 800e000:	78fb      	ldrb	r3, [r7, #3]
 800e002:	b29b      	uxth	r3, r3
 800e004:	021b      	lsls	r3, r3, #8
 800e006:	b29b      	uxth	r3, r3
 800e008:	4313      	orrs	r3, r2
 800e00a:	b29a      	uxth	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	831a      	strh	r2, [r3, #24]
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	460b      	mov	r3, r1
 800e026:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e028:	78fb      	ldrb	r3, [r7, #3]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d008      	beq.n	800e040 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	8a9b      	ldrh	r3, [r3, #20]
 800e032:	b29b      	uxth	r3, r3
 800e034:	f043 0320 	orr.w	r3, r3, #32
 800e038:	b29a      	uxth	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
 800e03e:	e007      	b.n	800e050 <USART_SmartCardCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	8a9b      	ldrh	r3, [r3, #20]
 800e044:	b29b      	uxth	r3, r3
 800e046:	f023 0320 	bic.w	r3, r3, #32
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	829a      	strh	r2, [r3, #20]
}
 800e050:	bf00      	nop
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d008      	beq.n	800e080 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	8a9b      	ldrh	r3, [r3, #20]
 800e072:	b29b      	uxth	r3, r3
 800e074:	f043 0310 	orr.w	r3, r3, #16
 800e078:	b29a      	uxth	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
 800e07e:	e007      	b.n	800e090 <USART_SmartCardNACKCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	8a9b      	ldrh	r3, [r3, #20]
 800e084:	b29b      	uxth	r3, r3
 800e086:	f023 0310 	bic.w	r3, r3, #16
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	829a      	strh	r2, [r3, #20]
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	8a9b      	ldrh	r3, [r3, #20]
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	f023 0304 	bic.w	r3, r3, #4
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	8a9b      	ldrh	r3, [r3, #20]
 800e0bc:	b29a      	uxth	r2, r3
 800e0be:	887b      	ldrh	r3, [r7, #2]
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	829a      	strh	r2, [r3, #20]
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	460b      	mov	r3, r1
 800e0de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d008      	beq.n	800e0f8 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	8a9b      	ldrh	r3, [r3, #20]
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	f043 0302 	orr.w	r3, r3, #2
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
 800e0f6:	e007      	b.n	800e108 <USART_IrDACmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	8a9b      	ldrh	r3, [r3, #20]
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	f023 0302 	bic.w	r3, r3, #2
 800e102:	b29a      	uxth	r2, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	829a      	strh	r2, [r3, #20]
}
 800e108:	bf00      	nop
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	460b      	mov	r3, r1
 800e11e:	807b      	strh	r3, [r7, #2]
 800e120:	4613      	mov	r3, r2
 800e122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800e124:	787b      	ldrb	r3, [r7, #1]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d008      	beq.n	800e13c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	8a9b      	ldrh	r3, [r3, #20]
 800e12e:	b29a      	uxth	r2, r3
 800e130:	887b      	ldrh	r3, [r7, #2]
 800e132:	4313      	orrs	r3, r2
 800e134:	b29a      	uxth	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 800e13a:	e009      	b.n	800e150 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	8a9b      	ldrh	r3, [r3, #20]
 800e140:	b29a      	uxth	r2, r3
 800e142:	887b      	ldrh	r3, [r7, #2]
 800e144:	43db      	mvns	r3, r3
 800e146:	b29b      	uxth	r3, r3
 800e148:	4013      	ands	r3, r2
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	829a      	strh	r2, [r3, #20]
}
 800e150:	bf00      	nop
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b087      	sub	sp, #28
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	807b      	strh	r3, [r7, #2]
 800e168:	4613      	mov	r3, r2
 800e16a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800e16c:	2300      	movs	r3, #0
 800e16e:	613b      	str	r3, [r7, #16]
 800e170:	2300      	movs	r3, #0
 800e172:	60fb      	str	r3, [r7, #12]
 800e174:	2300      	movs	r3, #0
 800e176:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800e178:	2300      	movs	r3, #0
 800e17a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800e180:	887b      	ldrh	r3, [r7, #2]
 800e182:	b2db      	uxtb	r3, r3
 800e184:	095b      	lsrs	r3, r3, #5
 800e186:	b2db      	uxtb	r3, r3
 800e188:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800e18a:	887b      	ldrh	r3, [r7, #2]
 800e18c:	f003 031f 	and.w	r3, r3, #31
 800e190:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800e192:	2201      	movs	r2, #1
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	fa02 f303 	lsl.w	r3, r2, r3
 800e19a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d103      	bne.n	800e1aa <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	330c      	adds	r3, #12
 800e1a6:	617b      	str	r3, [r7, #20]
 800e1a8:	e009      	b.n	800e1be <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d103      	bne.n	800e1b8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	3310      	adds	r3, #16
 800e1b4:	617b      	str	r3, [r7, #20]
 800e1b6:	e002      	b.n	800e1be <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	3314      	adds	r3, #20
 800e1bc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800e1be:	787b      	ldrb	r3, [r7, #1]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d006      	beq.n	800e1d2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	697a      	ldr	r2, [r7, #20]
 800e1c8:	6811      	ldr	r1, [r2, #0]
 800e1ca:	68ba      	ldr	r2, [r7, #8]
 800e1cc:	430a      	orrs	r2, r1
 800e1ce:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800e1d0:	e006      	b.n	800e1e0 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	697a      	ldr	r2, [r7, #20]
 800e1d6:	6811      	ldr	r1, [r2, #0]
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	43d2      	mvns	r2, r2
 800e1dc:	400a      	ands	r2, r1
 800e1de:	601a      	str	r2, [r3, #0]
}
 800e1e0:	bf00      	nop
 800e1e2:	371c      	adds	r7, #28
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	881b      	ldrh	r3, [r3, #0]
 800e200:	b29a      	uxth	r2, r3
 800e202:	887b      	ldrh	r3, [r7, #2]
 800e204:	4013      	ands	r3, r2
 800e206:	b29b      	uxth	r3, r3
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800e20c:	2301      	movs	r3, #1
 800e20e:	73fb      	strb	r3, [r7, #15]
 800e210:	e001      	b.n	800e216 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800e212:	2300      	movs	r3, #0
 800e214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e216:	7bfb      	ldrb	r3, [r7, #15]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800e230:	887b      	ldrh	r3, [r7, #2]
 800e232:	43db      	mvns	r3, r3
 800e234:	b29a      	uxth	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	801a      	strh	r2, [r3, #0]
}
 800e23a:	bf00      	nop
 800e23c:	370c      	adds	r7, #12
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr

0800e246 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800e246:	b480      	push	{r7}
 800e248:	b087      	sub	sp, #28
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	460b      	mov	r3, r1
 800e250:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800e252:	2300      	movs	r3, #0
 800e254:	60fb      	str	r3, [r7, #12]
 800e256:	2300      	movs	r3, #0
 800e258:	617b      	str	r3, [r7, #20]
 800e25a:	2300      	movs	r3, #0
 800e25c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800e25e:	2300      	movs	r3, #0
 800e260:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800e262:	887b      	ldrh	r3, [r7, #2]
 800e264:	b2db      	uxtb	r3, r3
 800e266:	095b      	lsrs	r3, r3, #5
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800e26c:	887b      	ldrh	r3, [r7, #2]
 800e26e:	f003 031f 	and.w	r3, r3, #31
 800e272:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800e274:	2201      	movs	r2, #1
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	fa02 f303 	lsl.w	r3, r2, r3
 800e27c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d107      	bne.n	800e294 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	899b      	ldrh	r3, [r3, #12]
 800e288:	b29b      	uxth	r3, r3
 800e28a:	461a      	mov	r2, r3
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	4013      	ands	r3, r2
 800e290:	617b      	str	r3, [r7, #20]
 800e292:	e011      	b.n	800e2b8 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	2b02      	cmp	r3, #2
 800e298:	d107      	bne.n	800e2aa <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	8a1b      	ldrh	r3, [r3, #16]
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	4013      	ands	r3, r2
 800e2a6:	617b      	str	r3, [r7, #20]
 800e2a8:	e006      	b.n	800e2b8 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	8a9b      	ldrh	r3, [r3, #20]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	4013      	ands	r3, r2
 800e2b6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800e2b8:	887b      	ldrh	r3, [r7, #2]
 800e2ba:	0a1b      	lsrs	r3, r3, #8
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e2c8:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	4013      	ands	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d005      	beq.n	800e2ea <USART_GetITStatus+0xa4>
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	74fb      	strb	r3, [r7, #19]
 800e2e8:	e001      	b.n	800e2ee <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800e2ee:	7cfb      	ldrb	r3, [r7, #19]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	371c      	adds	r7, #28
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b085      	sub	sp, #20
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	460b      	mov	r3, r1
 800e306:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800e308:	2300      	movs	r3, #0
 800e30a:	81fb      	strh	r3, [r7, #14]
 800e30c:	2300      	movs	r3, #0
 800e30e:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800e310:	887b      	ldrh	r3, [r7, #2]
 800e312:	0a1b      	lsrs	r3, r3, #8
 800e314:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800e316:	89fb      	ldrh	r3, [r7, #14]
 800e318:	2201      	movs	r2, #1
 800e31a:	fa02 f303 	lsl.w	r3, r2, r3
 800e31e:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800e320:	89bb      	ldrh	r3, [r7, #12]
 800e322:	43db      	mvns	r3, r3
 800e324:	b29a      	uxth	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	801a      	strh	r2, [r3, #0]
}
 800e32a:	bf00      	nop
 800e32c:	3714      	adds	r7, #20
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr
 800e336:	bf00      	nop

0800e338 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 800e33c:	2101      	movs	r1, #1
 800e33e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e342:	f7fb f90d 	bl	8009560 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800e346:	2100      	movs	r1, #0
 800e348:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e34c:	f7fb f908 	bl	8009560 <RCC_APB1PeriphResetCmd>
}
 800e350:	bf00      	nop
 800e352:	bd80      	pop	{r7, pc}

0800e354 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 800e354:	b480      	push	{r7}
 800e356:	b085      	sub	sp, #20
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e35c:	2300      	movs	r3, #0
 800e35e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 800e360:	4b08      	ldr	r3, [pc, #32]	; (800e384 <WWDG_SetPrescaler+0x30>)
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800e368:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4313      	orrs	r3, r2
 800e370:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 800e372:	4a04      	ldr	r2, [pc, #16]	; (800e384 <WWDG_SetPrescaler+0x30>)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6053      	str	r3, [r2, #4]
}
 800e378:	bf00      	nop
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	40002c00 	.word	0x40002c00

0800e388 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	4603      	mov	r3, r0
 800e390:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 800e396:	4b0a      	ldr	r3, [pc, #40]	; (800e3c0 <WWDG_SetWindowValue+0x38>)
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e39e:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 800e3a0:	79fb      	ldrb	r3, [r7, #7]
 800e3a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 800e3ac:	4a04      	ldr	r2, [pc, #16]	; (800e3c0 <WWDG_SetWindowValue+0x38>)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6053      	str	r3, [r2, #4]
}
 800e3b2:	bf00      	nop
 800e3b4:	3714      	adds	r7, #20
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	40002c00 	.word	0x40002c00

0800e3c4 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 800e3c8:	4b03      	ldr	r3, [pc, #12]	; (800e3d8 <WWDG_EnableIT+0x14>)
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	601a      	str	r2, [r3, #0]
}
 800e3ce:	bf00      	nop
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr
 800e3d8:	420580a4 	.word	0x420580a4

0800e3dc <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 800e3e6:	4a05      	ldr	r2, [pc, #20]	; (800e3fc <WWDG_SetCounter+0x20>)
 800e3e8:	79fb      	ldrb	r3, [r7, #7]
 800e3ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3ee:	6013      	str	r3, [r2, #0]
}
 800e3f0:	bf00      	nop
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	40002c00 	.word	0x40002c00

0800e400 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
 800e406:	4603      	mov	r3, r0
 800e408:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 800e40a:	4a06      	ldr	r2, [pc, #24]	; (800e424 <WWDG_Enable+0x24>)
 800e40c:	79fb      	ldrb	r3, [r7, #7]
 800e40e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e412:	b2db      	uxtb	r3, r3
 800e414:	6013      	str	r3, [r2, #0]
}
 800e416:	bf00      	nop
 800e418:	370c      	adds	r7, #12
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	40002c00 	.word	0x40002c00

0800e428 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800e42e:	2300      	movs	r3, #0
 800e430:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 800e432:	4b08      	ldr	r3, [pc, #32]	; (800e454 <WWDG_GetFlagStatus+0x2c>)
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d002      	beq.n	800e440 <WWDG_GetFlagStatus+0x18>
  {
    bitstatus = SET;
 800e43a:	2301      	movs	r3, #1
 800e43c:	71fb      	strb	r3, [r7, #7]
 800e43e:	e001      	b.n	800e444 <WWDG_GetFlagStatus+0x1c>
  }
  else
  {
    bitstatus = RESET;
 800e440:	2300      	movs	r3, #0
 800e442:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800e444:	79fb      	ldrb	r3, [r7, #7]
}
 800e446:	4618      	mov	r0, r3
 800e448:	370c      	adds	r7, #12
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop
 800e454:	40002c00 	.word	0x40002c00

0800e458 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 800e458:	b480      	push	{r7}
 800e45a:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 800e45c:	4b03      	ldr	r3, [pc, #12]	; (800e46c <WWDG_ClearFlag+0x14>)
 800e45e:	2200      	movs	r2, #0
 800e460:	609a      	str	r2, [r3, #8]
}
 800e462:	bf00      	nop
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	40002c00 	.word	0x40002c00

0800e470 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	4603      	mov	r3, r0
 800e478:	6039      	str	r1, [r7, #0]
 800e47a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800e47c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e480:	2b00      	cmp	r3, #0
 800e482:	da0b      	bge.n	800e49c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e484:	490d      	ldr	r1, [pc, #52]	; (800e4bc <NVIC_SetPriority+0x4c>)
 800e486:	79fb      	ldrb	r3, [r7, #7]
 800e488:	f003 030f 	and.w	r3, r3, #15
 800e48c:	3b04      	subs	r3, #4
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	b2d2      	uxtb	r2, r2
 800e492:	0112      	lsls	r2, r2, #4
 800e494:	b2d2      	uxtb	r2, r2
 800e496:	440b      	add	r3, r1
 800e498:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e49a:	e009      	b.n	800e4b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e49c:	4908      	ldr	r1, [pc, #32]	; (800e4c0 <NVIC_SetPriority+0x50>)
 800e49e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	b2d2      	uxtb	r2, r2
 800e4a6:	0112      	lsls	r2, r2, #4
 800e4a8:	b2d2      	uxtb	r2, r2
 800e4aa:	440b      	add	r3, r1
 800e4ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e4b0:	bf00      	nop
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr
 800e4bc:	e000ed00 	.word	0xe000ed00
 800e4c0:	e000e100 	.word	0xe000e100

0800e4c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e4d4:	d301      	bcc.n	800e4da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e00f      	b.n	800e4fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e4da:	4a0a      	ldr	r2, [pc, #40]	; (800e504 <SysTick_Config+0x40>)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e4e2:	210f      	movs	r1, #15
 800e4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4e8:	f7ff ffc2 	bl	800e470 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e4ec:	4b05      	ldr	r3, [pc, #20]	; (800e504 <SysTick_Config+0x40>)
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e4f2:	4b04      	ldr	r3, [pc, #16]	; (800e504 <SysTick_Config+0x40>)
 800e4f4:	2207      	movs	r2, #7
 800e4f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	e000e010 	.word	0xe000e010

0800e508 <main>:
//globals
volatile uint32_t TimingDelay;


int main(void)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
    //Configure the systick with interrupts, HSI = 16Mhz
    if (SysTick_Config(SystemCoreClock / 1000))
 800e50e:	4b13      	ldr	r3, [pc, #76]	; (800e55c <main+0x54>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4a13      	ldr	r2, [pc, #76]	; (800e560 <main+0x58>)
 800e514:	fba2 2303 	umull	r2, r3, r2, r3
 800e518:	099b      	lsrs	r3, r3, #6
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7ff ffd2 	bl	800e4c4 <SysTick_Config>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d000      	beq.n	800e528 <main+0x20>
    {
        while (1);
 800e526:	e7fe      	b.n	800e526 <main+0x1e>
    }

    //configure the hardware
    gpio_init();
 800e528:	f000 f844 	bl	800e5b4 <gpio_init>
    gpio_button_init();
 800e52c:	f000 f862 	bl	800e5f4 <gpio_button_init>




    int i = 0;
 800e530:	2300      	movs	r3, #0
 800e532:	607b      	str	r3, [r7, #4]


    /* Infinite loop */
    while (1)
    {
        GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 800e534:	2120      	movs	r1, #32
 800e536:	480b      	ldr	r0, [pc, #44]	; (800e564 <main+0x5c>)
 800e538:	f7f8 ffc9 	bl	80074ce <GPIO_ResetBits>
        Delay(1000);
 800e53c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e540:	f000 f812 	bl	800e568 <Delay>
        GPIO_SetBits(GPIOA, GPIO_Pin_5);
 800e544:	2120      	movs	r1, #32
 800e546:	4807      	ldr	r0, [pc, #28]	; (800e564 <main+0x5c>)
 800e548:	f7f8 ffb2 	bl	80074b0 <GPIO_SetBits>
        Delay(1000);
 800e54c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e550:	f000 f80a 	bl	800e568 <Delay>

        i++;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	3301      	adds	r3, #1
 800e558:	607b      	str	r3, [r7, #4]
        GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 800e55a:	e7eb      	b.n	800e534 <main+0x2c>
 800e55c:	20000014 	.word	0x20000014
 800e560:	10624dd3 	.word	0x10624dd3
 800e564:	40020000 	.word	0x40020000

0800e568 <Delay>:


/////////////////////////////////////////////////
//Delay
void Delay(volatile uint32_t timeTick)
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
    TimingDelay = timeTick;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4a06      	ldr	r2, [pc, #24]	; (800e58c <Delay+0x24>)
 800e574:	6013      	str	r3, [r2, #0]
    while (TimingDelay != 0);
 800e576:	bf00      	nop
 800e578:	4b04      	ldr	r3, [pc, #16]	; (800e58c <Delay+0x24>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1fb      	bne.n	800e578 <Delay+0x10>
}
 800e580:	bf00      	nop
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr
 800e58c:	20000034 	.word	0x20000034

0800e590 <TimingDelay_Decrement>:


////////////////////////////////////////////////
void TimingDelay_Decrement(void)
{
 800e590:	b480      	push	{r7}
 800e592:	af00      	add	r7, sp, #0
    if (TimingDelay != 0)
 800e594:	4b06      	ldr	r3, [pc, #24]	; (800e5b0 <TimingDelay_Decrement+0x20>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d004      	beq.n	800e5a6 <TimingDelay_Decrement+0x16>
        TimingDelay--;
 800e59c:	4b04      	ldr	r3, [pc, #16]	; (800e5b0 <TimingDelay_Decrement+0x20>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	4a03      	ldr	r2, [pc, #12]	; (800e5b0 <TimingDelay_Decrement+0x20>)
 800e5a4:	6013      	str	r3, [r2, #0]
}
 800e5a6:	bf00      	nop
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	20000034 	.word	0x20000034

0800e5b4 <gpio_init>:

///////////////////////////////////////////
//Function prototypes
//configure the led on PA5
void gpio_init(void)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
    //init structs
    GPIO_InitTypeDef  GPIO_InitStructure;

    //Enable PortA clocks
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);		//PA5 - green led
 800e5ba:	2101      	movs	r1, #1
 800e5bc:	2001      	movs	r0, #1
 800e5be:	f7fa fecf 	bl	8009360 <RCC_AHB1PeriphClockCmd>

    //PA5
    //LEDs
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_5;
 800e5c2:	2320      	movs	r3, #32
 800e5c4:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;            //configure for output
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;          //push pull
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;       //max is 45mhz
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;        //no pull
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800e5d6:	463b      	mov	r3, r7
 800e5d8:	4619      	mov	r1, r3
 800e5da:	4805      	ldr	r0, [pc, #20]	; (800e5f0 <gpio_init+0x3c>)
 800e5dc:	f7f8 fe50 	bl	8007280 <GPIO_Init>

    GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 800e5e0:	2120      	movs	r1, #32
 800e5e2:	4803      	ldr	r0, [pc, #12]	; (800e5f0 <gpio_init+0x3c>)
 800e5e4:	f7f8 ff73 	bl	80074ce <GPIO_ResetBits>

}
 800e5e8:	bf00      	nop
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	40020000 	.word	0x40020000

0800e5f4 <gpio_button_init>:
///////////////////////////////////////
//Configure the user button on PC13
//with interrupts.  guessing it's EXTI Line13
//falling edge trigger
void gpio_button_init(void)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    EXTI_InitTypeDef EXTI_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    //Enable Port C clocks - AHB1 Bus
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);       //PC13 - user button
 800e5fa:	2101      	movs	r1, #1
 800e5fc:	2004      	movs	r0, #4
 800e5fe:	f7fa feaf 	bl	8009360 <RCC_AHB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);      //clock enable for line interrupts
 800e602:	2101      	movs	r1, #1
 800e604:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e608:	f7fa ff2a 	bl	8009460 <RCC_APB2PeriphClockCmd>

    //User button - pc13
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800e60c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e610:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;            //input
 800e612:	2300      	movs	r3, #0
 800e614:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;          //push pull
 800e616:	2300      	movs	r3, #0
 800e618:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;       //max is 45mhz
 800e61a:	2301      	movs	r3, #1
 800e61c:	757b      	strb	r3, [r7, #21]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;          //normally up
 800e61e:	2301      	movs	r3, #1
 800e620:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 800e622:	f107 0310 	add.w	r3, r7, #16
 800e626:	4619      	mov	r1, r3
 800e628:	4812      	ldr	r0, [pc, #72]	; (800e674 <gpio_button_init+0x80>)
 800e62a:	f7f8 fe29 	bl	8007280 <GPIO_Init>

    //interrupts - pc13 with line interrupts
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
 800e62e:	210d      	movs	r1, #13
 800e630:	2002      	movs	r0, #2
 800e632:	f7fd fb41 	bl	800bcb8 <SYSCFG_EXTILineConfig>

    EXTI_InitStructure.EXTI_Line = EXTI_Line13;
 800e636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e63a:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800e63c:	2301      	movs	r3, #1
 800e63e:	73bb      	strb	r3, [r7, #14]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800e640:	2300      	movs	r3, #0
 800e642:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 800e644:	230c      	movs	r3, #12
 800e646:	737b      	strb	r3, [r7, #13]
    EXTI_Init(&EXTI_InitStructure);
 800e648:	f107 0308 	add.w	r3, r7, #8
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7f7 fbe5 	bl	8005e1c <EXTI_Init>

    //lines 10-15 share same irq
    NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 800e652:	2328      	movs	r3, #40	; 0x28
 800e654:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800e656:	2301      	movs	r3, #1
 800e658:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800e65a:	2301      	movs	r3, #1
 800e65c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800e65e:	2301      	movs	r3, #1
 800e660:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 800e662:	1d3b      	adds	r3, r7, #4
 800e664:	4618      	mov	r0, r3
 800e666:	f7f1 fdcb 	bl	8000200 <NVIC_Init>
}
 800e66a:	bf00      	nop
 800e66c:	3718      	adds	r7, #24
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	40020800 	.word	0x40020800

0800e678 <gpio_button_handler>:

////////////////////////////////////////
//button interrupt handler for the
//user button on PC13
void gpio_button_handler(void)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	af00      	add	r7, sp, #0
    GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 800e67c:	2120      	movs	r1, #32
 800e67e:	4802      	ldr	r0, [pc, #8]	; (800e688 <gpio_button_handler+0x10>)
 800e680:	f7f8 ff5b 	bl	800753a <GPIO_ToggleBits>
}
 800e684:	bf00      	nop
 800e686:	bd80      	pop	{r7, pc}
 800e688:	40020000 	.word	0x40020000
 800e68c:	0800eeb0 	.word	0x0800eeb0
 800e690:	20000000 	.word	0x20000000
 800e694:	20000018 	.word	0x20000018
 800e698:	20000018 	.word	0x20000018
 800e69c:	2000003c 	.word	0x2000003c

0800e6a0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	af00      	add	r7, sp, #0
}
 800e6a4:	bf00      	nop
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr

0800e6ae <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800e6ae:	b480      	push	{r7}
 800e6b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800e6b2:	e7fe      	b.n	800e6b2 <HardFault_Handler+0x4>

0800e6b4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800e6b8:	e7fe      	b.n	800e6b8 <MemManage_Handler+0x4>

0800e6ba <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800e6ba:	b480      	push	{r7}
 800e6bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800e6be:	e7fe      	b.n	800e6be <BusFault_Handler+0x4>

0800e6c0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800e6c4:	e7fe      	b.n	800e6c4 <UsageFault_Handler+0x4>

0800e6c6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800e6c6:	b480      	push	{r7}
 800e6c8:	af00      	add	r7, sp, #0
}
 800e6ca:	bf00      	nop
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	af00      	add	r7, sp, #0
}
 800e6d8:	bf00      	nop
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr

0800e6e2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800e6e2:	b480      	push	{r7}
 800e6e4:	af00      	add	r7, sp, #0
}
 800e6e6:	bf00      	nop
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	af00      	add	r7, sp, #0
	TimingDelay_Decrement();
 800e6f4:	f7ff ff4c 	bl	800e590 <TimingDelay_Decrement>
}
 800e6f8:	bf00      	nop
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <EXTI15_10_IRQHandler>:
//Interrupt handler for user button
//on PC13 - falling edge trigger
//NOTE:  Other pins can trigger this interrupt
//
void EXTI15_10_IRQHandler(void)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line13) != RESET)
 800e700:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e704:	f7f7 fc4e 	bl	8005fa4 <EXTI_GetITStatus>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d005      	beq.n	800e71a <EXTI15_10_IRQHandler+0x1e>
    {
        gpio_button_handler();
 800e70e:	f7ff ffb3 	bl	800e678 <gpio_button_handler>

        EXTI_ClearITPendingBit(EXTI_Line13);
 800e712:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e716:	f7f7 fc69 	bl	8005fec <EXTI_ClearITPendingBit>
    }

}
 800e71a:	bf00      	nop
 800e71c:	bd80      	pop	{r7, pc}
	...

0800e720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e720:	b480      	push	{r7}
 800e722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e724:	4a16      	ldr	r2, [pc, #88]	; (800e780 <SystemInit+0x60>)
 800e726:	4b16      	ldr	r3, [pc, #88]	; (800e780 <SystemInit+0x60>)
 800e728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e72c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e734:	4a13      	ldr	r2, [pc, #76]	; (800e784 <SystemInit+0x64>)
 800e736:	4b13      	ldr	r3, [pc, #76]	; (800e784 <SystemInit+0x64>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f043 0301 	orr.w	r3, r3, #1
 800e73e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e740:	4b10      	ldr	r3, [pc, #64]	; (800e784 <SystemInit+0x64>)
 800e742:	2200      	movs	r2, #0
 800e744:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e746:	4a0f      	ldr	r2, [pc, #60]	; (800e784 <SystemInit+0x64>)
 800e748:	4b0e      	ldr	r3, [pc, #56]	; (800e784 <SystemInit+0x64>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800e750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e754:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800e756:	4b0b      	ldr	r3, [pc, #44]	; (800e784 <SystemInit+0x64>)
 800e758:	4a0b      	ldr	r2, [pc, #44]	; (800e788 <SystemInit+0x68>)
 800e75a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e75c:	4a09      	ldr	r2, [pc, #36]	; (800e784 <SystemInit+0x64>)
 800e75e:	4b09      	ldr	r3, [pc, #36]	; (800e784 <SystemInit+0x64>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e766:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e768:	4b06      	ldr	r3, [pc, #24]	; (800e784 <SystemInit+0x64>)
 800e76a:	2200      	movs	r2, #0
 800e76c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e76e:	4b04      	ldr	r3, [pc, #16]	; (800e780 <SystemInit+0x60>)
 800e770:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e774:	609a      	str	r2, [r3, #8]
#endif
}
 800e776:	bf00      	nop
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr
 800e780:	e000ed00 	.word	0xe000ed00
 800e784:	40023800 	.word	0x40023800
 800e788:	24003010 	.word	0x24003010

0800e78c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b087      	sub	sp, #28
 800e790:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800e792:	2300      	movs	r3, #0
 800e794:	613b      	str	r3, [r7, #16]
 800e796:	2300      	movs	r3, #0
 800e798:	617b      	str	r3, [r7, #20]
 800e79a:	2302      	movs	r3, #2
 800e79c:	60fb      	str	r3, [r7, #12]
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60bb      	str	r3, [r7, #8]
 800e7a2:	2302      	movs	r3, #2
 800e7a4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800e7a6:	4b31      	ldr	r3, [pc, #196]	; (800e86c <SystemCoreClockUpdate+0xe0>)
 800e7a8:	689b      	ldr	r3, [r3, #8]
 800e7aa:	f003 030c 	and.w	r3, r3, #12
 800e7ae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d007      	beq.n	800e7c6 <SystemCoreClockUpdate+0x3a>
 800e7b6:	2b08      	cmp	r3, #8
 800e7b8:	d009      	beq.n	800e7ce <SystemCoreClockUpdate+0x42>
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d13d      	bne.n	800e83a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800e7be:	4b2c      	ldr	r3, [pc, #176]	; (800e870 <SystemCoreClockUpdate+0xe4>)
 800e7c0:	4a2c      	ldr	r2, [pc, #176]	; (800e874 <SystemCoreClockUpdate+0xe8>)
 800e7c2:	601a      	str	r2, [r3, #0]
      break;
 800e7c4:	e03d      	b.n	800e842 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800e7c6:	4b2a      	ldr	r3, [pc, #168]	; (800e870 <SystemCoreClockUpdate+0xe4>)
 800e7c8:	4a2b      	ldr	r2, [pc, #172]	; (800e878 <SystemCoreClockUpdate+0xec>)
 800e7ca:	601a      	str	r2, [r3, #0]
      break;
 800e7cc:	e039      	b.n	800e842 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800e7ce:	4b27      	ldr	r3, [pc, #156]	; (800e86c <SystemCoreClockUpdate+0xe0>)
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	0d9b      	lsrs	r3, r3, #22
 800e7d4:	f003 0301 	and.w	r3, r3, #1
 800e7d8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e7da:	4b24      	ldr	r3, [pc, #144]	; (800e86c <SystemCoreClockUpdate+0xe0>)
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7e2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00c      	beq.n	800e804 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800e7ea:	4a23      	ldr	r2, [pc, #140]	; (800e878 <SystemCoreClockUpdate+0xec>)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7f2:	4a1e      	ldr	r2, [pc, #120]	; (800e86c <SystemCoreClockUpdate+0xe0>)
 800e7f4:	6852      	ldr	r2, [r2, #4]
 800e7f6:	0992      	lsrs	r2, r2, #6
 800e7f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e7fc:	fb02 f303 	mul.w	r3, r2, r3
 800e800:	617b      	str	r3, [r7, #20]
 800e802:	e00b      	b.n	800e81c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800e804:	4a1b      	ldr	r2, [pc, #108]	; (800e874 <SystemCoreClockUpdate+0xe8>)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	fbb2 f3f3 	udiv	r3, r2, r3
 800e80c:	4a17      	ldr	r2, [pc, #92]	; (800e86c <SystemCoreClockUpdate+0xe0>)
 800e80e:	6852      	ldr	r2, [r2, #4]
 800e810:	0992      	lsrs	r2, r2, #6
 800e812:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e816:	fb02 f303 	mul.w	r3, r2, r3
 800e81a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800e81c:	4b13      	ldr	r3, [pc, #76]	; (800e86c <SystemCoreClockUpdate+0xe0>)
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	0c1b      	lsrs	r3, r3, #16
 800e822:	f003 0303 	and.w	r3, r3, #3
 800e826:	3301      	adds	r3, #1
 800e828:	005b      	lsls	r3, r3, #1
 800e82a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800e82c:	697a      	ldr	r2, [r7, #20]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	fbb2 f3f3 	udiv	r3, r2, r3
 800e834:	4a0e      	ldr	r2, [pc, #56]	; (800e870 <SystemCoreClockUpdate+0xe4>)
 800e836:	6013      	str	r3, [r2, #0]
      break;
 800e838:	e003      	b.n	800e842 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800e83a:	4b0d      	ldr	r3, [pc, #52]	; (800e870 <SystemCoreClockUpdate+0xe4>)
 800e83c:	4a0d      	ldr	r2, [pc, #52]	; (800e874 <SystemCoreClockUpdate+0xe8>)
 800e83e:	601a      	str	r2, [r3, #0]
      break;
 800e840:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800e842:	4b0a      	ldr	r3, [pc, #40]	; (800e86c <SystemCoreClockUpdate+0xe0>)
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	091b      	lsrs	r3, r3, #4
 800e848:	f003 030f 	and.w	r3, r3, #15
 800e84c:	4a0b      	ldr	r2, [pc, #44]	; (800e87c <SystemCoreClockUpdate+0xf0>)
 800e84e:	5cd3      	ldrb	r3, [r2, r3]
 800e850:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800e852:	4b07      	ldr	r3, [pc, #28]	; (800e870 <SystemCoreClockUpdate+0xe4>)
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	fa22 f303 	lsr.w	r3, r2, r3
 800e85c:	4a04      	ldr	r2, [pc, #16]	; (800e870 <SystemCoreClockUpdate+0xe4>)
 800e85e:	6013      	str	r3, [r2, #0]
}
 800e860:	bf00      	nop
 800e862:	371c      	adds	r7, #28
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr
 800e86c:	40023800 	.word	0x40023800
 800e870:	20000014 	.word	0x20000014
 800e874:	00f42400 	.word	0x00f42400
 800e878:	017d7840 	.word	0x017d7840
 800e87c:	0800ee94 	.word	0x0800ee94

0800e880 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800e880:	b480      	push	{r7}
 800e882:	b087      	sub	sp, #28
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800e88c:	2301      	movs	r3, #1
 800e88e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800e890:	e004      	b.n	800e89c <ts_itoa+0x1c>
		div *= base;
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	fb02 f303 	mul.w	r3, r2, r3
 800e89a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	fbb2 f2f3 	udiv	r2, r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d2f3      	bcs.n	800e892 <ts_itoa+0x12>

	while (div != 0)
 800e8aa:	e029      	b.n	800e900 <ts_itoa+0x80>
	{
		int num = d/div;
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	68ba      	ldr	r2, [r7, #8]
 800e8b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8b4:	613b      	str	r3, [r7, #16]
		d = d%div;
 800e8b6:	697a      	ldr	r2, [r7, #20]
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8be:	fb02 f201 	mul.w	r2, r2, r1
 800e8c2:	1a9b      	subs	r3, r3, r2
 800e8c4:	60bb      	str	r3, [r7, #8]
		div /= base;
 800e8c6:	697a      	ldr	r2, [r7, #20]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	fb92 f3f3 	sdiv	r3, r2, r3
 800e8ce:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	2b09      	cmp	r3, #9
 800e8d4:	dd0a      	ble.n	800e8ec <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	1c59      	adds	r1, r3, #1
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	6011      	str	r1, [r2, #0]
 800e8e0:	693a      	ldr	r2, [r7, #16]
 800e8e2:	b2d2      	uxtb	r2, r2
 800e8e4:	3237      	adds	r2, #55	; 0x37
 800e8e6:	b2d2      	uxtb	r2, r2
 800e8e8:	701a      	strb	r2, [r3, #0]
 800e8ea:	e009      	b.n	800e900 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	1c59      	adds	r1, r3, #1
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	6011      	str	r1, [r2, #0]
 800e8f6:	693a      	ldr	r2, [r7, #16]
 800e8f8:	b2d2      	uxtb	r2, r2
 800e8fa:	3230      	adds	r2, #48	; 0x30
 800e8fc:	b2d2      	uxtb	r2, r2
 800e8fe:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1d2      	bne.n	800e8ac <ts_itoa+0x2c>
	}
}
 800e906:	bf00      	nop
 800e908:	371c      	adds	r7, #28
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr

0800e912 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b088      	sub	sp, #32
 800e916:	af00      	add	r7, sp, #0
 800e918:	60f8      	str	r0, [r7, #12]
 800e91a:	60b9      	str	r1, [r7, #8]
 800e91c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800e922:	e07d      	b.n	800ea20 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	2b25      	cmp	r3, #37	; 0x25
 800e92a:	d171      	bne.n	800ea10 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	3301      	adds	r3, #1
 800e930:	60bb      	str	r3, [r7, #8]
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2b64      	cmp	r3, #100	; 0x64
 800e938:	d01e      	beq.n	800e978 <ts_formatstring+0x66>
 800e93a:	2b64      	cmp	r3, #100	; 0x64
 800e93c:	dc06      	bgt.n	800e94c <ts_formatstring+0x3a>
 800e93e:	2b58      	cmp	r3, #88	; 0x58
 800e940:	d050      	beq.n	800e9e4 <ts_formatstring+0xd2>
 800e942:	2b63      	cmp	r3, #99	; 0x63
 800e944:	d00e      	beq.n	800e964 <ts_formatstring+0x52>
 800e946:	2b25      	cmp	r3, #37	; 0x25
 800e948:	d058      	beq.n	800e9fc <ts_formatstring+0xea>
 800e94a:	e05d      	b.n	800ea08 <ts_formatstring+0xf6>
 800e94c:	2b73      	cmp	r3, #115	; 0x73
 800e94e:	d02b      	beq.n	800e9a8 <ts_formatstring+0x96>
 800e950:	2b73      	cmp	r3, #115	; 0x73
 800e952:	dc02      	bgt.n	800e95a <ts_formatstring+0x48>
 800e954:	2b69      	cmp	r3, #105	; 0x69
 800e956:	d00f      	beq.n	800e978 <ts_formatstring+0x66>
 800e958:	e056      	b.n	800ea08 <ts_formatstring+0xf6>
 800e95a:	2b75      	cmp	r3, #117	; 0x75
 800e95c:	d037      	beq.n	800e9ce <ts_formatstring+0xbc>
 800e95e:	2b78      	cmp	r3, #120	; 0x78
 800e960:	d040      	beq.n	800e9e4 <ts_formatstring+0xd2>
 800e962:	e051      	b.n	800ea08 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	1c5a      	adds	r2, r3, #1
 800e968:	60fa      	str	r2, [r7, #12]
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	1d11      	adds	r1, r2, #4
 800e96e:	6079      	str	r1, [r7, #4]
 800e970:	6812      	ldr	r2, [r2, #0]
 800e972:	b2d2      	uxtb	r2, r2
 800e974:	701a      	strb	r2, [r3, #0]
				break;
 800e976:	e047      	b.n	800ea08 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	1d1a      	adds	r2, r3, #4
 800e97c:	607a      	str	r2, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	2b00      	cmp	r3, #0
 800e986:	da07      	bge.n	800e998 <ts_formatstring+0x86>
					{
						val *= -1;
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	425b      	negs	r3, r3
 800e98c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	1c5a      	adds	r2, r3, #1
 800e992:	60fa      	str	r2, [r7, #12]
 800e994:	222d      	movs	r2, #45	; 0x2d
 800e996:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800e998:	69f9      	ldr	r1, [r7, #28]
 800e99a:	f107 030c 	add.w	r3, r7, #12
 800e99e:	220a      	movs	r2, #10
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7ff ff6d 	bl	800e880 <ts_itoa>
				}
				break;
 800e9a6:	e02f      	b.n	800ea08 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	1d1a      	adds	r2, r3, #4
 800e9ac:	607a      	str	r2, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800e9b2:	e007      	b.n	800e9c4 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	1c5a      	adds	r2, r3, #1
 800e9b8:	60fa      	str	r2, [r7, #12]
 800e9ba:	69ba      	ldr	r2, [r7, #24]
 800e9bc:	1c51      	adds	r1, r2, #1
 800e9be:	61b9      	str	r1, [r7, #24]
 800e9c0:	7812      	ldrb	r2, [r2, #0]
 800e9c2:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1f3      	bne.n	800e9b4 <ts_formatstring+0xa2>
					}
				}
				break;
 800e9cc:	e01c      	b.n	800ea08 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	1d1a      	adds	r2, r3, #4
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	6819      	ldr	r1, [r3, #0]
 800e9d6:	f107 030c 	add.w	r3, r7, #12
 800e9da:	220a      	movs	r2, #10
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7ff ff4f 	bl	800e880 <ts_itoa>
				break;
 800e9e2:	e011      	b.n	800ea08 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	1d1a      	adds	r2, r3, #4
 800e9e8:	607a      	str	r2, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	f107 030c 	add.w	r3, r7, #12
 800e9f2:	2210      	movs	r2, #16
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7ff ff43 	bl	800e880 <ts_itoa>
				break;
 800e9fa:	e005      	b.n	800ea08 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	1c5a      	adds	r2, r3, #1
 800ea00:	60fa      	str	r2, [r7, #12]
 800ea02:	2225      	movs	r2, #37	; 0x25
 800ea04:	701a      	strb	r2, [r3, #0]
				  break;
 800ea06:	bf00      	nop
			}
			fmt++;
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	60bb      	str	r3, [r7, #8]
 800ea0e:	e007      	b.n	800ea20 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	1c5a      	adds	r2, r3, #1
 800ea14:	60fa      	str	r2, [r7, #12]
 800ea16:	68ba      	ldr	r2, [r7, #8]
 800ea18:	1c51      	adds	r1, r2, #1
 800ea1a:	60b9      	str	r1, [r7, #8]
 800ea1c:	7812      	ldrb	r2, [r2, #0]
 800ea1e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f47f af7d 	bne.w	800e924 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	461a      	mov	r2, r3
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	1ad3      	subs	r3, r2, r3
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3720      	adds	r7, #32
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b085      	sub	sp, #20
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
	int length = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800ea4e:	e081      	b.n	800eb54 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	2b25      	cmp	r3, #37	; 0x25
 800ea56:	d177      	bne.n	800eb48 <ts_formatlength+0x108>
		{
			++fmt;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	3b58      	subs	r3, #88	; 0x58
 800ea64:	2b20      	cmp	r3, #32
 800ea66:	d86a      	bhi.n	800eb3e <ts_formatlength+0xfe>
 800ea68:	a201      	add	r2, pc, #4	; (adr r2, 800ea70 <ts_formatlength+0x30>)
 800ea6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6e:	bf00      	nop
 800ea70:	0800eb31 	.word	0x0800eb31
 800ea74:	0800eb3f 	.word	0x0800eb3f
 800ea78:	0800eb3f 	.word	0x0800eb3f
 800ea7c:	0800eb3f 	.word	0x0800eb3f
 800ea80:	0800eb3f 	.word	0x0800eb3f
 800ea84:	0800eb3f 	.word	0x0800eb3f
 800ea88:	0800eb3f 	.word	0x0800eb3f
 800ea8c:	0800eb3f 	.word	0x0800eb3f
 800ea90:	0800eb3f 	.word	0x0800eb3f
 800ea94:	0800eb3f 	.word	0x0800eb3f
 800ea98:	0800eb3f 	.word	0x0800eb3f
 800ea9c:	0800eaf5 	.word	0x0800eaf5
 800eaa0:	0800eb03 	.word	0x0800eb03
 800eaa4:	0800eb3f 	.word	0x0800eb3f
 800eaa8:	0800eb3f 	.word	0x0800eb3f
 800eaac:	0800eb3f 	.word	0x0800eb3f
 800eab0:	0800eb3f 	.word	0x0800eb3f
 800eab4:	0800eb03 	.word	0x0800eb03
 800eab8:	0800eb3f 	.word	0x0800eb3f
 800eabc:	0800eb3f 	.word	0x0800eb3f
 800eac0:	0800eb3f 	.word	0x0800eb3f
 800eac4:	0800eb3f 	.word	0x0800eb3f
 800eac8:	0800eb3f 	.word	0x0800eb3f
 800eacc:	0800eb3f 	.word	0x0800eb3f
 800ead0:	0800eb3f 	.word	0x0800eb3f
 800ead4:	0800eb3f 	.word	0x0800eb3f
 800ead8:	0800eb3f 	.word	0x0800eb3f
 800eadc:	0800eb11 	.word	0x0800eb11
 800eae0:	0800eb3f 	.word	0x0800eb3f
 800eae4:	0800eb03 	.word	0x0800eb03
 800eae8:	0800eb3f 	.word	0x0800eb3f
 800eaec:	0800eb3f 	.word	0x0800eb3f
 800eaf0:	0800eb31 	.word	0x0800eb31
			{
			  case 'c':
		  		  va_arg(va, int);
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	3304      	adds	r3, #4
 800eaf8:	603b      	str	r3, [r7, #0]
				  ++length;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3301      	adds	r3, #1
 800eafe:	60fb      	str	r3, [r7, #12]
				  break;
 800eb00:	e025      	b.n	800eb4e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	330b      	adds	r3, #11
 800eb06:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	3304      	adds	r3, #4
 800eb0c:	603b      	str	r3, [r7, #0]
				  break;
 800eb0e:	e01e      	b.n	800eb4e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	1d1a      	adds	r2, r3, #4
 800eb14:	603a      	str	r2, [r7, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 800eb1a:	e002      	b.n	800eb22 <ts_formatlength+0xe2>
			  			  ++length;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	1c5a      	adds	r2, r3, #1
 800eb26:	60ba      	str	r2, [r7, #8]
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1f6      	bne.n	800eb1c <ts_formatlength+0xdc>
			  	  }
				  break;
 800eb2e:	e00e      	b.n	800eb4e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	3308      	adds	r3, #8
 800eb34:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	3304      	adds	r3, #4
 800eb3a:	603b      	str	r3, [r7, #0]
				  break;
 800eb3c:	e007      	b.n	800eb4e <ts_formatlength+0x10e>
			  default:
				  ++length;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	3301      	adds	r3, #1
 800eb42:	60fb      	str	r3, [r7, #12]
				  break;
 800eb44:	bf00      	nop
 800eb46:	e002      	b.n	800eb4e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	3301      	adds	r3, #1
 800eb52:	607b      	str	r3, [r7, #4]
	while (*fmt)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f47f af79 	bne.w	800ea50 <ts_formatlength+0x10>
	}
	return length;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3714      	adds	r7, #20
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800eb6c:	b40e      	push	{r1, r2, r3}
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b085      	sub	sp, #20
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800eb76:	f107 0320 	add.w	r3, r7, #32
 800eb7a:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800eb7c:	68ba      	ldr	r2, [r7, #8]
 800eb7e:	69f9      	ldr	r1, [r7, #28]
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7ff fec6 	bl	800e912 <ts_formatstring>
 800eb86:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 800eb88:	68fb      	ldr	r3, [r7, #12]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eb94:	b003      	add	sp, #12
 800eb96:	4770      	bx	lr

0800eb98 <fiprintf>:
**            given file stream according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int fiprintf(FILE * stream, const char *fmt, ...)
{
 800eb98:	b40e      	push	{r1, r2, r3}
 800eb9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
	int length = 0;
 800eba4:	2300      	movs	r3, #0
 800eba6:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 800eba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ebac:	60bb      	str	r3, [r7, #8]
	length = ts_formatlength(fmt, va);
 800ebae:	68b9      	ldr	r1, [r7, #8]
 800ebb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ebb2:	f7ff ff45 	bl	800ea40 <ts_formatlength>
 800ebb6:	6178      	str	r0, [r7, #20]
	va_end(va);
	{
 800ebb8:	466b      	mov	r3, sp
 800ebba:	461e      	mov	r6, r3
		char buf[length];
 800ebbc:	6979      	ldr	r1, [r7, #20]
 800ebbe:	1e4b      	subs	r3, r1, #1
 800ebc0:	613b      	str	r3, [r7, #16]
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	f04f 0300 	mov.w	r3, #0
 800ebca:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800ebce:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800ebd2:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	461a      	mov	r2, r3
 800ebda:	f04f 0300 	mov.w	r3, #0
 800ebde:	00dd      	lsls	r5, r3, #3
 800ebe0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ebe4:	00d4      	lsls	r4, r2, #3
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	3307      	adds	r3, #7
 800ebea:	08db      	lsrs	r3, r3, #3
 800ebec:	00db      	lsls	r3, r3, #3
 800ebee:	ebad 0d03 	sub.w	sp, sp, r3
 800ebf2:	466b      	mov	r3, sp
 800ebf4:	3300      	adds	r3, #0
 800ebf6:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 800ebf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ebfc:	60bb      	str	r3, [r7, #8]
		length = ts_formatstring(buf, fmt, va);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	68ba      	ldr	r2, [r7, #8]
 800ec02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7ff fe84 	bl	800e912 <ts_formatstring>
 800ec0a:	6178      	str	r0, [r7, #20]
		length = _write(stream->_file, buf, length);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ec12:	4618      	mov	r0, r3
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	4619      	mov	r1, r3
 800ec1a:	f000 f925 	bl	800ee68 <_write>
 800ec1e:	6178      	str	r0, [r7, #20]
 800ec20:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800ec22:	697b      	ldr	r3, [r7, #20]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3718      	adds	r7, #24
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec2e:	b003      	add	sp, #12
 800ec30:	4770      	bx	lr

0800ec32 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800ec32:	b40f      	push	{r0, r1, r2, r3}
 800ec34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec38:	b085      	sub	sp, #20
 800ec3a:	af00      	add	r7, sp, #0
	int length = 0;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800ec40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ec44:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800ec46:	6839      	ldr	r1, [r7, #0]
 800ec48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec4a:	f7ff fef9 	bl	800ea40 <ts_formatlength>
 800ec4e:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800ec50:	466b      	mov	r3, sp
 800ec52:	461e      	mov	r6, r3
		char buf[length];
 800ec54:	68f9      	ldr	r1, [r7, #12]
 800ec56:	1e4b      	subs	r3, r1, #1
 800ec58:	60bb      	str	r3, [r7, #8]
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	f04f 0300 	mov.w	r3, #0
 800ec62:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800ec66:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800ec6a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800ec6e:	460b      	mov	r3, r1
 800ec70:	461a      	mov	r2, r3
 800ec72:	f04f 0300 	mov.w	r3, #0
 800ec76:	00dd      	lsls	r5, r3, #3
 800ec78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ec7c:	00d4      	lsls	r4, r2, #3
 800ec7e:	460b      	mov	r3, r1
 800ec80:	3307      	adds	r3, #7
 800ec82:	08db      	lsrs	r3, r3, #3
 800ec84:	00db      	lsls	r3, r3, #3
 800ec86:	ebad 0d03 	sub.w	sp, sp, r3
 800ec8a:	466b      	mov	r3, sp
 800ec8c:	3300      	adds	r3, #0
 800ec8e:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800ec90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ec94:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	683a      	ldr	r2, [r7, #0]
 800ec9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7ff fe38 	bl	800e912 <ts_formatstring>
 800eca2:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	4619      	mov	r1, r3
 800ecaa:	2001      	movs	r0, #1
 800ecac:	f000 f8dc 	bl	800ee68 <_write>
 800ecb0:	60f8      	str	r0, [r7, #12]
 800ecb2:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3714      	adds	r7, #20
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecc0:	b004      	add	sp, #16
 800ecc2:	4770      	bx	lr

0800ecc4 <fputs>:
**  Returns:  If successful, the result is 0; otherwise, the result is EOF.
**
**===========================================================================
*/
int fputs(const char *s, FILE *fp)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
	int length = strlen(s);
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 f874 	bl	800edbc <strlen>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	613b      	str	r3, [r7, #16]
	int wlen = 0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	60fb      	str	r3, [r7, #12]
	int res;

	wlen = _write((fp->_file), (char*)s, length);
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ece2:	693a      	ldr	r2, [r7, #16]
 800ece4:	6879      	ldr	r1, [r7, #4]
 800ece6:	4618      	mov	r0, r3
 800ece8:	f000 f8be 	bl	800ee68 <_write>
 800ecec:	60f8      	str	r0, [r7, #12]
	wlen += _write((fp->_file), "\n", 1);
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	490c      	ldr	r1, [pc, #48]	; (800ed28 <fputs+0x64>)
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f000 f8b5 	bl	800ee68 <_write>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	4413      	add	r3, r2
 800ed04:	60fb      	str	r3, [r7, #12]

	if (wlen == (length+1))
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	1c5a      	adds	r2, r3, #1
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d102      	bne.n	800ed16 <fputs+0x52>
	{
		res = 0;
 800ed10:	2300      	movs	r3, #0
 800ed12:	617b      	str	r3, [r7, #20]
 800ed14:	e002      	b.n	800ed1c <fputs+0x58>
	}
	else
	{
		res = EOF;
 800ed16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed1a:	617b      	str	r3, [r7, #20]
	}

	return res;
 800ed1c:	697b      	ldr	r3, [r7, #20]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3718      	adds	r7, #24
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	0800eea4 	.word	0x0800eea4

0800ed2c <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b086      	sub	sp, #24
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 f841 	bl	800edbc <strlen>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	6879      	ldr	r1, [r7, #4]
 800ed46:	2001      	movs	r0, #1
 800ed48:	f000 f88e 	bl	800ee68 <_write>
 800ed4c:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 800ed4e:	2201      	movs	r2, #1
 800ed50:	490b      	ldr	r1, [pc, #44]	; (800ed80 <puts+0x54>)
 800ed52:	2001      	movs	r0, #1
 800ed54:	f000 f888 	bl	800ee68 <_write>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d102      	bne.n	800ed70 <puts+0x44>
	{
		res = 0;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	617b      	str	r3, [r7, #20]
 800ed6e:	e002      	b.n	800ed76 <puts+0x4a>
	}
	else
	{
		res = EOF;
 800ed70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed74:	617b      	str	r3, [r7, #20]
	}

	return res;
 800ed76:	697b      	ldr	r3, [r7, #20]
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3718      	adds	r7, #24
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	0800eea4 	.word	0x0800eea4

0800ed84 <fwrite>:
**  Returns:  Number of elements written
**
**===========================================================================
*/
size_t fwrite(const void * buf, size_t size, size_t count, FILE * fp)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
 800ed90:	603b      	str	r3, [r7, #0]
	return (_write((fp->_file), (char*)buf, size * count) / size);
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	fb02 f303 	mul.w	r3, r2, r3
 800eda2:	461a      	mov	r2, r3
 800eda4:	68f9      	ldr	r1, [r7, #12]
 800eda6:	f000 f85f 	bl	800ee68 <_write>
 800edaa:	4603      	mov	r3, r0
 800edac:	461a      	mov	r2, r3
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <strlen>:
 800edbc:	4603      	mov	r3, r0
 800edbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edc2:	2a00      	cmp	r2, #0
 800edc4:	d1fb      	bne.n	800edbe <strlen+0x2>
 800edc6:	1a18      	subs	r0, r3, r0
 800edc8:	3801      	subs	r0, #1
 800edca:	4770      	bx	lr

0800edcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800edcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ee04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800edd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800edd2:	e003      	b.n	800eddc <LoopCopyDataInit>

0800edd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800edd4:	4b0c      	ldr	r3, [pc, #48]	; (800ee08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800edd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800edd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800edda:	3104      	adds	r1, #4

0800eddc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800eddc:	480b      	ldr	r0, [pc, #44]	; (800ee0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800edde:	4b0c      	ldr	r3, [pc, #48]	; (800ee10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ede0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ede2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ede4:	d3f6      	bcc.n	800edd4 <CopyDataInit>
  ldr  r2, =_sbss
 800ede6:	4a0b      	ldr	r2, [pc, #44]	; (800ee14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ede8:	e002      	b.n	800edf0 <LoopFillZerobss>

0800edea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800edea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800edec:	f842 3b04 	str.w	r3, [r2], #4

0800edf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800edf0:	4b09      	ldr	r3, [pc, #36]	; (800ee18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800edf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800edf4:	d3f9      	bcc.n	800edea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800edf6:	f7ff fc93 	bl	800e720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800edfa:	f000 f811 	bl	800ee20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800edfe:	f7ff fb83 	bl	800e508 <main>
  bx  lr    
 800ee02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800ee04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ee08:	0800eeb0 	.word	0x0800eeb0
  ldr  r0, =_sdata
 800ee0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ee10:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 800ee14:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 800ee18:	2000003c 	.word	0x2000003c

0800ee1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ee1c:	e7fe      	b.n	800ee1c <ADC_IRQHandler>
	...

0800ee20 <__libc_init_array>:
 800ee20:	b570      	push	{r4, r5, r6, lr}
 800ee22:	4e0d      	ldr	r6, [pc, #52]	; (800ee58 <__libc_init_array+0x38>)
 800ee24:	4c0d      	ldr	r4, [pc, #52]	; (800ee5c <__libc_init_array+0x3c>)
 800ee26:	1ba4      	subs	r4, r4, r6
 800ee28:	10a4      	asrs	r4, r4, #2
 800ee2a:	2500      	movs	r5, #0
 800ee2c:	42a5      	cmp	r5, r4
 800ee2e:	d109      	bne.n	800ee44 <__libc_init_array+0x24>
 800ee30:	4e0b      	ldr	r6, [pc, #44]	; (800ee60 <__libc_init_array+0x40>)
 800ee32:	4c0c      	ldr	r4, [pc, #48]	; (800ee64 <__libc_init_array+0x44>)
 800ee34:	f000 f822 	bl	800ee7c <_init>
 800ee38:	1ba4      	subs	r4, r4, r6
 800ee3a:	10a4      	asrs	r4, r4, #2
 800ee3c:	2500      	movs	r5, #0
 800ee3e:	42a5      	cmp	r5, r4
 800ee40:	d105      	bne.n	800ee4e <__libc_init_array+0x2e>
 800ee42:	bd70      	pop	{r4, r5, r6, pc}
 800ee44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee48:	4798      	blx	r3
 800ee4a:	3501      	adds	r5, #1
 800ee4c:	e7ee      	b.n	800ee2c <__libc_init_array+0xc>
 800ee4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee52:	4798      	blx	r3
 800ee54:	3501      	adds	r5, #1
 800ee56:	e7f2      	b.n	800ee3e <__libc_init_array+0x1e>
 800ee58:	0800eea8 	.word	0x0800eea8
 800ee5c:	0800eea8 	.word	0x0800eea8
 800ee60:	0800eea8 	.word	0x0800eea8
 800ee64:	0800eeac 	.word	0x0800eeac

0800ee68 <_write>:
 800ee68:	4b02      	ldr	r3, [pc, #8]	; (800ee74 <_write+0xc>)
 800ee6a:	2258      	movs	r2, #88	; 0x58
 800ee6c:	601a      	str	r2, [r3, #0]
 800ee6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee72:	4770      	bx	lr
 800ee74:	20000038 	.word	0x20000038

0800ee78 <__EH_FRAME_BEGIN__>:
 800ee78:	00000000                                ....

0800ee7c <_init>:
 800ee7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7e:	bf00      	nop
 800ee80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee82:	bc08      	pop	{r3}
 800ee84:	469e      	mov	lr, r3
 800ee86:	4770      	bx	lr

0800ee88 <_fini>:
 800ee88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee8a:	bf00      	nop
 800ee8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee8e:	bc08      	pop	{r3}
 800ee90:	469e      	mov	lr, r3
 800ee92:	4770      	bx	lr
